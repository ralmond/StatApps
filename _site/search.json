[
  {
    "objectID": "Geyser.html",
    "href": "Geyser.html",
    "title": "Histogram Bins",
    "section": "",
    "text": "The data show the duration (in minutes) of eruptions of the Geyser ‘Old Faithful’ in Yellowstone National Park, Wyoming. Härdle (1991)."
  },
  {
    "objectID": "Geyser.html#bin-size-and-bandwidth.",
    "href": "Geyser.html#bin-size-and-bandwidth.",
    "title": "Histogram Bins",
    "section": "Bin size and bandwidth.",
    "text": "Bin size and bandwidth.\nThe number of histograms in a describe how much detail you get. Try adjusting thing number to see the effect. Too few bins might cause the viewer to miss out on important details. Too many bins might cause the viewer to see details that are just an artifact of the sample (which might be different if the data were taken from a different window of time).\nThe smooth line is a kernel smoother (a technique which available in R, but not SPSS). The bandwidth of the smoother is like the bin size of the histogram. Large bandwidths provide less detail and smaller provide more.\nWith both bin sizes and bandwidths: * The analyst sometimes need to try a few values to find the best one for your purposes. * The defaults in the stat packages are usually a good starting point. Try more bins (or smaller bandwidth) and fewer bins (less bandwidth) than the automatically chosen starting point.\n\n\n\nAttaching package: 'shiny'\n\n\nThe following object is masked from 'package:shinyjs':\n\n    runExample\n\n\n\n\n\n\nNumber of bins:\n\n10\n20\n35\n50\n\n\n\n\n\n\nBandwidth adjustment:\n\n\n\n\n\n\n\n\n\n\nHärdle, W. (1991). Smoothing Techniques with Implementation in S. New York: Springer."
  },
  {
    "objectID": "Geyser.html#credits",
    "href": "Geyser.html#credits",
    "title": "Histogram Bins",
    "section": "Credits",
    "text": "Credits\nI borrowed this document from one of the Shiny sample documents. Original instructions below. (Russell Almond).\nThis R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.\nTo learn more, see Interactive Documents."
  },
  {
    "objectID": "CovidVaccines.html",
    "href": "CovidVaccines.html",
    "title": "Covid-19 Vaccines",
    "section": "",
    "text": "Good News! In November, both Pfizer and Moderna announce Phase 3 Vaccine Trials with promising results.\nWith over 30,000 participants in each study they reported the following data.\nTreatment\nPfizer\nModernaAll\nModernaSevere\nN\n\n\n\n\nPlacebo\n90\n95\n11\n15000\n\n\nVaccine\n5\n5\n0\n15000"
  },
  {
    "objectID": "CovidVaccines.html#measures-of-effectiveness",
    "href": "CovidVaccines.html#measures-of-effectiveness",
    "title": "Covid-19 Vaccines",
    "section": "Measures of Effectiveness",
    "text": "Measures of Effectiveness\nWe start with a cross-tab\n\n\n\nTreatment\nSick\nHealthy\nTotal\n\n\n\n\nPlacebo\nSP\nHP\nNP\n\n\nVaccine\nSV\nHV\nNV\n\n\nTotal\nNS\nNH\nN\n\n\n\nOdds of getting sick\nPlacebo: $ SP/HP $ Vaccine: $ SV/HV $\n\nCross Product (Odds) Ratio\n\\[ OR = \\frac{SP/HP}{SV/HV} \\] How much does your odds of getting sick increase if you get the placebo instead of the vaccine.\n\n\nRisk Ratio\n\\[ RR = \\frac{SP/NP}{SV/NV} \\] How much does your probiliby of getting sick increase if you get the placebo instead of the vaccine.\n\n\nVaccine Effectiveness\n\\[ VE = 100 (1 - \\frac{1}{RR}) \\]\n\n\nChi-square test\nNull hypothesis is that getting the disease is independent of the vaccine. In other words, \\(OR=RR=1\\).\n\\[ SV/NV = SP/NP \\]\nLarge chi-squared value incidates that cross product rate is not 1 (but doesn’t tell if placebo or vaccine is better!\n\n\nZ-score test\nAnother way to work with these data is to calculate probabilities of infection for each group and the standard errors. Then can use the \\(z\\)-test to compare.\n\\[p_V = p(S|V) = SV/NV \\qquad SE(p_V) = \\sqrt{p_V(1-p_V)/NV} \\] \\[p_P = p(S|P) = SP/NP \\qquad SE(p_P) = \\sqrt{p_P(1-p_P)/NP} \\] \\[ z = \\frac{p_P-p_V}{\\sqrt{SE(p_V)^2 + SE(p_P)^2}}\\]"
  },
  {
    "objectID": "CovidVaccines.html#pfizer-vaccine",
    "href": "CovidVaccines.html#pfizer-vaccine",
    "title": "Covid-19 Vaccines",
    "section": "Pfizer Vaccine",
    "text": "Pfizer Vaccine\nThere were around 30,000 volunteers in the Phase 3 trials; 15,000 in each arm.\n\n\n\n\n\nTreatment\nPfizer\np.Pfizer\ns.Pfizer\n\n\n\n\nPlacebo\n90\n6e-03\n0.00063\n\n\nVaccine\n5\n3e-04\n0.00015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX^2 – Pfizer\nIn SPSS this is done by producing a cross-tab. We don’t have the number of negative cases in each arm of the study, but up to rounding error it is just the sample size, so we will use that.\n\n\n\nPfizer Cross Tab\n\n\n\n\n\nPhizer X2\n\n\n\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  as.matrix(select(covidVaccines, Pfizer, N))\nX-squared = 74.034, df = 1, p-value &lt; 2.2e-16\n\n\n\n\nZ =  8.75 p =  0 \n\n\n\n\n\nPfizer Risk Ratio\n\n\n\n\nRisk Ratio:  18 Vaccine Effectiveness:  94.4"
  },
  {
    "objectID": "CovidVaccines.html#moderna-vaccine-all-cases",
    "href": "CovidVaccines.html#moderna-vaccine-all-cases",
    "title": "Covid-19 Vaccines",
    "section": "Moderna Vaccine – All Cases",
    "text": "Moderna Vaccine – All Cases\nThere were around 30,000 volunteers in the Phase 3 trials; 15,000 in each arm.\n\n\n\n\n\nTreatment\nModernaAll\np.ModernaAll\ns.ModernaAll\n\n\n\n\nPlacebo\n95\n0.0063\n0.00065\n\n\nVaccine\n5\n0.0003\n0.00015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX^2 – Moderna (All Cases)\nIn SPSS this is done by producing a cross-tab. We don’t have the number of negative cases in each arm of the study, but up to rounding error it is just the sample size, so we will use that.\n\n\n\nModerna All Cases Cross Tab\n\n\n\n\n\nModerna All Cases X2\n\n\n\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  as.matrix(select(covidVaccines, ModernaAll, N))\nX-squared = 78.942, df = 1, p-value &lt; 2.2e-16\n\n\n\n\nZ =  9.03 p =  0 \n\n\n\n\n\nModerna All Cases Risk Ratio\n\n\n\n\nRisk Ratio:  19 Vaccine Effectiveness:  94.7"
  },
  {
    "objectID": "CovidVaccines.html#moderna-vaccine-severe-cases",
    "href": "CovidVaccines.html#moderna-vaccine-severe-cases",
    "title": "Covid-19 Vaccines",
    "section": "Moderna Vaccine – Severe Cases",
    "text": "Moderna Vaccine – Severe Cases\n\n\n\n\n\nTreatment\nModernaSevere\np.ModernaSevere\ns.ModernaSevere\n\n\n\n\nPlacebo\n11\n7e-04\n0.00022\n\n\nVaccine\n0\n0e+00\n0.00000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX^2 – Moderna (All Cases)\nIn SPSS this is done by producing a cross-tab. We don’t have the number of negative cases in each arm of the study, but up to rounding error it is just the sample size, so we will use that.\n\n\n\nModerna Severe Cases Cross Tab\n\n\n\n\n\nModerna Severe Cases X2\n\n\n\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  as.matrix(select(covidVaccines, ModernaSevere, N))\nX-squared = 9.0869, df = 1, p-value = 0.002574\n\n\n\n\nZ =  3.32 p =  0 \n\n\n\n\nRisk Ratio:  Inf Vaccine Effectiveness:  100 \n\n\nYikes! The estimate for the chances of getting Severe Covid-19 with the virus is 0. Divide by zero error!\nBut probability zero means impossible. That is not right!\n\n\nContinuity Correction\nFix this by adding a conditinuity correction. We add 1/2 to all of the entries in the table.\nIn particular, this makes the estimated rate for getting severe COVID-19 \\(\\frac{1}{2}/(N+1)\\).\n\n\n\n\n\nTreatment\nModernaSevere\np.ModernaSevere\ns.ModernaSevere\n\n\n\n\nPlacebo\n11\n0.00077\n0.00023\n\n\nVaccine\n0\n0.00003\n0.00005\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRisk Ratio:  23 Vaccine Effectiveness:  95.7"
  },
  {
    "objectID": "CovidVaccines.html#references",
    "href": "CovidVaccines.html#references",
    "title": "Covid-19 Vaccines",
    "section": "References:",
    "text": "References:\n\nStatNews article on Pfizer vaccine: https://www.statnews.com/2020/11/09/covid-19-vaccine-from-pfizer-and-biontech-is-strongly-effective-early-data-from-large-trial-indicate/\nOfficial Protocol document from Pfizer: https://www.pfizer.com/science/coronavirus\nPfizer Press Release: https://www.pfizer.com/news/press-release/press-release-detail/pfizer-and-biontech-announce-vaccine-candidate-against\nModerna Press Release: https://investors.modernatx.com/news-releases/news-release-details/modernas-covid-19-vaccine-candidate-meets-its-primary-efficacy\nEntries from Andrew Gelman’s Blog: https://statmodeling.stat.columbia.edu/2020/11/16/estimating-efficacy-of-the-vaccine-from-95-true-infections/\n\nhttps://statmodeling.stat.columbia.edu/2020/11/11/the-pfizer-biontech-vaccine-may-be-a-lot-more-effective-than-you-think/\n\nHow to use SPSS to obtain Odd Ratio and Relative Risk http://brahms.emu.edu.tr/icetin/spss8-RR-OR.pdf"
  },
  {
    "objectID": "ConfidenceInterval.html",
    "href": "ConfidenceInterval.html",
    "title": "Confidence Intervals",
    "section": "",
    "text": "The simple heuristic for the confidence interval is that if we take a sample and calculate an estimator and a standard error for that estimator; 95% of the time the estimand will be within 2 standard errors of the estimate. This heuristic works best for sample means, because by the central limit theorem the distribution of the sample mean will be approximately normal. It also works fairly well for other statistics, like regression slopes.\nLet the goal be to produce an interval which \\((1-\\alpha)\\)% of the time captures the estimand. If we assume that the estimate, \\(\\widetilde{f(Y)}\\), is approximately normally distributed with a mean of the estimand, \\(f(Y)\\) and a standard deviation of the standard error of the estimate, \\(\\sigma_{\\widetilde{f(Y)}}\\), (i.e., we are assuming that central limit theorem holds at least approximately for \\(\\widetilde{f(Y)}\\)), then we can produce a confidence interval using the following expression: \\[ \\widetilde{f(Y)} \\pm z_{1-\\alpha/2}\\ \\sigma_{\\widetilde{f(Y)}}\\; .\\]\nUgh. Lets break this apart using an example. Let’s say what we are interested in is the sample mean. Then \\(\\widetilde{f(Y)} = \\bar Y\\) is just the sample mean. The quantile \\(z_{1-\\alpha/2}\\) depends on the desired accuracy. The default choice is \\(1-\\alpha=.95\\), so \\(1-\\alpha/2 = .975\\), and looking this up on the normal table \\(z_{.975}\\approx 1.96 \\approx 2\\). Finally, \\(\\sigma_{\\widetilde{f(Y)}}\\) is the standard error of the mean, so if the population standard deviation of \\(Y\\) is \\(\\sigma_Y\\) and the sample size is \\(N\\), then \\(\\sigma_{\\widetilde{f(Y)}} = \\sigma_Y/\\sqrt{N}\\). This gives us the slightly easier to look at: \\[\\bar Y \\pm 1.96 \\sigma_Y/\\sqrt{N} \\approx \\bar Y \\pm 2 \\sigma_Y/\\sqrt{N}\\ ;\\] Note that we are assuming that \\(\\sigma_Y\\) is known here. If we need to estimate it from the data, we need a slightly different formula given later."
  },
  {
    "objectID": "ConfidenceInterval.html#confidence-intervals",
    "href": "ConfidenceInterval.html#confidence-intervals",
    "title": "Confidence Intervals",
    "section": "",
    "text": "The simple heuristic for the confidence interval is that if we take a sample and calculate an estimator and a standard error for that estimator; 95% of the time the estimand will be within 2 standard errors of the estimate. This heuristic works best for sample means, because by the central limit theorem the distribution of the sample mean will be approximately normal. It also works fairly well for other statistics, like regression slopes.\nLet the goal be to produce an interval which \\((1-\\alpha)\\)% of the time captures the estimand. If we assume that the estimate, \\(\\widetilde{f(Y)}\\), is approximately normally distributed with a mean of the estimand, \\(f(Y)\\) and a standard deviation of the standard error of the estimate, \\(\\sigma_{\\widetilde{f(Y)}}\\), (i.e., we are assuming that central limit theorem holds at least approximately for \\(\\widetilde{f(Y)}\\)), then we can produce a confidence interval using the following expression: \\[ \\widetilde{f(Y)} \\pm z_{1-\\alpha/2}\\ \\sigma_{\\widetilde{f(Y)}}\\; .\\]\nUgh. Lets break this apart using an example. Let’s say what we are interested in is the sample mean. Then \\(\\widetilde{f(Y)} = \\bar Y\\) is just the sample mean. The quantile \\(z_{1-\\alpha/2}\\) depends on the desired accuracy. The default choice is \\(1-\\alpha=.95\\), so \\(1-\\alpha/2 = .975\\), and looking this up on the normal table \\(z_{.975}\\approx 1.96 \\approx 2\\). Finally, \\(\\sigma_{\\widetilde{f(Y)}}\\) is the standard error of the mean, so if the population standard deviation of \\(Y\\) is \\(\\sigma_Y\\) and the sample size is \\(N\\), then \\(\\sigma_{\\widetilde{f(Y)}} = \\sigma_Y/\\sqrt{N}\\). This gives us the slightly easier to look at: \\[\\bar Y \\pm 1.96 \\sigma_Y/\\sqrt{N} \\approx \\bar Y \\pm 2 \\sigma_Y/\\sqrt{N}\\ ;\\] Note that we are assuming that \\(\\sigma_Y\\) is known here. If we need to estimate it from the data, we need a slightly different formula given later."
  },
  {
    "objectID": "ConfidenceInterval.html#catching-fish-in-our-net",
    "href": "ConfidenceInterval.html#catching-fish-in-our-net",
    "title": "Confidence Intervals",
    "section": "Catching Fish in Our Net",
    "text": "Catching Fish in Our Net\nThere are two interpretations of confidence intervals (c.i.s): classical and Bayesian (although the latter are often called credibility intervals to distinguish them). As the Bayesian interpretation requires fewer assumptions, we will explore it first.\nIn the classical interpretation the c.i., the c.i. is like a net that is cast into the sea. It either will or will not catch the fish (the estimand). On average, the c.i. will catch the fish \\((1-\\alpha)\\)% of the time; this probability comes from the sampling. On a given time, we either will or will not have the fish in the net, but if we through it out many times, we will catch the fish \\((1-\\alpha)\\)% of the time."
  },
  {
    "objectID": "ConfidenceInterval.html#random-points",
    "href": "ConfidenceInterval.html#random-points",
    "title": "Confidence Intervals",
    "section": "Random Points",
    "text": "Random Points\nSelect the number of repetitions (how many times we through the net), the sample size (the size of the net) as well as the parameters of the population.\nYou may need to press the regenerate button to get the graph to have the right symbols.\n#| standalone: true\n#| viewerHeight: 1750\nlibrary(shiny)\n\nrpointnotes &lt;- \"\"\nrintnotes &lt;-\"\"\n\n\nZ &lt;- rnorm(100)\np1 &lt;- floor(abs(Z)) +1\nui &lt;- fluidPage(\ninputPanel(\n    selectInput(\"M\", label = \"Number of Repetitions:\",\n                choices = c(50, 100, 200), selected = 100),\n    selectInput(\"N\", label = \"Sample Size:\",\n                choices = c(1,5,10,25,50,100), selected = 1),\n    sliderInput(\"my\", label = \"Mean of Y:\",\n              min=0, max=100, value=50, step=1),\n    sliderInput(\"sy\", label = \"Standard Deviation of Y:\",\n              min = 0.2, max = 25, value = 10, step = 0.1),\n    actionButton(\"go\",label=\"(Re)Generate\")),\nmainPanel(\n  plotOutput(\"plot\"),\n  fluidRow(textOutput(\"sem\")),\n  fluidRow(textOutput(\"text1\")),\n  fluidRow(textOutput(\"text2\")),\n  fluidRow(textOutput(\"text3\")),\n  tags$ul(\n    tags$li(\"Approximaly 2/3 of the data points should be within 1 SE of the mean (plotted as circles)\"),\n    tags$li(\"* Approximately 95 percent of the data points should be within 1 SE of the mean (circles and triangles).\"),\n    tags$li(\"Approximately 5 percent of the data points should be 2 SEs or more away from the mean (plotted at diamonds).\")),\n  p(\"Note that changing the mean and sd of the population only changes the scales on the graph, not the structure of the problem.\"),\n  h2(\"Random Intervals\"),\n  p(\"Taking the sample mean and going plus or minus two standard errors produces a confidence interval.\"),\n  markdown(\"Actually, the two standard error rule is based on looking up the .975 (1-.05/2) point on the [normal table](NormalCalculator.Rmd).  We could put other values in there as well (50%, 75%, 90% and 99% are common choices).  This will adjust the length of the slider.\"),\n  sliderInput(\"alpha\",\"Confidence\",\n                       min=0,max=1,value=.95,step=.01),\n  plotOutput(\"plotI\"))\n)\n\nserver &lt;- function (input,output) {\n\n  dataSet &lt;- reactiveValues(Z=Z,sem=10,\n                             pch=ifelse(p1 &gt;2, 5, p1), \n                         M=100,\n                 my=50,sy=10)\n  \n  observeEvent(input$go,{\n      M &lt;- as.numeric(input$M)\n      dataSet$Z &lt;- rnorm(M)\n      sy &lt;- as.numeric(input$sy)\n      dataSet$sem &lt;- sy / sqrt(as.numeric(input$N))\n      p1 &lt;-floor(abs(dataSet$Z)) + 1\n      dataSet$pch &lt;- ifelse(p1 &gt; 2, 5, p1)\n      my &lt;- as.numeric(input$my)\n  })\n\n  output$plot &lt;- renderPlot({\n      sem &lt;- dataSet$sem\n      my &lt;- dataSet$my\n      sy &lt;- dataSet$sy\n      X &lt;- dataSet$Z * sem + my\n      M &lt;- length(X)\n      curve(\n        dnorm(x, my, sem),\n        xlim = c(my - 3.5 * sy, \n                 my + 3.5 * sy),\n        ylab = \"density\",\n        xlab = \"Sample Mean\"\n      )\n      abline(v = my)\n      abline(h = 0)\n      text(my + .25 * sem, .02, expression(mu[Y]))\n      abline(v = my - 2 * sem)\n      text(my - 2 * sem + .25 * sem, 0.0025, \"-2SE\")\n      abline(v = my - sem)\n      text(my - sem + .25 * sem, 0.005,\"-1SE\")\n      abline(v = my + sem)\n      text(my + sem + .25 * sem, 0.005, \"+1SE\")\n      abline(v = my + 2 * sem)\n      text(my + 2 * sem + .25 * sy, 0.0025, \"2SE\")\n      points(X, rep(0, M), pch = dataSet$pch)\n    })\n   output$sem &lt;- renderText({\n     sem &lt;- dataSet$sem\n      paste(\n        \"Standard Error = \",\n        round(sem, 3),\".\")})\n   output$text1 &lt;- renderText({\n     pch &lt;- dataSet$pch\n     paste(sum(pch == 1),\n        \"Estimates less than 1 SE from mean;\")\n    })\n   output$text2 &lt;- renderText({\n     pch &lt;- dataSet$pch\n     paste(sum(pch == 2),\n        \"Estimates between 1 and 2 SE from mean;\")\n    })\n   output$text3 &lt;- renderText({\n     pch &lt;- dataSet$pch\n     paste(sum(pch == 5),\n        \"Estimates more than 2 SE from mean.\")\n   })\n   output$plotI &lt;- renderPlot({\n      sem &lt;- dataSet$sem\n      my &lt;- dataSet$my\n      X &lt;- dataSet$Z * sem + my\n      M &lt;- length(X)\n      i &lt;- 1:M\n      alpha &lt;- (1-as.numeric(input$alpha))/2\n      X.low &lt;- X +qnorm(alpha)*sem\n      X.high &lt;- X + qnorm(1-alpha)*sem\n      pch1 &lt;- ifelse(X.low &lt;= my & my &lt;= X.high,1,5)\n      plot(c(my-3.5*sem,my+3.5*sem),c(0,M+1),\n             ylab=\"Trial\",xlab=\"Sample Mean\",\n           main=paste(100*(1-2*alpha),\"% Confidence Intervals\"), type=\"n\")\n      points(X,i,pch=pch1)\n      segments(X.low,i,X.high,i,lty=pch1,\n               col=ifelse(pch1==5,1,5))\n      abline(v = my)\n    })\n\n\n\n}\nshinyApp(ui=ui,server=server)\nThe number of confidence intervals that don’t overlap the target line should be around \\(\\alpha\\) (the number in the slider) of the total number of intervals.\n\nThis graph and the random points above are based on the same data. For the 95% interval; the data points where the intervals don’t cross correspond to the data points outside of the 95% region."
  },
  {
    "objectID": "ConfidenceInterval.html#interpreting-confidence-intervals",
    "href": "ConfidenceInterval.html#interpreting-confidence-intervals",
    "title": "Confidence Intervals",
    "section": "Interpreting Confidence Intervals",
    "text": "Interpreting Confidence Intervals\nThe number \\(\\alpha\\), most often 95%, is known as the level of the confidence interval. The level is interpreted as a probability, but there are two schools of thought for interpreting it.\n\nClassical Approach\nThe classical statistical paradigm regards the population mean as a fixed but unknown quantity. The true value is either in or not in the interval, we don’t know which.\nRandom variability comes from the sampling, therefore the 95% comes from imagining different worlds in which we repeated the same sampling and analysis over and over again. 95% of the time, our net (the interval) will catch the fish.\nIn the classical paradigm, we can’t say that their is a 95% chance that the fish is in the net, as we can’t express the position of the fish as a probability: only the position of the net.\n\n\nBayesian Approach\nThe Bayesian paradigm makes the position of the fish a random variable. To do that, however, it needs an additional assumption: a probability distribution for the initial position of the fish.\nFor simplicity, assume that all positions of the fish are [equally likely]1. Using that assumption and Bayes’s Theorem, calculate the posterior probability of the fish (after observing the data). The interval that is constructed is called a credibility interval. There is a 95% chance that the fish is in the credibility interval (at least if the model, both the prior assumption and the normal distribution of the data is correct).\n\n\nWhich approach is better\nActually, most people want both interpretations to hold. They want a proceedure that catches the fish 95% of the time and they want the fish to be in the net 95% of the time.\nFortunately, when we use the approximation that all positions of the fish are equally likely, the two intervals are the same. The abbreviation c.i. could stand for either confidence or credibility interval.\nThe Bayesian interpretation relies on an additional assumption, but both intervals rely on assumptions about the distribution of the observed data. In particular, in this example, we are using the normal distribution to calculate the intervals. That means that the distribution must be close enough to normal that by the central limit theorem, it is reasonable to think that the mean is approximately normally distributed.\nBoth c.i.s break down if the there is a problem with the sample. If this was a convenience sample and not a random one, the normal distribution around the population mean might not be at all right. The c.i. only talks about random error and not bias."
  },
  {
    "objectID": "ConfidenceInterval.html#footnotes",
    "href": "ConfidenceInterval.html#footnotes",
    "title": "Confidence Intervals",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe equally likely assumption is actually a bit nonsensical as we probably expect the fish to in the middle of the pond and not out past the orbit of Pluto. However, if we have enough data, the assumption will not play a big role in our estimate.↩︎"
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Untitled.html#r-markdown",
    "href": "Untitled.html#r-markdown",
    "title": "Test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Untitled.html#including-plots",
    "href": "Untitled.html#including-plots",
    "title": "Test",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "CorrelationOutliers.html",
    "href": "CorrelationOutliers.html",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "The correlation coefficient is a measure of how closely (linearly) associated two variables are. It ranges from 1 (perfect positive relationship), to -1 (perfect negative relationship). At correlation zero there is no linear relationship between the variables. [It is possible for there to be a nonlinear, i.e., curved, relationship between the two variables and still have a zero correlation.]\nThe equation for the correlation coefficient is: \\[ \\rho_{XY} = \\frac{{\\rm Cov}(X,Y)}{\\sqrt{{\\rm Var}(X){\\rm Var}(Y)}} \\] The sample form is \\[ r_{XY} = \\frac{\\left(\\sum_{i=1}^N (X_i-\\bar X)(Y_i -\\bar Y) \\right)/(N-1)}{s_X s_Y}\\] The covariance (on the top of the previous formula is very much like the formula for the variance, except it uses the sum of the cross products instead of the sum of squares.\nBut what does an outlier do?\n\n\nThe data set below has \\(N\\) data points. The sliders are hooked up to the first one (which is plotted in red). The rest are generated from a normal distribution with mean 0 and standard deviation 1. They are uncorrelated, but there often will be a small correlation because of sampling variability.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Sample Size:\",\n              choices = c(10, 25, 50, 100, 250, 500), selected = 25),\n  sliderInput(\"x1\", label = \"X-coordinate of point 1:\",\n              min = -5, max = 5, value = 0, step = 0.05),\n  sliderInput(\"y1\", label = \"Y-coordinate of point 1:\",\n              min = -5, max = 5, value = 0, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"scatterplot\")))\n\nserver &lt;- function (input,output) {\n  output$scatterplot &lt;- renderPlot({\n  N &lt;- as.numeric(input$N)\n  X &lt;- c(0,rnorm(N-1))\n  Y &lt;- c(0,rnorm(N-1))\n  pch &lt;- c(19,rep(1,N-1))\n  pcol &lt;- c(\"red\",rep(\"gray\",N-1))\n  X[1] &lt;- input$x1\n  Y[1] &lt;- input$y1\n  plot(X,Y,xlim=c(-5,5),ylim=c(-5,5),pch=pch,col=pcol,\n       main=paste(\"Correlation = \",round(cor(X,Y),3)),\n       sub=paste(\"Correlation without point 1 = \",round(cor(X[-1],Y[-1]),3)))\n  abline(a=0,b=cor(X,Y),col=\"blue\")\n},width=288,height=288)\n}\nshinyApp(ui=ui,server=server)\n\n\nSet the \\(X\\) value for the red point to zero. Now move the \\(Y\\) value up and down. How sensitive is the correlation to changes in the \\(Y\\) value with \\(X=\\bar X\\)?\n\n\n\nNow set \\(X\\) to a high value (away from the mean at 0). Again move \\(Y\\) up and down, what happens to the line? Set \\(X\\) to a low value and try again.\nValues which are outliers in the \\(X\\) variable (or in the case of multiple regression, one or more of the \\(X\\) variables) are known as leverage points or influential points.\n\n\n\nNow try changing the sample size in the dialogues at the top of the page. Note that you will need to tweak one of the sliders for the graph to redraw at the new sample size. Is the correlation more or less sensitive at low sample sizes? At high sample sizes?\nAt the low sample size, set the first data point somewhere close to \\((0,0)\\). It should have little effect on the correlation. Now change the seed (and tweak the point). What happens to the correlation with a new sample? Try that again! Now try it with higher sample sizes.\n\n\n\nThere are four reasons that there might be an outlier in a data set:\n\nSomething went wrong in the data entry. Somebody left our a decimal point, or hit an extra key on the keyboard. Or maybe a number got put in the wrong column, so the subject’s shoe size was entered in place of the subject’s IQ.\nSomething went wrong in the data collection. I had a friend who used to hook research subjects up to the Vitalog monitoring pack. It included a probe for body temperature. Sometimes the probe would read 72 degrees F (room temperature) instead of 98 degrees F (body temperature). They called this “probe slippage.”\nThere is a person in the sample who really doesn’t belong there. For example, the teacher took the test along with the students, and somehow the teacher’s answers were mixed in with th student answers.\nThere is a member of population that is just a little bit different. Maybe they belong to a rare subpopulation.\n\nIf the experimenters took good records, problems of Type 1 can be corrected (also, problems of Type 3 clearly identified). If not, it may still be possible to identify that the value is clearly out of range and needs to be eliminated (for example, an SAT score of 0, when the minimum SAT score is 200). The same thing is true for errors of Type 2. When the value is clearly out of range that is the best solution, although you need to be careful that the missingness is not related to what is being studied (for example, patients dropping out of a drug trial because of the side effects).\nIn the absence of good records Type 3 and Type 4 outliers are hard to distinguish. Often what we want to do is to take the data point out and run the analysis again. Then we can compare the two correlation coefficients. If the difference is small, no problem. If the difference is big, we can report that we have an influential point and let the reader come to his or her own conclusion."
  },
  {
    "objectID": "CorrelationOutliers.html#the-effect-of-outliers.",
    "href": "CorrelationOutliers.html#the-effect-of-outliers.",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "The data set below has \\(N\\) data points. The sliders are hooked up to the first one (which is plotted in red). The rest are generated from a normal distribution with mean 0 and standard deviation 1. They are uncorrelated, but there often will be a small correlation because of sampling variability.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Sample Size:\",\n              choices = c(10, 25, 50, 100, 250, 500), selected = 25),\n  sliderInput(\"x1\", label = \"X-coordinate of point 1:\",\n              min = -5, max = 5, value = 0, step = 0.05),\n  sliderInput(\"y1\", label = \"Y-coordinate of point 1:\",\n              min = -5, max = 5, value = 0, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"scatterplot\")))\n\nserver &lt;- function (input,output) {\n  output$scatterplot &lt;- renderPlot({\n  N &lt;- as.numeric(input$N)\n  X &lt;- c(0,rnorm(N-1))\n  Y &lt;- c(0,rnorm(N-1))\n  pch &lt;- c(19,rep(1,N-1))\n  pcol &lt;- c(\"red\",rep(\"gray\",N-1))\n  X[1] &lt;- input$x1\n  Y[1] &lt;- input$y1\n  plot(X,Y,xlim=c(-5,5),ylim=c(-5,5),pch=pch,col=pcol,\n       main=paste(\"Correlation = \",round(cor(X,Y),3)),\n       sub=paste(\"Correlation without point 1 = \",round(cor(X[-1],Y[-1]),3)))\n  abline(a=0,b=cor(X,Y),col=\"blue\")\n},width=288,height=288)\n}\nshinyApp(ui=ui,server=server)\n\n\nSet the \\(X\\) value for the red point to zero. Now move the \\(Y\\) value up and down. How sensitive is the correlation to changes in the \\(Y\\) value with \\(X=\\bar X\\)?\n\n\n\nNow set \\(X\\) to a high value (away from the mean at 0). Again move \\(Y\\) up and down, what happens to the line? Set \\(X\\) to a low value and try again.\nValues which are outliers in the \\(X\\) variable (or in the case of multiple regression, one or more of the \\(X\\) variables) are known as leverage points or influential points.\n\n\n\nNow try changing the sample size in the dialogues at the top of the page. Note that you will need to tweak one of the sliders for the graph to redraw at the new sample size. Is the correlation more or less sensitive at low sample sizes? At high sample sizes?\nAt the low sample size, set the first data point somewhere close to \\((0,0)\\). It should have little effect on the correlation. Now change the seed (and tweak the point). What happens to the correlation with a new sample? Try that again! Now try it with higher sample sizes.\n\n\n\nThere are four reasons that there might be an outlier in a data set:\n\nSomething went wrong in the data entry. Somebody left our a decimal point, or hit an extra key on the keyboard. Or maybe a number got put in the wrong column, so the subject’s shoe size was entered in place of the subject’s IQ.\nSomething went wrong in the data collection. I had a friend who used to hook research subjects up to the Vitalog monitoring pack. It included a probe for body temperature. Sometimes the probe would read 72 degrees F (room temperature) instead of 98 degrees F (body temperature). They called this “probe slippage.”\nThere is a person in the sample who really doesn’t belong there. For example, the teacher took the test along with the students, and somehow the teacher’s answers were mixed in with th student answers.\nThere is a member of population that is just a little bit different. Maybe they belong to a rare subpopulation.\n\nIf the experimenters took good records, problems of Type 1 can be corrected (also, problems of Type 3 clearly identified). If not, it may still be possible to identify that the value is clearly out of range and needs to be eliminated (for example, an SAT score of 0, when the minimum SAT score is 200). The same thing is true for errors of Type 2. When the value is clearly out of range that is the best solution, although you need to be careful that the missingness is not related to what is being studied (for example, patients dropping out of a drug trial because of the side effects).\nIn the absence of good records Type 3 and Type 4 outliers are hard to distinguish. Often what we want to do is to take the data point out and run the analysis again. Then we can compare the two correlation coefficients. If the difference is small, no problem. If the difference is big, we can report that we have an influential point and let the reader come to his or her own conclusion."
  },
  {
    "objectID": "RegressionPrediction.html",
    "href": "RegressionPrediction.html",
    "title": "Regression Prediction Error",
    "section": "",
    "text": "We will work with an example data set from Ezekiel (1930) which provides information about the speed of a number of cars and the stopping distance in feet.\n\nhelp(cars)\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nLets take a quick look at these data.\n\nplot(dist~speed,data=cars,xlab=\"Speed (mph)\", ylab=\"Stopping Distance (ft)\")\nabline(lm(dist~speed,data=cars))\nlines(lowess(cars),col=2,lty=2)\n\n\n\n\n\n\n\n\nThe solid black line is the least squares regression line, or basic model.\nThe dashed red line is a lowess curve fit to the same date.\n\nThere may be a little bit of a curve here, but it is hard to see.\n\nWe will go ahead and fit a regression using least squares. (This the the lm or linear model function in R.)\n\ncars.fit &lt;- lm (dist~speed,data=cars)\nprint(cars.fit)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nCoefficients:\n(Intercept)        speed  \n    -17.579        3.932  \n\n\nThe method of least squares or maximum likelihood (which in the case of simple regression are the same) finds the single best fitting line.\n\nLeast Squares means the line has the smallest some of squared residuals.\nMaximum Likelihood means that these are the parameters (slope and intercept) that have the highest probability of generating the target data."
  },
  {
    "objectID": "RegressionPrediction.html#the-cars-data-set",
    "href": "RegressionPrediction.html#the-cars-data-set",
    "title": "Regression Prediction Error",
    "section": "",
    "text": "We will work with an example data set from Ezekiel (1930) which provides information about the speed of a number of cars and the stopping distance in feet.\n\nhelp(cars)\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nLets take a quick look at these data.\n\nplot(dist~speed,data=cars,xlab=\"Speed (mph)\", ylab=\"Stopping Distance (ft)\")\nabline(lm(dist~speed,data=cars))\nlines(lowess(cars),col=2,lty=2)\n\n\n\n\n\n\n\n\nThe solid black line is the least squares regression line, or basic model.\nThe dashed red line is a lowess curve fit to the same date.\n\nThere may be a little bit of a curve here, but it is hard to see.\n\nWe will go ahead and fit a regression using least squares. (This the the lm or linear model function in R.)\n\ncars.fit &lt;- lm (dist~speed,data=cars)\nprint(cars.fit)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nCoefficients:\n(Intercept)        speed  \n    -17.579        3.932  \n\n\nThe method of least squares or maximum likelihood (which in the case of simple regression are the same) finds the single best fitting line.\n\nLeast Squares means the line has the smallest some of squared residuals.\nMaximum Likelihood means that these are the parameters (slope and intercept) that have the highest probability of generating the target data."
  },
  {
    "objectID": "RegressionPrediction.html#lots-of-different-regression-lines",
    "href": "RegressionPrediction.html#lots-of-different-regression-lines",
    "title": "Regression Prediction Error",
    "section": "Lots of different regression lines",
    "text": "Lots of different regression lines\nI’ll try the regression using a different method (Markov Chain Monte Carlo, or MCMC). In this method we sample 4000 different plausible sets of parameters that could have given rise to the data. (These are sampled with a probability proportional to how likely they are to have generated the observed data).\nThe printed summary shows the median of the 4000 samples. It should be close to, but not exactly the same as, the least squares/maximum likelihood estimate.\n\n#library(rstanarm)  ## Called above\ncars.mcmc &lt;- stan_glm(dist~speed,data=cars,refresh=0)\ncars.coef &lt;- as.matrix(cars.mcmc$stanfit)\nprint(cars.mcmc)\n\nstan_glm\n family:       gaussian [identity]\n formula:      dist ~ speed\n observations: 50\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) -17.4    6.9 \nspeed         3.9    0.4 \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 15.6    1.6  \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg"
  },
  {
    "objectID": "RegressionPrediction.html#mean-confidence-interval",
    "href": "RegressionPrediction.html#mean-confidence-interval",
    "title": "Regression Prediction Error",
    "section": "Mean Confidence Interval",
    "text": "Mean Confidence Interval\nThe MCMC approach is useful because it helps us remember that the estimates that are produced by the [least squares] regression are not the truth, but rather just the most likely set of parameters. There are other possibilities that are nearly as likely.\nThe next graph is designed to show this.\nThe first N (you can adjust using the slider) samples from the MCMC are plotted as gray lines.\nThe least squares line is plotted in black.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"alpha\", label = \"Confidence Level:\",\n              choices = c(50, 68, 90, 95, 99), selected = 95),\n  sliderInput(\"N\", label = \"Number of plausible values to plot\",\n              min = 5, max = 50, value = 10, step = 1)\n),\nmainPanel(\n  plotOutput(\"plot\")))\n\ncars.fit &lt;- lm (dist~speed,data=cars)\ncars.coef &lt;- structure(c(-12.5583261755911, -7.30066479179929, -14.4746132971847, \n-14.5535835166987, -14.1788274110973, -22.1721276182914, -19.8006445660316, \n-20.4753432333008, -16.7222714447846, -17.090105717384, -21.9466106373712, \n-25.4339667539334, -9.74891228594344, -24.714697522857, -11.9338496371867, \n-19.5374107871958, -24.5536656160164, -19.8413664484963, -18.9517077711225, \n-18.109811882231, -22.6665146085621, -18.3716454860144, -13.4491514294861, \n-8.51880497285192, -20.9686590565102, -6.53814380414482, -29.5211773908664, \n-4.8994831330496, -29.1196232712897, -21.0620929509787, -29.4622784627611, \n-17.7624025694567, -20.0974542621275, -14.3132248110125, -16.9205322657307, \n-13.0890290441573, -19.6444617768275, -18.3752091119778, -24.0533097683637, \n-27.670182366283, -14.0653668192962, -13.8648257286199, -16.6794323854189, \n-18.0223520005958, -22.8017509667602, -17.5586222114782, -19.8723984089931, \n-20.3165123885508, -14.941727121677, -11.3057410313366, -24.4247186852162, \n-19.7368265685173, -13.6140900323235, -16.9177783213192, -18.1995868654361, \n-9.65435100934292, -2.95628110163577, -24.8451889077706, -12.139285849464, \n-21.4649479669867, -21.6563265462896, -31.3051341675586, -20.979465853718, \n-20.1323407769713, -22.5232028320157, -22.794310006242, -17.9286968927744, \n-16.9526570564386, -9.77668209529275, -22.8290423481347, -12.8243874938363, \n-22.0810502241011, -20.0017848183742, -17.0965818209127, -13.5171130600015, \n-13.9856851443602, -19.1320475507131, -13.1637214785489, -24.4355618573601, \n-11.7077843399828, -22.5630584415731, -23.21564697445, -23.5845754160633, \n-22.9461470742958, -16.3611902869752, -15.6815371345544, -21.4455810924933, \n-23.0591324648858, -14.1958224033129, -10.3793400553921, -26.6424068664644, \n-14.0475407702428, -13.3582298008251, -17.0455862876026, -14.3017732376332, \n-12.7195465316294, -14.3546335621289, -19.8478027618541, -16.1701143428717, \n-17.6969070536386, -24.0956194863045, -27.0638428620783, -12.9306950755851, \n-10.2531679111396, -12.5512486505609, 3.43781504303778, -27.5147477903575, \n-6.92393591060249, -25.0354326870632, -10.5485717754198, -30.9636913254487, \n-12.2434922010711, -8.63972308510388, -9.07627620938442, -6.14572227715744, \n-9.83489827339756, -10.4570328758087, -24.8086683198089, -15.0806384930093, \n-14.8042295572354, -23.4633765188228, -25.5153843515379, -19.7151256579306, \n-24.6636763118796, -28.1212026574387, -26.5506469628291, -16.1245734610998, \n-14.8833512818514, -19.7115301135685, -17.6142811706194, -17.2347746609179, \n-9.23359869246553, -12.2425150202198, -21.6010554072238, -13.9093859255031, \n-22.450016500744, -11.8575841255702, -9.07826300177967, -21.8887868007938, \n-16.7079949330613, -26.2683853309661, -9.09604971809094, -3.25797876478477, \n4.01103073093545, 3.33946186318008, -24.1967844221245, -13.4651016183492, \n-27.7930043695484, -24.2822820275687, -7.66936320898262, -31.395857360547, \n-27.3390049762052, -5.95370546415275, -17.2992129783564, -19.9193197010788, \n-15.0649770460282, -4.82737644169187, -16.5550592698665, -24.193438566374, \n-16.2016370785686, -7.76679926694483, -26.2265134881106, -16.8422037847478, \n-16.3053864910158, -22.7961809965969, -19.7333961124555, -20.4749406434526, \n-24.8762131853282, -11.5766842225363, -21.0325178981896, -25.0656984010105, \n-17.5884251577606, -18.0289373204196, -11.2396896215001, -13.8510229770191, \n-26.0180948263125, -26.3274482393351, -23.9917817272089, -16.0331797870293, \n-23.068178750804, -8.99531162339795, -26.0797931109975, -9.19863042369324, \n-23.3300608044795, -23.8871602842187, -20.0199809045418, -17.4775044070944, \n-19.7541747403321, -12.3729197399415, -19.5663324301585, -12.9326923011285, \n-21.8939615275731, -16.4268678900186, -14.1110525755103, -22.8718693208464, \n-16.5366554790325, -18.6930301144728, -17.2269171640818, -25.4051483798449, \n-21.5138122815274, -22.1529825296362, -19.8050674781232, -12.9476642588459, \n-34.5349047123913, -37.9390310658564, -37.4322500800864, -23.978871339383, \n-14.5277205065066, -24.3793669535425, -14.2648105066253, -20.3621281633239, \n-10.7715035829167, -16.1413578180081, -17.040401863273, -12.6979909495801, \n-10.7084341234612, -13.7850131552094, -9.65259380172455, -10.9150873620624, \n-18.3609428273736, -13.8515214480851, -20.5620270990397, -17.8771760613489, \n-15.1562659569032, -19.5907211463929, -4.46302527452606, -30.0188735876916, \n-18.4014511103674, -19.9717376730197, 8.14736393778953, 6.32464176173638, \n-1.28011743838464, -15.506265176473, -19.5347581026612, -14.583936518005, \n-20.0145104227491, -20.5962849947536, -17.998720530473, -10.8625658561229, \n-9.95497420346423, -13.6018883567545, -8.89628816662432, -12.9853042935305, \n-21.7370629321219, -13.3659259485846, -13.251249586164, -13.6293515016981, \n-16.2176010539714, -18.692201377717, -16.5533424610401, -17.6249984933046, \n-20.492748407454, -15.9851450319208, -25.270324910176, -27.3712685301498, \n-9.45819115335626, -25.0026063997337, -24.7149398293016, -12.5668288339502, \n-4.39682178759181, -22.3965296755109, -6.86918826270457, -16.4037513254271, \n-14.3177738519724, -25.3726426756924, -26.6334857507968, -11.1609153637412, \n-24.8032987922325, -16.8616339459039, -15.1796464204999, -23.5536732134806, \n-24.2694644450731, -24.8019706926221, -12.594535256605, -15.7149394558279, \n-24.8384271660053, -19.326129879358, -3.10278635557793, -31.2604124513974, \n-2.45076814976666, -29.0228519676794, -24.2805228205219, -13.9421484761262, \n-15.8058462567124, -17.0969500969151, -20.1457954177736, -14.3843127756668, \n-20.6593405739812, -15.8132930431792, -19.888625374037, -19.0176630612102, \n-16.0279706153553, -20.4105996982831, -26.6556394349545, -12.1602391536284, \n-21.2558314553555, -14.9615606755409, -15.3266911433153, -19.8709305245742, \n-15.7658239458724, -18.5281337962094, -18.2300443696253, -18.3974833053107, \n-14.9979420817362, -21.7475954343278, -12.5752923905206, -29.3858914025546, \n-26.9768437397118, -29.6879239489741, -23.8594048422539, -20.2722710752527, \n-12.9528832516326, -21.2215513119566, -19.9883648664809, -13.5828773376425, \n-17.5784395408053, -18.3833230090556, -16.2715492406277, -12.407110847435, \n-4.24592301323617, -16.8984619477628, -20.8858807375889, -21.5268094134014, \n-22.0797020533369, -14.7087311367603, -8.02159020089258, -18.6597071090822, \n-14.4984306889444, -6.87324962429701, -14.8977322594449, -13.0888526923259, \n-20.1948777908859, -18.7800222747962, -18.8181048352169, -9.50031254648675, \n-26.0310539181733, -7.04150762263163, -11.464130367081, -12.9130269524475, \n-21.6567067770576, -14.9566018381047, -17.4295122276748, -17.3363333194355, \n-16.3667846532638, -23.8074508203078, -21.9018460516441, -14.0179060399513, \n-18.3869600132371, -8.62338168430102, -24.5537012435362, -30.7044610794678, \n-15.6834110611933, -22.987911372909, -16.4730665095853, -13.3776038548835, \n-25.9698897261135, -13.4398221303179, -5.00498362113114, -18.1190756714864, \n-16.0222682259805, -19.7089221282246, -20.8233861629913, -19.7334661044348, \n-21.2448617228943, -17.5847677280898, -13.7583604074804, -17.6880143718917, \n-20.497039734913, -21.8466564827193, -11.6666605213516, -20.490970971431, \n-20.1362092941958, -21.4100205460454, -17.2491612133028, -5.87682691180857, \n-6.83388609618939, -30.0844691758815, -9.02148577905125, -12.9475332269886, \n-14.8458078944289, -29.701615219602, -20.5233387778185, -13.7265303216926, \n-16.1512416008299, -6.98505301317029, -7.72469211816612, -16.3984261832672, \n-21.2130297620726, -19.9741595357729, -16.3648700374302, -15.7831188024971, \n-19.4477540748592, -12.2565911520004, -24.0460682362911, -27.2165696384358, \n-21.1873571892438, -19.338061252461, -10.4995395092581, -13.1940155451165, \n-12.2860391729817, -27.0384469337553, -14.0326411441721, -17.6457097757372, \n-6.81475601120093, -5.1315676683848, -32.5448708982447, -25.3148281009837, \n-6.15162334473289, -10.9083883673467, -24.4872733865414, -9.71925803396135, \n-20.6588918832855, -15.5072292479462, -22.3000159524017, -27.3716368165807, \n-5.73058584262801, -9.6539377587149, -26.0226733230597, -19.481989801694, \n-7.58983701013058, -9.69386745234365, -21.751625740407, -19.8558544433994, \n-19.8558544433994, -16.4885549481092, -17.6377077545902, -7.78643888936727, \n-24.2448836927852, -15.1797920878469, -12.3610437519375, -6.15084137275396, \n-32.0235853305755, -4.47928880595785, -28.8440622592768, -22.8235285601092, \n-14.8962097348147, -22.9076181607242, -25.8203390771852, -8.39556830150818, \n-22.3943225652933, -30.7261853920149, -23.243488924321, -14.9480472960135, \n-19.1289310826654, -19.0341821793733, -15.3300969966795, -16.2719027831302, \n-19.1641107035241, -12.3128452675534, -22.239921374698, -6.07329552675463, \n-9.20925191211371, -11.6822842445341, -15.8235065147606, -18.1293606274187, \n-20.9633102183482, -15.8853129332646, -18.372775645546, -15.625313080301, \n-23.3781440705856, -31.2115424710077, -23.3623415699612, -14.8439076000997, \n-21.8209632424569, -14.0659103271388, -18.9215600407485, -18.7027978398867, \n-16.5246586717557, -12.2398499166154, -23.4436399573395, -15.9586624262284, \n-16.2163414816549, -17.0259392489108, -10.4192890917027, -13.7502220067274, \n-32.3737188361161, -2.62430474297915, -35.2056757172708, -35.5098926573534, \n-26.0055201012562, -15.6731727654876, -16.7756115934671, -14.7688432766069, \n-18.2595474972124, -18.3686995626363, -31.7849657768034, -16.2905826349623, \n-19.5495844941024, -13.9421160634661, -21.5050615418986, -18.1193886217567, \n-21.1041448397415, -13.6943761376068, -22.1415871261803, -14.2469270976993, \n-14.4475894164768, -11.6711470529414, -22.9513898666636, -16.6711911746693, \n-24.4617460290505, -7.83566003833816, -21.8509021732998, -12.5661029720506, \n-8.23905098751008, -18.7008909992077, -17.4098640587133, -20.0686509897991, \n-21.4868700168284, -26.8440635028338, -17.273432974102, -16.1631155635827, \n-15.1562076351208, -17.2578773042933, -12.4135357848741, -24.1117504671794, \n-11.0060388689465, -22.8613141179716, -7.15531227967986, -21.0884379376392, \n-16.7028173091319, -18.7862565248992, -14.534637618787, -16.2605086549614, \n-18.012608040393, -26.6380845468899, -8.10623903985503, -16.0616709004968, \n-24.9267261258828, -7.49148379625077, -18.4919553952495, -10.8683948853076, \n-20.9253119963008, -9.66366284075369, -25.0851043059068, -15.5860364620728, \n-26.6234253801558, -27.5555268138434, -6.89351922882471, -12.4160560894284, \n-23.8051113234237, -14.404629899454, -16.7566918793329, -20.5908996705097, \n-13.9921409022336, -22.8119521331084, -26.8840022367843, -23.2498313334661, \n-19.7338936670318, -21.6981268329942, -19.1025521198053, -17.05070792715, \n-15.9380268011263, -27.3024795504036, -10.717286105937, -14.6653344068593, \n-24.992879905516, -11.0616294280924, -14.79231661931, -19.3990609156331, \n-16.8090026746094, -15.8364679994412, -22.4585508172843, -20.3148880217459, \n-24.4734986057003, -20.7562892404928, -11.975011714986, -23.768739594747, \n-14.9022752448214, -6.90381687922704, -10.4956413473804, -29.4315771567962, \n-6.38399238621745, -19.9511587857796, -22.2870331939162, -16.4906416860705, \n-24.1660400901125, -13.8014192789783, -4.48087989383777, -24.9308692493261, \n-22.5649723705096, -12.1478337260499, -28.5601011629216, -9.25653430410364, \n-9.69043480567795, -16.0681987519589, -27.0661174055902, -11.1907960548131, \n-18.5252115306154, -33.0705393081304, -4.6495070463107, -24.914311305568, \n-25.7968538414213, -18.9055957607954, -21.2210655832863, -22.6577191610515, \n-20.1879949350533, -22.0710319403597, -15.6669017756176, -7.10060937463977, \n-7.86341677965815, -22.7973076668396, -15.6230956021571, -8.4063676843824, \n-29.1525700248349, -26.0924217188369, -11.5353381767371, -5.64436880380207, \n-17.2495197112446, -13.8582463479547, -23.5760294177063, -20.3472820954804, \n-13.8319539349648, -25.2581916980769, -14.0518522530116, -20.3083078348306, \n-16.8720477644565, -20.6474574801413, -23.8023558967606, -27.5683149402069, \n-21.4189973909255, -27.6642486747758, -7.94493836016552, -28.0596855001679, \n-32.1758957282959, -2.84404338495108, -5.18458152265563, -17.5130218113077, \n-11.5246154831293, -13.4111310361356, -20.4109069941296, 1.48086220989492, \n-14.4221628195394, -21.4225703384222, -17.5499390743967, -28.3828406745516, \n-6.36811801578764, -19.4361811148656, -12.1078469483786, -27.0048119955703, \n-19.0800380212181, -14.5572845582588, -21.8243296780832, -6.43419363128235, \n-29.1723514625585, -22.597538642155, -15.4330178634456, -9.76287163859568, \n-25.9342910858352, -32.7464669460057, -7.05343097788686, -22.6350822574659, \n-10.5347027678017, -23.0147336008278, -23.3449268650643, -11.1661642138, \n-21.8798748578937, -14.04710293305, -13.6424141395485, -13.3257566414482, \n-22.994663124088, -21.4637711660115, -17.0070354269765, -10.9379036478881, \n-13.7432583116933, -21.3237831028922, -22.6028751308195, -21.6426544932939, \n-19.1587132450544, -19.8455075061156, -16.403382396883, -13.4501274141919, \n-13.9272221164133, -25.0444772937421, -9.04129597462056, -28.906212192575, \n-29.2354049993453, -10.9654506702786, -12.8722632414222, -3.2723942274705, \n-16.7913387324695, -17.9426473229657, -11.54538625939, -12.9385219008537, \n-18.2779981277006, -24.3439993233419, -27.1399815233796, -12.245289617231, \n-25.3524078486707, -15.7842832241477, -14.7144028472922, -21.3582834058824, \n-12.9737193807667, -13.3846999777271, -14.1401064841287, -15.0110720246027, \n-21.5243057549799, -12.2091359775922, -24.2595512584609, -25.8642950677425, \n-18.5301580821793, -18.5301580821793, -5.43776325657591, -25.8562033045866, \n-10.0396578164323, -20.0573406139218, -26.1420016683001, -18.7368300971128, \n-5.82095477006638, -6.19782114137386, -8.39207206995624, -28.98176946666, \n-1.39177581100597, -6.58311988669828, -16.0834122780219, -26.6402631246247, \n-24.7374714272573, -20.6669626931708, -8.5224665140936, -26.399936213798, \n-6.72977487805373, -10.407607356875, -21.3428547329778, -4.49313478323914, \n-23.9844447127343, -17.1539156972329, -23.9455008718638, -9.44678690373474, \n-10.3616094944829, -28.8217952053257, -23.0369569771605, -12.4149691336461, \n-23.3381052395314, -20.2499582776816, -20.1279645948173, -16.1300716234868, \n-16.266377970048, -16.3035124050213, -8.23617359656799, -13.6832019827739, \n-21.0946920687558, -13.8898043034786, -22.6148836672598, -15.989574106721, \n-17.6042542138372, -8.92710801967301, -25.8167404761871, -12.9931705426032, \n-15.4841438743127, -10.8216469510726, -29.198219427986, -22.2110597519532, \n-11.0493898199143, -18.816643344662, -15.4004231476987, -20.8251571338813, \n-13.1329522038927, -21.8443306846712, -20.0696461182787, -22.0123631867588, \n-7.13426199105518, -23.7803210038426, -2.51514906620693, -14.6275895415841, \n-6.63344655015343, -7.18204488226096, -6.77534452254769, -9.86851415160675, \n-29.4813272126611, -35.1308493243707, -7.75142294838826, -7.78372338895123, \n-12.7446616576786, -20.9711820056418, -20.7982161049416, -21.8808514598924, \n-15.3083312201352, -14.0860973110084, -24.5117220592078, -7.22956370457351, \n-8.73991375943621, -27.8964234413629, -15.8641603582963, -13.2378319548121, \n-30.3137341455264, -8.8006035380294, -15.8738915379291, -19.8471600033308, \n-4.42758849494042, -23.0098642534347, -11.5002644146555, -13.3072602640257, \n-13.3320697478982, -23.3518412505962, -12.37814836685, -22.3454521747468, \n-12.793245768357, -16.5142524376203, -17.935568168306, -1.24834285413426, \n-33.4001143925128, -3.33009060030312, -17.5959836243047, -15.5897838665371, \n-17.0054353563013, -9.0326267158689, -13.4187825353385, -12.551476236351, \n-28.0653854584058, -14.3400816415464, -20.6821928177906, -18.7827888958691, \n-15.7770751541156, -15.7770751541156, -18.7424585350024, -13.8442321649087, \n-17.1967658995428, -16.8723732133692, -22.6754561140693, -13.0567353025718, \n-18.8678030017968, -15.7569972614733, -15.1949072745245, -22.737506050229, \n-16.2285600786851, -11.7262880222816, -23.1871766920526, -17.7236021488678, \n-15.0936031221781, -20.667684783814, -21.2415617048037, -17.2531452065248, \n-18.6251226990037, -1.060576238355, -22.3550393303517, -10.0164282418385, \n-9.11668880204434, -25.8094667197687, -25.1144611399684, -19.171966798539, \n-23.1722861109903, -7.49692393978626, -10.8554488818412, -21.0088058344988, \n-13.4796801560784, -19.6564006467441, -10.8545285631315, -17.1433532219202, \n-17.0385298235198, -22.432415680298, -10.1271243730936, -19.0610944385265, \n-16.0770291930642, -19.4222659230463, -16.9729229868964, -3.9668865318235, \n-2.65459005299471, -7.75611963633493, -26.3208472819625, -21.3863371266385, \n-9.52250796993479, -10.2443395039363, -24.2435635713048, -27.2500535957364, \n-28.2849528105462, -24.8691840321146, -17.3445445442755, -18.7529613854753, \n-10.6262319504505, -18.8067212907531, -22.9355308806555, -12.3614118076015, \n-12.2387859820965, -4.7241726376234, -6.61282987966459, -15.6726413528759, \n-24.7909087243549, -10.9041800806164, -26.2526578206631, -24.2474327320661, \n-14.6049027002317, -22.3316484084919, -13.8652306905079, -10.6521348636592, \n-27.2745436943642, -30.3695012655183, -10.6973001949872, -20.3455735995381, \n-17.9960515254268, -10.5071699267602, -24.6197192472308, -21.990277897748, \n-16.0335472605771, -18.2461974968945, -16.6147319001511, -30.3937187023449, \n-18.299945486581, -14.9596013157159, -21.453955256708, -21.4981396554713, \n-15.4712266736743, -21.0458206239902, -12.1145017772839, -5.17451161787085, \n-8.29181816849309, -5.97819779506022, -12.5137123260877, -14.5175031237985, \n-1.53765909356304, -28.9317625687517, -38.1378821666788, -19.1457066595394, \n-16.7753016338092, -14.2404873049979, -15.2452859534293, -22.7413211613122, \n-20.5425566052001, -19.3104329374352, -20.5675775777111, -18.5279898664645, \n-11.5523119067618, -26.5898431262456, -24.5902460851663, -23.04627064586, \n-17.7046846970505, -22.8475712335671, -22.3287843313255, -13.1249876694009, \n-15.7883030331156, -17.4414780229159, -23.1520463957372, -26.8937965406004, \n-36.1371936936232, 7.45944822518975, -16.7826669962867, -19.6447912749087, \n-20.6719940621174, -19.6370671858056, -19.7048220703479, -18.131147616221, \n-16.0915168028307, -17.0096429647323, -14.2892204396399, -19.225883330787, \n-16.4813161966932, -15.4357039635123, -26.3113462576347, -29.6401769182373, \n-8.54052159486682, -11.9624798408878, -19.9803643348484, -20.8060339522432, \n-22.6699565367784, -19.3690592638883, -11.8744834440902, -13.4589278372099, \n-18.3392184510105, -14.6875390758583, -27.6818005048772, -9.21850405857258, \n-11.4019361959241, -15.096015523591, -18.1310046900074, -11.3096475373924, \n-21.2679178188024, -4.60254428848726, -0.894792783907825, -17.8298844657913, \n-18.6412675666378, -15.9113477067378, -18.8797072604753, -18.7825472677926, \n-22.6127734806299, -10.7794226691625, -19.9446871939608, -17.8882701372551, \n-32.4218603169453, -30.6343988129079, -6.6184802385206, -10.5995741105106, \n-14.121611437971, -19.4304871848324, -28.6695505568764, -7.89651048816042, \n-7.89651048816042, -24.4370344558966, -19.811453196406, -17.4946469774703, \n-21.6497045840849, -18.3392739982032, -16.904702045031, -12.4999883048429, \n-22.5070386397137, -13.9270714584149, -10.132411789326, -21.9023761519216, \n-16.5630568713888, -19.2095996100802, -17.670934750381, -11.5022107760326, \n-27.5019946455405, -17.2692772113643, -18.0010498232726, -15.4393471001126, \n-12.3919006520899, -27.6271116095587, -3.96693731463554, -28.2011086803921, \n-11.0654661001551, -15.471156039745, -6.55436704673852, -7.75140307258446, \n-8.9848491518111, -12.1691699103563, -19.9872851493917, -25.2888725367148, \n-7.16748170131449, -8.47736834321893, -26.2389071007042, -20.5205024839248, \n-17.3950620904192, -20.4178112017817, -16.619161002383, -8.30872228707362, \n-24.223665335635, -23.3676370966488, -15.9386924865931, -10.8514932343357, \n-19.7573552430023, -15.4378725991454, -19.5890238651555, -21.3157124626044, \n-27.4950457058339, -26.0368918626356, -2.47819516043442, -16.8236232798726, \n-21.6870354199777, -21.7073404746224, -15.16884595061, -17.8094930965178, \n-19.0591549936424, -8.99159431139933, -13.5161661271731, -20.1959924583215, \n-21.2251436392201, -10.8192290007999, -21.2961242727726, -10.6296959389376, \n-23.5459085837802, -18.2764455663415, -9.94729555617221, -19.4242314842459, \n-15.8494148917994, -18.9979246292043, -16.1765762420202, -23.6676051821527, \n-8.97860673193222, -29.8586583889128, -8.76832062097752, -22.5309677722602, \n-10.0393405385363, -25.5138567188033, -17.3489183997672, -15.1612362850401, \n-22.6681450583871, -15.2000290852241, -14.2489351910742, -17.0101023905122, \n-14.5125523930057, -9.24287470359571, -11.7015821639287, -11.2019980460614, \n-9.06452202005141, -7.40940627952305, -5.73835054848737, -6.92472044580155, \n-28.7992874331844, -23.1911696316325, -15.1508284750324, -14.2623362416133, \n-18.8487216844851, -12.260864061697, -19.1174652170741, -9.67157771803832, \n-4.71924149896187, -1.09667138338913, -23.9855684451297, -27.5273545720441, \n-26.5962335096195, -20.722215291485, -13.1459926931571, -16.8146420907788, \n-22.9174358378154, -12.4895834543925, -14.6977847874967, -20.3935992555609, \n-16.1534653612881, -10.818559818843, -24.1184170462572, -12.3465462466893, \n-17.0987698435567, -18.8828003517603, -20.5044707536278, -8.4889042525488, \n-7.18434639120509, -11.4675054015876, -14.017387759518, -21.2135509315093, \n-25.8872969975063, -7.87348816003454, -20.999956826525, -26.0135146245806, \n-14.4862571230962, -8.59851369147482, -7.72431406227829, -6.49767090911094, \n-25.1661494285859, -22.9440790495108, -19.4301935062041, -21.1139244227078, \n-21.8053630414969, -14.7082815093983, -17.7633858279267, -18.6797823716371, \n-11.5813558310045, -21.5748895232562, -26.8495768800737, -7.07063596305717, \n-3.04176046947602, 2.40095969550949, 2.29565620480424, -32.2176692331896, \n-0.340113703187065, -26.0507053386068, -21.9974438266781, -2.99603499737304, \n-13.8242992785684, -13.6281349433485, -28.0503450137432, -10.5836576532579, \n-12.7507981308036, -9.76616340088142, -16.613263933402, -14.3288778219815, \n-32.6153519307294, -3.46116535910485, -6.90604842436085, -8.73322650856987, \n-10.4003978677359, -12.3327423731586, -16.7084445584868, -3.45275115659577, \n-21.09362287357, -32.1272952202027, -18.5946412759914, -24.4090841148961, \n-15.5864620283677, -19.631229656025, -19.5930443679847, -13.7276887321949, \n-17.7028054718643, -21.1996375947236, -26.8333518360416, -7.75797039835897, \n-1.41086880871036, -12.6142681299895, -20.1139680877944, -19.245034204374, \n-13.5608323639099, -21.4297077561864, -25.7905667559762, -21.262064243705, \n-21.4044046811924, -20.4273435738058, -24.8873906192462, -21.2506948476928, \n-14.1554308965352, -20.2596189106497, -19.8771697043798, -20.7701666874872, \n-13.7830557508046, -18.5089143224084, -11.825236680197, -18.3234968962458, \n-18.2480050707924, -23.5429339538168, -15.2645885269351, -9.90386302280542, \n4.68913198906501, -2.98431053642112, -20.0202678796793, -14.9432835787643, \n-19.1328962137765, -14.5704435450419, -18.8374981615636, -17.6973369488067, \n-22.6513389326838, -15.5913900708603, -10.4084871435156, -23.726743856073, \n-25.0383458551771, -15.1719251892945, -10.1670570938518, -11.9889016174438, \n-21.9292340484873, -24.7790750866201, -9.04755378129922, -18.4909327396503, \n-25.7886490994235, -9.50738386657964, -22.9940426869839, -7.21462638342489, \n-22.8322922637377, -20.9147954998265, -14.2121751048649, -20.8515679401945, \n-23.410965918159, -22.1911090112745, -16.0386431644712, -20.1285694251774, \n-23.0905113984162, -2.57545486830175, -3.92649020493643, -30.1888407580609, \n-13.7238381207312, -19.3966276557864, -24.478992678206, -19.9974783382194, \n-16.3175437615538, -19.5467519951198, -24.3002360458713, -30.8194983659062, \n-30.5205290226672, -29.0419271745399, -27.6949293297682, -15.4233320457542, \n-23.9243581994229, -17.9187910137945, -16.0485111468469, -6.31491278389897, \n-7.79711530557982, 0.500876881005972, -19.255103512396, -18.4936377858069, \n-17.8893305649513, -13.8349008181164, -19.8661608669361, -31.9745994057471, \n-11.7030882860523, -22.5664872990685, -21.6992285922011, -10.963526166517, \n-22.8540591758015, -16.7913959276622, -15.891842657665, -14.4476564098076, \n-18.3498389865872, -13.9917891661454, -20.7104433613945, -28.7959645016501, \n-17.7836221714013, -28.3622383891749, -8.01957739735955, -26.2724490489481, \n-11.9489133717343, -17.6649551363275, -17.5744035630177, -16.8759514876862, \n-20.4547621216637, -25.5574977053907, -10.8475537326044, -11.3100757980214, \n-8.8315505647646, -19.8811320179926, -16.9189041928563, -12.6828904167254, \n-23.0581260394333, -12.2614672870341, -27.8393938567069, -29.9196905386181, \n-25.2575016801764, -18.6424838302743, -24.6342848273788, -19.2232407714249, \n-17.8962953155388, -23.8234527766661, -21.5963069313339, -42.7818882103293, \n-38.2003930900153, -30.1001988727008, -27.7919650326526, -28.894766207914, \n-28.5243870825367, -21.3691748787046, -5.88094263029035, -32.9278076429307, \n-34.6955206342813, -11.8672932644749, -17.0082531239578, -18.8719616539771, \n-20.0274148186051, -15.9113797360752, -11.0776226844921, -15.8956621825578, \n-18.6990045110929, -20.2547351794733, -13.2862473467313, -21.6589701561656, \n-12.421535588833, -12.8183399068973, -23.2546665583501, -9.09495290256273, \n-14.7266958604278, -19.6837710971407, -13.5079487060402, -14.6620079671471, \n-13.8433895647759, -11.7308250556278, -13.1461385123546, -14.2995581253357, \n-19.9747796214556, -7.49791712976572, -23.1199489125091, -17.5203324367351, \n-13.7738783892745, -25.2965730436148, -12.4190022197345, -22.5037708092367, \n-16.538338918161, -12.7149738120326, -12.5199139891808, -16.4647611031116, \n-24.3003634052106, -23.2853086847254, -13.5592916620686, -12.8417634485239, \n-21.4348723851366, -13.6795552533613, -21.5029118570463, -14.6981538980114, \n-15.1403896912199, -11.9273948170364, -21.7449963412224, -29.4587446411878, \n-18.941857929813, -21.7679981540402, -17.5259010492838, -29.6635867560108, \n-21.3193513085727, -8.06848655202516, -18.0150098618392, -14.7363375272708, \n-21.7542143101716, -15.4417192753518, -7.39121912987537, -7.2866297707798, \n-20.9120462484207, -9.86580768958037, -13.930855086151, -25.2418158477816, \n-21.7903556446751, -13.6220256008475, -18.2171962567459, -24.6385051268235, \n-13.5413783549033, -22.015286109613, -25.3473822340216, -28.433085754954, \n-29.7258148041462, -11.9609508065311, -18.7896899885458, -25.7443401309072, \n-23.1677070819609, -20.9458805192468, -8.06019790092157, -19.4390638287724, \n-17.8886122807654, -14.1922613594595, -20.7583882137134, -10.653647785127, \n-19.994692903341, -17.2936860590999, -21.6197996300662, -14.7161510398635, \n-18.4590988262952, -15.3546946524366, -16.2474849279541, -23.4285888345079, \n-18.8757091285787, -22.1911838712384, -21.9314906622574, -26.0802972510251, \n-22.7997026578416, -13.6177618515011, -23.7468882040313, -6.94321509635455, \n-0.483580525378969, -6.40496629734128, -3.78409873370236, -21.0962293317749, \n-14.8086043064033, -9.54223560731882, -28.1088927004475, -16.6388723331403, \n-23.2065222153457, -26.7627887935712, -11.7012373016818, -31.6030550721545, \n-14.5195108206288, -10.3007688947088, -16.4000133552606, -20.474844000948, \n-23.7932332099079, -21.8330620905785, -17.8552457490742, -22.235705265135, \n-20.7999277330401, -20.2172089415353, -25.3830276552578, -26.380765553332, \n-9.7288053560643, -13.593470414964, -22.4648542628982, -8.54272671935819, \n-12.5177311106242, -22.4183570473281, -27.8552217524168, -22.2142631238046, \n-25.3984997921775, -12.7207303340796, -22.7494962010577, -17.1042307628939, \n-2.98037428112534, -29.9209058604364, -31.7736016211165, -15.7844245183901, \n-15.4691587366289, -23.6653962083461, -13.5252870124461, -12.0649972873997, \n-24.502237798928, -11.1086894350753, 0.791996711110158, -13.4328017661662, \n-19.8763900599038, -15.4808105186591, -18.1945494541354, -15.6446750761129, \n-6.9779937570146, -15.8010627323496, -10.4481911899057, -13.9945223625427, \n-18.6290611765293, -19.4873987728099, -10.2161537468475, -11.6556590924582, \n-16.8984052713806, -19.3306158083692, -16.1018053964289, -18.8428554646788, \n-24.1123357616879, -22.9906060029229, -21.4336049140454, -19.5557403398653, \n-23.0773503142293, -16.4704402505114, -33.4733047732785, -26.9449270576956, \n-23.6286440318736, -29.0944918299789, -27.5359427895994, -16.7523200629729, \n-11.5524585104878, -22.2509718847082, -13.0492927913028, -22.7208154507233, \n-16.0341690913387, -22.136124590578, -13.2444569400495, -21.8480591303771, \n-11.8337710648144, -7.7831936534649, -12.4794386079867, -8.43505835866598, \n-12.4448681398686, -10.4410374728377, -12.2150951941909, -27.0274880449631, \n-19.4210563176621, -15.490127557219, -15.8201422239116, -16.6804053236182, \n-15.8705600364186, -14.0135589897717, -20.8005494512218, -20.9259063199499, \n-20.876362854867, -17.4404087567368, -23.4956617964175, -9.53651242375225, \n-9.67659799911561, -20.7421434670383, -10.6164045884592, -6.59652101410583, \n-1.52451318231883, -18.3150929756281, -18.3386299152871, -23.7875592446938, \n-11.7173891663615, -10.7257200335058, -19.1245432623719, -9.77886679625031, \n-11.2123856082479, -23.3858655517832, -12.2440987307634, -15.6460875166254, \n-14.7736086460446, -18.1272762862782, -18.2473265620167, -15.4131708695864, \n-15.9344506123135, -16.2011765002063, -2.42106630949096, -34.6002017549702, \n-27.6353057464618, -8.4053421401576, -18.3457077042748, -25.0951810427448, \n-12.8420737433313, -9.38863924915994, -15.9572924761725, -17.0926929067206, \n-18.276697029729, -12.0938000302119, -10.1886471360304, -21.4147767523279, \n-14.8944599557821, -15.4153534889932, -10.2423561427765, -19.4835383559134, \n-17.6927285705587, -17.5420337575102, -29.5602253501906, -9.49436976713531, \n-20.0339649934507, -23.0358080469185, -14.2132584457164, -21.7655075859261, \n-13.6403548936054, -14.4110578900407, -12.3555552300481, -24.763301209784, \n-26.6790257737054, -12.02068953872, -21.8163079335186, -21.2947613989598, \n-25.3432633023647, -17.1058055088729, -18.1216458487457, -18.5673362131189, \n-21.0245674722541, -23.2415391048805, -19.5763472362866, -18.0914856273477, \n-23.3831825267049, -4.98036235858758, -27.5813609348878, -7.47387540862861, \n-18.1322376801976, -6.12841955066493, -2.61851029014522, -33.1393396999084, \n-25.6423446410347, -11.969845862562, -25.160343077166, -24.9382228199113, \n-27.4915412016116, -14.0391564899541, -24.5342282764286, -20.587844096853, \n-15.1285358741745, -25.2143614435858, -20.2935947636004, -26.5337168646327, \n-25.035769700738, -10.6217763266389, -21.6286385757375, -11.0770227575856, \n-20.1518223071017, -20.4343636375791, -17.3144324013571, -5.52381026253024, \n-32.8159025964811, -16.3248335519705, -22.2889359889194, -21.4451120797964, \n-5.89395461016952, -6.04349712336495, -9.98007437459879, -12.4337250775632, \n-20.6108103205294, -14.9061631708629, -27.8817486561071, -5.96068778475777, \n-7.09979061646797, -20.9410682950007, -15.9263325834987, -15.1678010268269, \n-11.4859628138319, -21.4836526887079, -20.1214913259672, -19.0436089745707, \n-20.3412952385539, -23.8629729053539, -24.2073221976008, -17.2544659158976, \n-23.8791850168643, -10.3558115699909, -9.49733614112257, -28.9086245795137, \n-34.6747861035134, -25.0781522763713, -22.0191166448199, -13.1086776367585, \n-29.1711759369056, -11.3220926702702, -23.806531274508, -15.1619795306343, \n-19.6429609551773, -22.0086797828622, -23.3290814264178, -10.9148905340154, \n-17.060557350486, -14.1046167632912, -10.9375425004122, -24.9622020114704, \n-31.9793164408656, -19.9037625647807, -15.8643723718219, -18.2264189709532, \n-23.8255136331485, -11.1293519406537, -19.5961927988247, -26.4986911946601, \n-8.97169743275515, -25.5750667926119, -13.0805161350946, -22.2762534007506, \n-23.6779148471591, -13.487949501907, -14.821604947806, -12.2244026467641, \n-18.0926624833934, -24.2541202511272, -21.0498922762693, -16.6331985579476, \n-18.3428001267888, -13.9460579314411, -19.156477175874, -22.3485891731125, \n-19.124737503856, -17.1814332674124, -11.263559583689, -14.2276294695366, \n-23.6539663567199, -19.1733056847238, -13.4275289021612, -18.9545172930774, \n-12.1673430760126, -24.0691016940247, -8.52528111685573, -7.62866448678125, \n-12.1216304042884, -13.7666361978199, -15.8743881475434, -19.6324446774429, \n-19.7579190901788, -12.5736096137303, -22.549642577796, -18.7378940380258, \n-16.4724954663954, -18.012888473367, -19.325019967496, -22.1638765268737, \n-19.734064293552, -28.8712056872176, -27.511949045322, -22.498658521891, \n-27.6137640740316, -16.4028408483461, -27.2521500008724, -23.0634912442343, \n-13.1327857080672, -20.1494334115476, -22.0837736762683, -15.8506800192894, \n-12.1223590689689, -9.65124655325994, -15.9634983671276, -21.9436533749963, \n-24.6397046495217, -12.0988538793784, -13.9944322208877, -11.483959088168, \n-14.0043298786617, -20.7633645733679, -22.3331252548102, -12.8004904437781, \n-24.7242324359942, -19.9078834611696, -14.3715957052666, -10.9436928262314, \n-17.8243621613931, -22.6779479211135, -30.8732585203795, -27.713230819623, \n-34.9390537243621, -25.7945999700224, -17.8411084676625, -13.5626596028323, \n-21.9761839868906, -11.2706859749911, -21.6361262665063, -26.3058316312645, \n-15.1964590474533, -18.2389555749612, -15.843667416436, -16.2964373668309, \n-22.055406526934, -16.0790406310316, -8.14704032682169, -15.3427674751156, \n-15.9780682136265, -15.1435080389292, -19.1507246979608, -26.6346042936753, \n-11.8710405584464, -3.47446722767728, -32.8376036449481, -30.3792244805095, \n-24.305532021557, -15.0726361621802, -20.6772172018751, -9.28456764963139, \n-25.8676242692607, -13.3045074456932, -16.8252305562683, -22.065507140868, \n-25.586854327388, -9.82542934666233, -9.6163666472221, -19.8112563963558, \n-17.4883006380446, -10.4480483870531, -25.9321711231142, -13.4724230952121, \n-8.89192001424799, -15.551022235621, -1.45787584841578, -7.22212753664966, \n-6.12916766620497, -23.1086050921296, -8.11421746237031, -22.1692863783485, \n-14.7602815976427, -13.0749912655382, -9.28518517117251, -30.6503120246734, \n-21.9881292989152, -14.2127311946565, -21.3757535655467, -8.26743704864897, \n-3.97789627896523, -11.4807876369253, -28.9876351093852, -14.2902743183921, \n-9.12023389680138, -26.1146832854802, -14.3852950772119, -20.7568222293155, \n-18.2709996407632, -13.1822224592478, -24.2922081487544, -14.4446160110561, \n-23.5642282849812, -17.966645911492, -15.9339790195077, -14.5008653146367, \n-9.38048139487685, -9.67201444608089, -27.3032019578628, -13.7848870901778, \n-19.0673552433604, -28.8892363293391, -10.3295775096019, -20.6994373343427, \n-18.8221836291144, -16.7067662239071, -12.4408791794683, -16.1709286756401, \n-18.4813403517802, -20.1421603717837, -14.568456354144, -19.0860483717723, \n-22.5428199953975, -23.3616079227991, -19.6138661409211, -16.4932914815816, \n-20.638683700825, -23.1055512617818, -16.7473305174384, -10.0140231505072, \n-26.7091984292978, -7.56071673393971, -27.7612732150887, -11.1471845949871, \n-17.375455750017, -13.1297317985292, -18.7209135552342, -16.4514822510607, \n-16.9873773774852, -24.5760779849883, -10.2624259416369, -8.49079316405763, \n-13.0447776146619, -20.3083485990571, -19.8839943084514, -24.5371548741029, \n-12.134639395514, -16.4912534151735, -16.8063092802111, -19.1521474315381, \n-12.9673602432315, -29.7502725823763, -14.9305361345893, -21.9671058695546, \n-15.0408149342972, -4.27173775745034, -24.6576545644507, -26.9497727836979, \n-27.0771780318601, -36.5659683418461, -30.8900355457989, -16.4962525152642, \n-14.2192622353159, -30.9090890907635, -29.1710577651586, -6.76675218545618, \n-1.65936618522335, -30.5087510240512, -30.4006684821701, -8.21418724600656, \n-11.34498568961, -28.5000137850632, -9.63073130259703, -17.9399812402392, \n-19.5459699102959, -21.2053920822111, -12.60424137041, -19.712798341737, \n-11.7268399162279, -13.4001171145366, -27.79673250735, -21.0817407566965, \n-14.0632281402038, -13.4778861315144, -9.72202561430493, -4.90871577422374, \n-29.3032921538815, -25.6291048255144, -9.7107903886149, -9.7107903886149, \n-18.1180800954773, -22.3503018590375, -11.3853307810436, -11.5904804434464, \n-22.4514056754496, -26.2043052086794, -23.6774042585727, -6.88655804805791, \n-6.96545972788322, -28.1983109924927, -26.8937390867969, -27.3217391781847, \n-22.3659991354861, -20.7924320952711, -20.6427178772638, -21.1487552047191, \n-15.6015263773478, -15.0656778951058, -20.1808073539525, -12.201415332816, \n-14.0892681259849, -20.5449305771136, -6.53713937202411, -13.7325847263057, \n-16.285079505861, -17.0953224542263, -18.5975475136667, -26.7175127186937, \n-18.0139013370079, -18.2958412807069, -10.6938476483947, -24.8052491524654, \n-24.9046897677038, -25.5626862558293, -18.4467096840369, -21.5220226090448, \n-12.8215068375622, -13.279548481356, -22.3794006891598, -14.0822474956566, \n-21.90733439462, -19.3470299467673, -22.4284688684078, -32.2560953195273, \n-25.8874482933991, -23.9068480051212, -18.372534282158, -21.1255185229694, \n-10.9897388646051, -28.1595687375235, -19.7188387808456, -12.8526159599728, \n-21.3164102229624, -27.8854886862668, -17.0978947264603, -5.77208940984944, \n-30.1225976065235, -8.90102498886925, -29.8202493514459, -30.0417094252599, \n-5.12284472933495, -9.79993830951295, -16.0357400991106, -21.5847235760933, \n-25.0169804472666, -25.0437156209366, -22.1942864614619, -24.5507451153359, \n-9.30330250927419, -23.8206602630046, -19.7415617951358, -20.9050739984076, \n-31.7265711494881, -21.3981682431048, -15.2375364290625, -17.6409809058897, \n-16.4791273950187, -21.3040733778101, -11.1606126410495, -17.3503261475299, \n-26.5382360031639, -18.2939363804219, -23.0212906250406, -18.167344665388, \n-13.6320362274609, -15.9393251733894, -12.4627284386601, -15.6787879130915, \n-13.4496251687135, -12.316548674823, -20.4009401831158, -19.4190569303596, \n-5.47377738917468, -15.3290195364519, -23.5919465958052, -14.6888927513694, \n-22.0911399945508, -25.0991405491325, -25.8080586746475, -15.7041743894089, \n-9.63701190118755, -25.5779134710541, -27.9385164523419, -21.3706935840024, \n-15.9657479485524, -15.1707276414519, -9.05951351348022, -7.18493908000236, \n-8.45035479157568, -20.2979599594011, -22.3525477386584, -21.698743628744, \n-11.0398634242633, -25.5365679005536, -7.2219894636948, -33.9163557671048, \n-16.544276709046, -22.6694962703536, -23.0516253898162, -17.1527740722235, \n-18.7481516002609, -18.4342131505913, -14.942980236323, -23.2442692660056, \n-8.10379024656164, -18.6913473132724, -17.4581883589018, -18.391472449292, \n-16.6633957957378, -19.8147021127559, -7.40700515636647, -20.3753098381736, \n-16.5793862102069, -15.5455365649282, -24.2209636347043, -14.3548909218941, \n-15.2894796461436, -16.1090174508121, -5.80926322690577, -9.92282335447135, \n-16.2877719649868, -23.1529042207372, -10.8606611001936, -28.6629783308516, \n-19.9090484742336, -19.0531981729882, -19.2263343995605, -21.2496737467383, \n-17.7433819303895, -22.6790523503275, -13.696133312234, -17.4718284113992, \n-21.4621259750972, -7.30456556089465, -12.7192605802424, -16.4434877299078, \n-13.888143437611, -12.7139661966756, -28.4335786907671, -10.2992017011333, \n-10.6531049922237, -16.311932291328, -12.4038436978349, -12.8832741458895, \n-13.04985553274, -12.5840203827978, -25.7656156636874, -19.6504994646555, \n-15.2243292953401, -16.7440869715287, -19.0255106255347, -16.9291197037995, \n-20.0084659144397, -16.4093105975145, -24.3727911747189, -16.9236141123854, \n-25.6870098665114, -8.79985255416743, -13.8349201829626, -20.0853937021931, \n-17.2392123026276, -17.4982517550876, -13.7815711959221, -15.5523002553719, \n-22.0125151011662, -13.2837295584245, -22.9765364049613, -10.2106685808014, \n-18.4737869151114, -15.2623179472863, -9.23165385835432, -8.37708585257453, \n-5.9542975324462, -10.7808175808754, -24.8898560611099, -25.725617119189, \n-27.6279950169357, -22.877286963954, -21.0447638203, -23.9818387500789, \n-23.3706874581454, -15.9758531069503, -18.8843432059803, -24.9086791885598, \n-11.7449876887006, -10.672306928821, -23.6057836607272, -14.5701015823778, \n-13.2120404801596, -22.3177187260615, -22.5331786214868, -11.1901474072177, \n-13.6570977581585, -21.7947282196647, -14.9091051373588, -17.3777881082737, \n-21.0342336107149, -15.5569042977914, -18.9931424450838, -6.43211324336733, \n-5.98782046129782, -23.6246691138431, -13.3163799908048, -22.1111021153756, \n-7.7325758171481, -18.9071707251504, -13.3098293991229, -11.1473923142804, \n-18.1227072137832, -23.9492777988363, -20.41464316151, -17.9876327645409, \n-8.51727982568596, -21.917567696882, -9.55818221935961, -10.6610471866709, \n-15.7786170479354, -18.7486339541374, -3.80633696880044, -21.2578421697356, \n-8.742414882791, -11.8012829885589, -13.037178260179, -16.0981333633064, \n-22.2279682396891, -14.594629051128, -12.2181201718157, -21.1457016308026, \n-14.8983025925416, -22.1647077251928, -25.9943388989953, -13.9874835919298, \n-19.0057015739275, -16.1225812408638, -15.1947140506789, -17.0512730949103, \n-17.6274277904855, -15.4141506374711, -20.1048145664164, -17.4610582564896, \n-21.0167387106224, -12.6632690595343, -11.9716982210811, -12.2319194699453, \n-20.6399373435939, -11.4663927071678, -26.8118823680752, -14.1810343269194, \n-15.7080561101694, -19.2934087767526, -16.4967215032162, -14.5923587948819, \n-18.5759000959534, -16.644192996599, -11.2201879895149, -16.6107761700467, \n-31.2460509413169, -31.1390946637539, -14.0638803287012, -19.5652618848923, \n-15.0915143453725, -17.31490762742, -8.30489184273888, -22.7513964179797, \n-7.65625522171708, -24.3681369398774, -24.7995055155244, -17.2534813597793, \n-12.7176880049347, -16.5748397913332, -18.5651144917237, -23.587304276152, \n-21.8631270112041, -8.57104336556134, -6.94855147245148, -19.8376130516854, \n-13.7885971495727, -22.2470500271423, -15.1395321015707, -12.7881424429529, \n-15.3243656495069, -22.8548636328947, -12.2779196212419, -15.8720455177219, \n-7.37707917958463, -9.29225081586399, -17.0461755182772, -6.91914798405204, \n-23.4681430700043, -17.6456771616413, -18.5891269616145, -16.0177226066024, \n-20.9000999276504, -12.697917717691, -34.6437689678807, -13.4791081426431, \n-14.6823062873267, -24.7466471259649, -22.252230690034, -24.2947661727117, \n-7.98066422155945, -21.367602557494, -13.3332816341897, -21.5812877343875, \n-25.0523048839081, -24.8717543548672, -20.5111964485716, -18.165646929389, \n-14.411874327396, -17.404901243683, -21.9311900083815, -24.7996671871578, \n-9.47325633188664, -24.0526540643581, -17.2898871996572, -17.7631689273051, \n-8.66914925829541, -20.0161257053147, -12.9694584421901, -11.4164371379894, \n-19.5555909495531, -8.34206247264037, -24.7102367376991, -25.4172008337062, \n-17.6345699112898, -16.7171505642971, -18.506262961148, -26.5783282303036, \n-6.34786764650602, -12.0801937584307, -21.3379320606851, -18.9266182199967, \n-17.2673452121506, -17.6192353589138, -21.5317484549339, -27.7137110763065, \n-10.0826145954441, -22.2111950241408, -11.7579369938094, -18.6495275186965, \n-30.9959150430858, -18.6371278123748, -15.1189913788759, -8.36613966514975, \n-29.2682937742849, -28.1769507908726, -25.5555059375661, -14.4162424054493, \n-26.5740684408396, -14.856866608904, -25.3569232478811, -29.2575886702719, \n-29.5537201894917, -12.9457773965347, -21.2558583813231, -8.70989268698725, \n-24.0630521218087, -17.6693845967078, -14.42490115644, -23.048836487291, \n-13.4306114708397, -14.2534896301183, -12.6366857674023, -18.4147511551916, \n-18.4147511551916, -15.8423233997462, -12.2408485484314, -16.7568121692223, \n-22.9235659494203, -11.0950155431984, -22.4929648688084, -19.7603829841908, \n-11.5270265947913, -23.9550754251682, -9.79920711165222, -19.089749806267, \n-6.43409980289865, -27.0265576439621, -28.0856346905873, -14.0972246568069, \n-15.1313870656284, -16.3990121669581, -11.2510606806382, -8.80930435898643, \n-26.2464267896508, -12.4069199723999, -22.4735768035159, -1.23306870894491, \n-32.87122037961, -26.1726899533502, -25.1553550492221, -17.0640495427168, \n-12.5079992262323, -22.7484309783389, -5.83040916569151, -16.1243233413408, \n-14.7959811394783, -16.8205718082895, -19.9274384734762, -30.4523508179666, \n-14.3807573647093, -1.05645103009179, -1.7175375988914, -25.8407145532693, \n-25.1897997411046, -21.6714801939642, -12.3682379732874, -14.2502618963595, \n-20.9711632654143, -9.99457301527235, -26.05291868897, -13.7790439876599, \n-25.4130928762305, -25.9010662779587, -31.2413159156467, -8.06522359279307, \n-23.6556365879289, -21.2521116565965, -25.8007121966225, -22.6263390903637, \n-26.1766375364152, -9.03299694981172, -26.525265562696, -14.548392544291, \n-13.5043836921276, -13.4523213348402, -24.4633162074629, -22.481305066338, \n-12.6802593920986, -21.5830515874239, -16.8213827817869, -15.1882972550198, \n-19.2631485266955, -21.1249757323769, -7.99350311648166, -6.81577284920442, \n-9.77701723468341, -20.3985515654311, -13.8449316344761, -24.1166535711028, \n-25.8432481422841, -25.2727892145754, -17.3772164340187, -16.9951103479285, \n-9.22343868665961, -22.0949883433257, -24.414469768553, -5.6046041297066, \n-13.7700300607074, -10.8752511991771, -26.3600622345454, -8.86581301255102, \n-22.0612919432494, -16.236000185812, -19.7879177093251, -11.4697617099277, \n-24.5213182125563, -25.5889230961989, -14.1613236481958, -18.5056210946792, \n-15.5481412468744, -13.681665197242, -21.4070512270621, -14.0147756370805, \n-24.7405899231215, -18.6479457222246, -16.148993715421, -14.2219705906295, \n-17.951283504401, -13.9042451217817, -22.6349961043097, -13.2091249480018, \n-16.109189975605, -17.3589018002719, -17.8569412778482, -17.1581804207248, \n-4.05447046020247, -31.3670043753416, -24.9792167214192, -20.1585343619817, \n-21.3616440507327, -21.7038453907672, -20.9906245040528, -13.9413457972236, \n-10.8001474388435, -21.2769734394886, -13.1996004262046, -21.2866115919915, \n-35.2180774445708, -5.98363772274507, -27.5110878625145, -5.2941041670301, \n-35.3183253342658, 0.201123784686736, -16.7509484048074, -3.19012021306627, \n0.0859819904330195, -3.50072996489632, -8.97651741501807, -17.9997174075258, \n-17.1859199255003, -18.2014996405462, -23.6055302358477, -11.2031190328329, \n-9.85573066850773, -21.125995480377, -21.3594305341826, -21.8272624884483, \n-11.8335934645985, -25.157428061659, -21.5759502926188, -16.3720972384212, \n-18.831001375214, -19.4403508572019, -14.1083749787054, -6.61459293062956, \n-30.4704437638671, -27.75894182446, -27.182629180722, -10.5083015708177, \n-15.1164681737209, -20.962582142193, -22.0020893117027, -11.9116957783388, \n-10.1983173359528, -19.2254160641028, -19.4816710813065, -24.4044879067847, \n-21.5236132714682, -18.8405029143367, -20.428621927205, -16.084996920251, \n-21.0324205627548, -23.9303209805648, -18.6701010504835, -19.1423332235349, \n-15.4912233945634, -16.3333734696333, -19.8779269772016, -18.8442575238684, \n-16.3966133800117, -31.3883202991372, -2.28417952020138, -28.5991247797726, \n-4.8954857191702, -24.8174966776195, -25.5269585875824, -15.2149707918968, \n-17.1183078583496, -22.02812137818, -16.3292221240651, -21.5286429143557, \n-21.6578932152604, -22.4277325667641, -24.5509184400638, -10.808828545061, \n-6.57602722102395, -27.1953679603137, -10.9414159187863, -24.3628213965613, \n-24.7443979651709, -23.9762921133606, -25.8205553008653, -1.305728027674, \n-0.980608660833767, -2.476708355565, -2.99206235637281, -6.13770843669586, \n-21.4659419974211, -22.1813144137908, -12.7548088342132, -22.6733442325556, \n-30.4338136802269, -14.7861374445207, -17.5336029451904, -16.0193457753152, \n-13.3564552395885, -21.868485589476, -13.0643810224044, -13.0266634572841, \n-24.0387144339154, -19.3384252533423, -19.4486111229031, -21.2115000544954, \n-25.8299033427269, -10.0331164532949, -18.5331350058635, -16.2077063860066, \n-20.3572368235129, -26.738768304298, -30.3288332306937, -6.38127006678132, \n-5.22345317800846, -0.718068019233357, -33.795119707712, -17.5321260327469, \n-24.1903828938632, -40.9423192483731, -41.5199636099484, -24.1054633766368, \n-25.0048690834144, -18.7067121672041, -14.586692336769, -12.8075653518983, \n-24.9576566376984, -10.3149905609477, -11.3020567637373, -20.7034655291964, \n-13.857278557879, -12.0713837439936, -22.8562268541469, -17.3467628088604, \n-17.2180336085269, -16.8940332115572, -10.4415198393398, -25.7237365441615, \n-25.0958321410628, -17.6017580818923, -19.9559887522702, -17.2154015819938, \n-18.2054807086704, -7.33786838226584, -11.1306863446894, -15.4638644903171, \n-18.4074840833285, -15.4168130700956, -10.6776249249083, -14.1065411826255, \n-17.5380242933485, -14.7178632266952, -6.11307696451239, -10.4617770949484, \n-14.4020690376077, -22.0156892822811, -15.3725842121295, -25.5471740768367, \n-18.9072210489638, -18.4753543276811, -23.7065854023585, -8.81781555365255, \n-20.5435111619519, -19.874567024786, -14.2446035061529, -17.049050048332, \n-11.6990495082968, -23.5911592930863, -25.6530295511632, -12.8759264796451, \n-5.2005465989201, -28.2017314956829, -10.0546846098775, -15.6433591098323, \n-9.90201403320139, -25.7690557251761, -17.0829557266701, -2.79349625824154, \n-27.2232981258146, -28.1115745098027, -10.0110405236952, -14.8505995539556, \n-10.1164844950124, -23.1857006329622, -36.4201383190747, 3.78129341170801, \n-37.3355468684128, 5.04899697076944, -27.823546546652, -23.219901489602, \n-18.2343677320557, -15.9853492336533, -24.7643947684935, -11.0497536336934, \n-23.111329265011, -15.7976207408913, -18.5214497568403, -13.9324245641787, \n-17.8029216454953, -13.686309339893, -16.7080348479235, -20.7601387443654, \n-28.1714910714277, -5.78830114325548, -13.6163997742118, -14.5876957833259, \n-15.7439767266254, -16.5017040515591, -21.5842692717624, -16.1637935084958, \n-10.431211522175, -14.2585333763554, -22.0426386535861, -19.7638820161029, \n-16.9562170143384, -19.0853071671037, -17.4402503409443, -18.9207828307667, \n-28.7167100299162, -27.5815973957486, -19.7642173134298, -27.7683958391027, \n-24.2854935098381, -15.3634880202596, -22.6597203764465, -12.0360237435664, \n-10.8106974846576, -24.0776557865759, -19.1128488564289, -19.1128488564289, \n-17.2622407875996, -8.01502102547629, -8.04479237994526, -14.0041438062123, \n-18.5581496270024, -18.581060443067, -11.3840156148931, -12.4454969534368, \n-21.1789299921065, -17.8187721324669, -16.8550978724607, -20.2843025063739, \n-11.2104644057637, -21.4107932979798, -32.807321446036, -32.1240908473404, \n-3.13326721225238, -11.0560073071482, -22.2590681450724, -6.76948234403596, \n-8.94072981702078, -10.5304271603136, -10.7885117729161, -28.2836503677511, \n-32.5921446931268, -12.9800721256699, -22.3019458263527, -17.5220643188049, \n-16.1914182438262, -14.0665136113206, -12.0865165515811, -24.9120707628893, \n-17.0640390849481, -34.2415710738524, -11.7968219856896, -19.6997797142451, \n-13.9756262470181, -21.5350995067625, -18.8918658414774, -18.3153232772473, \n-22.8108032885546, -21.0004824175033, -8.36870473963999, -15.5860602903064, \n-21.4848143698491, -16.3498934251972, -13.0171434312276, -14.508925838851, \n-16.3658524010673, -12.8586829590327, -22.1893499403346, -14.3772391602112, \n-20.6231178460704, -12.9030067188935, -23.9704740776559, -16.5590041299972, \n-19.3490939203371, -16.1471686029345, -13.4943881372687, -28.7332593019861, \n-6.00409003217165, -29.1014042863569, -5.58643181110781, -4.37758718844812, \n-20.0784824558915, -14.2316046533063, -8.31535555810851, -16.6843007600321, \n-17.6253978865834, -15.5997402539467, -22.3332569028779, -24.0442007284221, \n-18.5917485893048, -15.8430022614222, -18.7391747434186, -18.4887218083687, \n-17.7576175162152, -26.0778238685469, -20.3459727010718, -17.6364860798518, \n-10.4980890204116, -13.6863980923661, -12.5923623265582, -11.3973403497587, \n-23.1311853617264, -11.8165905373521, -19.8102469136809, -16.1260745107193, \n-16.0394651724443, -14.6922490591771, -20.5399673559501, -15.20695099108, \n-14.7021891537844, -17.4422932972067, -18.0143288666027, -24.539755918809, \n-10.4550654366369, -9.97426544425638, -3.10523175574627, -24.8957854331346, \n-16.5473896611784, -13.0920563031768, -22.9563641844494, -13.0771529561708, \n-23.3553314192693, -29.2302811354454, -6.03231103127717, -3.35450504585759, \n-18.9873939954591, -9.88005900350699, -32.9394212953106, -2.89121740278777, \n-10.37246847437, -10.9674164226105, -28.71462286843, -13.0062386803996, \n-9.19383444721186, -31.0965194571103, -28.6258975322879, -27.9205535471441, \n-24.4807876845093, -12.5229944430123, -13.8832002288371, -26.932328926806, \n-14.5360540261043, -20.8616197561456, -18.3216863347717, -8.10261200303581, \n-6.32658737226247, -3.12943311977416, -30.1663407751425, -21.0260800951392, \n-2.48567926563812, -0.257601059853179, -5.3627625088096, -14.7313070863804, \n-11.7734739449188, -19.5904249197702, -33.3581081865456, -24.5064596407254, \n-26.2711418932589, -30.9314529221001, -29.3111556399357, -31.1399997279699, \n-26.0741970002557, -20.5428407908906, -26.960438613751, -6.49109208432805, \n-22.8856999886379, -13.2707696597235, -14.4452297520395, -8.36905917826134, \n-20.8909385477997, -13.7099629039071, -7.17341832744012, -5.51777989313641, \n-30.035691313625, -5.33490785288628, -6.94394387337524, -20.9851168811128, \n-12.7968388995354, -19.6337626759471, -15.8352242454713, -11.2385132450585, \n-4.68521905709274, -10.4732116739552, -9.72117475076777, -29.0129945979177, \n-13.3388026241235, -20.3735292173876, -22.4596703190653, -12.4436676450825, \n-22.7236466038095, -17.0320948071727, -18.3634368154156, -11.4687197268907, \n-17.6648460362199, -29.7181566852011, -6.51005899221867, -17.6762131180528, \n-12.1057109472717, -24.421027033376, -25.1655077557056, -24.5335409552815, \n-17.8298644401632, -18.6375887523541, -16.5827746819887, -15.9090429974435, \n-17.4887984807888, -16.2768323806868, -9.16562039336286, -25.1030844424628, \n-18.0558478673406, -20.5771082784404, -19.1322950419484, -6.17675563308408, \n-9.08438931011277, -27.8655942003296, -4.01363597978843, -11.0541857587272, \n-13.6017297116501, -15.5129633034936, -19.0432322096744, -14.5565451104171, \n-7.63295444504238, -22.6173935512857, -7.06161882314621, -0.254390044719202, \n-33.0947821501826, -26.3892377173999, -25.2074935804763, -6.87813264461406, \n-10.9663494297431, -19.8253889376481, -9.38766712703013, -14.3321778818827, \n-20.7972007689466, -12.7815323348958, -24.2448023400943, -11.703581605504, \n-23.0563469556664, -19.1929916282958, -17.1690577042424, -24.7726367634954, \n-31.5222222437579, -9.24438379599911, -15.6635518683142, -25.5228518283734, \n-2.78462021727769, -31.3331802543406, -3.79216603662215, -20.3836102839318, \n-12.9820379457215, -21.4808715229161, -13.176655934379, -9.81132506601723, \n-4.8426289339266, -9.14020081331365, -20.3080017069604, -24.2308393848332, \n-6.79801009564219, -29.408888841065, -2.07065281533851, -27.8101441593587, \n-30.1942639960007, -17.0484699876209, -22.5305899492863, -32.2435465642029, \n-14.6741442423019, -14.1057400521004, -21.7785748413926, -22.9693844640486, \n-11.6764537698638, -11.6739988538977, -24.3471762124478, -27.0558267412996, \n-15.3351104496052, -8.90200581803141, -24.036029452156, -14.3634602289097, \n-21.5937553597686, -13.1787912752736, -2.09270468361748, -5.99820682747836, \n-13.851505219724, -16.4215385548528, -13.4193129347049, -25.9752189977174, \n-18.3324694370596, -4.9723321568826, -14.205473339962, -19.975102887909, \n-22.306068499303, -13.0647036761718, -32.394830816324, -22.7480389840819, \n-25.1001445473658, -29.4601924829009, -22.9256640614429, -29.7649455527411, \n-18.2941919695083, -18.2098237391471, -18.1489223465169, -6.75424160616729, \n-23.486784117352, -5.35799605295265, -29.8335941856649, -8.07883323221147, \n-23.7955199324157, -19.2673053245852, -15.725783247916, -11.4215521614871, \n-14.163213819774, -19.0275728460511, -23.3459295053253, -13.5675280098911, \n-19.8808947830242, -21.1707210160104, -24.1092550567995, -24.6267418281022, \n-17.748462428304, -17.748462428304, -22.2651873086912, -21.4532851596776, \n-22.5859622091325, -15.3280833695531, -14.1682466504661, -17.3846670309238, \n-16.1844990399318, -5.0222311383732, -19.0494348097664, -18.0687665757867, \n-13.9240072917103, -21.6089259405841, -21.894243636495, -11.1577768337236, \n-13.526759793705, -21.9879543734118, -16.3853517494212, -27.7065195234975, \n-21.219538525866, -10.5818645419616, -11.6618270781332, -25.3194908160854, \n-20.2727760319089, -26.1797661296334, -27.025285375807, -21.1425749996024, \n-21.1736446428423, -8.88995421956368, -8.51252362275338, -9.48648137329435, \n-22.5833450146337, -2.47145237288196, -20.1416564763397, -15.1346481856261, \n-13.0906838183458, -8.54529349120075, -12.404200582242, -15.36977308478, \n-18.1475932563647, -9.66711414216085, -18.6536100414196, -19.0314061500024, \n-12.8121243003145, -22.6435254707499, -32.0648366883698, -22.1859827307787, \n-22.7092927150609, -17.8784945862121, -20.1300747761853, -14.5587804637073, \n-16.7855236668377, -24.3266687833956, -13.5678922616735, -19.4334159022224, \n-15.2873742556716, -19.8447829467659, -26.9132799965475, -32.7975462327607, \n-13.2340584723782, -13.0993513986997, -30.8574096382822, -3.71903319157592, \n-2.31611065955927, -28.9456268631065, -9.11100648873009, -18.1371576819307, \n-13.5519458321033, -15.3964478659329, 0.461766358177826, -32.4869265542108, \n-22.8467738491743, -12.8610487308519, -12.8102517839614, -14.1484037822654, \n-20.4520609025285, -13.5849493106807, -15.8982378965283, -16.6882150188916, \n-19.2837104599289, -14.8395043265131, -15.3452881371625, -13.7947188255358, \n-36.0110722669547, -24.7137040855974, -8.61931206234597, -17.3577290541943, \n-22.1533196976696, -35.1935459789592, -33.1480174101478, -21.856776382931, \n-12.6049973141037, -14.5193107809778, -21.6125376555684, -18.0231872420023, \n-23.7947739313527, -11.7611160304013, -21.9301810565396, -17.2654984768164, \n-17.3727853101722, -26.0359457899201, -18.4164932261029, -24.0840243472837, \n-10.3094837176195, -26.1993061271701, -21.09528648666, -13.6787193497831, \n-19.2242538436658, -29.8832843045027, 1.89894812132835, -33.4499471683587, \n-0.773378613847974, -11.9640695465024, -12.9709073852915, -17.4013297316623, \n-12.5007443409348, -28.1385376347771, -9.3696331023189, -20.1151825373718, \n-19.9096589867602, -18.640096824146, -12.9878994119431, -7.73889720908728, \n-15.6347944484727, -13.6658898860891, -14.4504062120061, -17.5721231569117, \n-20.7823804499307, -11.4267294084887, -24.1135405179338, -28.2672575748946, \n-25.1828644689615, -9.49172365781956, -23.2544799315963, -24.0380722173008, \n-16.9741603203597, -19.5975176070072, -29.3155619864901, -7.44988602504169, \n-11.6471254782729, -21.9572793092598, -13.5152102283562, -21.9108242100161, \n-22.6166823951668, -6.96685863402305, -20.4968757934471, -11.8193653768062, \n-12.3669922279809, -14.8829292641395, -28.5619688665065, -18.1503759531903, \n-24.5806613374709, -28.9026967943319, -24.7607197154927, -10.3005127623361, \n-15.6671631842962, -16.0919576913189, -24.8556000643489, -7.40788220341279, \n-25.7332321210781, -39.2526363629055, -10.9525799364173, -17.838179794683, \n-23.0189376595772, -23.106294145712, -1.38958651159062, -7.30668755055107, \n-17.3787528207634, -11.357811530371, -19.5328375981225, -2.45309298764676, \n-8.44104440462826, 3.64826708341609, -8.75090749636497, -5.47048346137058, \n-5.61966713816598, -28.7680640881424, -31.0945724957977, -23.9053411328338, \n-26.6408437026852, -22.6250604087383, -21.1374209001487, -19.9858493258182, \n-15.6349034002366, -20.5551563117415, -6.23807418257131, -15.1539789152911, \n-8.24214105713222, -18.9339692402932, -22.3200622713671, -14.0899887839845, \n-23.6451661848619, -18.19839326603, -18.406420349185, -18.79090009934, \n-17.9932528425403, -10.6041779077751, -20.0766703169305, -21.4157596794085, \n-4.10051912460759, -8.1851557109111, -12.4866547588625, -20.6444230130893, \n-15.4826112233306, -19.9612789924668, -28.8411990766806, -9.36078055570906, \n-26.0539971746035, -13.178668613167, -17.9127503453424, -15.7711437320398, \n-10.1268038550958, -12.8824054071296, -18.996668074213, -17.8930400234562, \n-14.8678621825061, -10.5933438387188, -17.9854005830019, -18.765258935805, \n-18.1052527011251, -14.2948943756421, -13.3830459760669, -21.014547944533, \n-16.5611783336776, -30.3731527636729, -27.0001609559399, -17.9692331923502, \n-29.3878640252613, -4.75331509622868, -13.5324825349808, -21.2277434293502, \n-22.0716971694456, -15.8630968591826, -13.1845301564693, -13.3829455945744, \n-11.9073704178935, -19.413875700386, -10.7757551431955, -18.5923886985821, \n-19.6065785687377, -14.2911420621217, -22.2070243626696, -23.703429890336, \n-17.2364693912478, -6.3887085023137, -4.63559780558821, -30.0495963632482, \n-12.1511267085988, -14.477863171777, -20.6037534796427, -15.8470632332068, \n-15.5843193296752, -7.40359587927658, -5.60346289569602, -14.3948227311675, \n-16.9328036345806, -17.3321203106092, -18.5226346656431, -11.7196087706546, \n-24.8785953826288, -26.6052706234866, -12.1036247014451, -20.3630391781165, \n-12.6178532206106, -17.8619558269117, -8.82560401831455, -30.0429715467702, \n-13.6047528417102, -17.5637501714918, -12.7794736170752, -22.8259966695631, \n-18.1819514651162, -18.7254520281618, -16.264505689303, -16.7762523298906, \n-8.20855264250639, -24.1460474975963, -10.3923921792731, -7.07255899996532, \n-6.05578270843639, -15.0891552080003, -22.9361594126953, -26.41449895373, \n-25.1105561307064, -26.6761007324801, -5.59587080037952, -8.45229147705457, \n-7.24114327836768, -25.6525237115197, -11.9820755976369, -19.9291070399543, \n-20.9791164384867, -10.4571757686314, -18.8732873320895, -13.7474827729524, \n-11.0062100313122, -17.4550252731277, -9.00943118654696, -18.1181347249091, \n-25.0445070883944, -18.2898460539522, -20.1790075499262, -26.4332707551171, \n-8.97843535674194, -19.5880030232694, -20.8476233725342, -15.2752196963323, \n-19.5882691501366, -16.8649097292443, -19.3557375339815, -11.7014492716769, \n-22.503369589195, -13.0498595885248, -13.2940073205772, -23.0357580697827, \n-19.1779278328692, -25.5082881985672, -14.0232829254254, -15.2194738421448, \n-22.6833018065149, -14.5301060316434, -21.5699450132056, -8.92358839237174, \n-24.3420899073261, -30.1996029505799, -7.54401622470236, -27.7999177367438, \n-22.1020636777601, -13.7735598273495, -17.3519523789704, -16.8033967205569, \n-23.6102830238359, -22.6001473746286, -22.0371642528897, -25.7883114131663, \n-8.38342444175354, -13.8311702978543, -20.3958712949091, -10.9743624414944, \n-24.7170221028426, -7.59227326703268, -12.4786247931756, -7.2949324397737, \n-11.5647149596342, -7.48678939464639, -22.0600522886093, -13.867352425652, \n-21.9522830921947, -14.5201148138115, -7.35788198580128, -14.6551591820674, \n-19.6859107014017, -16.967679032688, -22.2779726231086, -12.84735912669, \n-22.8710955391866, -12.7164548876102, -20.2577658844737, -15.592689348679, \n-24.6312133284577, -15.0616566650948, -17.042069030292, -18.0652216677018, \n-16.8605018824732, -12.6702917450899, -21.4459003870174, -14.2715033210108, \n-26.4443296508347, -10.6657455556702, -27.5106306203636, -10.1120736269468, \n-26.0562862000889, -14.8533408460055, -23.7917284587348, -16.4107538147582, \n-8.58083814348023, -12.4354966658795, -21.516753927645, -10.9297949931985, \n-34.4094184862688, -10.0027544125375, -27.3347031058216, -24.7665630955693, \n-23.4753730232277, -18.7903870707424, -12.7907320638846, -20.2033340143876, \n-24.399703511206, -22.6440016567437, -18.5143882940187, -14.1718729915874, \n-12.7376762210922, -9.36674584721582, -23.4587665470337, -21.6017869403434, \n-13.2367740369038, -21.9897989413078, -7.01513600995288, -16.3468704058311, \n-13.0892095029265, -29.6242714215863, -13.9202984194038, -27.0591078229545, \n-20.6441859115211, -25.5732186712891, -18.4940642384199, -16.5948628037871, \n-15.227234828434, -21.5207311586034, -11.6472982021836, -13.46153349058, \n-22.298856328568, -11.0150467551981, -12.2766451725773, -13.6343165673567, \n-11.099886769353, -19.6312915205084, -24.3388055407382, -20.0293722037988, \n-16.1765186192133, -24.8121130625694, -14.2359957032462, -27.2810946797572, \n-14.1734307437303, -13.7293399420606, -1.32043343834106, 2.18612967649275, \n-10.7045504442033, -18.8115367428433, -9.95333613223909, -12.867496499367, \n-20.4938038218376, -21.0384937655305, -22.1553070268371, -9.7167522041336, \n-7.80539867535889, -6.68634597672152, -25.1448556523636, -14.3855759327584, \n-20.1133121697104, -5.7328327152001, -11.7002766455658, -23.6802128104174, \n-12.2776147048838, -17.0443431630856, -13.1142233842696, -7.66363303085566, \n-17.9172281785024, -19.7491402214378, -15.4436558271858, -3.68485211214596, \n-25.3588436159303, -19.7523835759015, -20.7714347699908, -20.7338570998336, \n-14.4603452235521, -15.4452692816537, -17.6304020355497, -25.2413779749514, \n-21.2845977017601, -15.476234966318, -10.6798637616558, -26.1861609342898, \n-19.5888846618983, -33.8716321263559, -23.8832655904094, -23.827603978036, \n-12.2320533631349, -8.54317529760135, -15.8486522361201, -16.2902493415253, \n-10.7132050330839, -24.3175389512691, -11.4191346981925, -33.1660805910836, \n-14.8470597238292, -19.620714609742, -4.17788292364968, -32.3685083934439, \n-26.3446923271891, -4.1440962020453, -13.0723398342448, -21.5619654521799, \n-16.0273373376838, -19.0779772393473, -17.6985749003927, -16.0926144327405, \n-24.004397388627, -18.1984120012949, -16.4997933626567, -16.5971350057231, \n-23.7428836182393, -11.6266772150881, -9.29511275021078, -16.1682377070589, \n-0.268121742179311, 0.520742815833117, -37.0740002765117, 1.51334156189623, \n0.567756243404247, -15.0394634656487, -6.47022177155625, -25.5786259430123, \n-25.2539028182058, -19.176610573104, -15.6029187201561, -17.0674689571013, \n-14.3374545340123, -18.2774492584411, -21.3979282235757, -7.35208809493625, \n-11.4259055415349, -33.2295276851066, 1.25806172443267, -5.70907894320005, \n-12.7720554101323, -22.4061949900189, -11.9009639423657, -16.3885952403101, \n-13.5206377260211, -11.5326978563939, -10.9115122328336, -17.0444952821455, \n-16.8599417951127, -20.6313482242559, -14.194821409676, -18.8382261560136, \n-23.3079750679908, -13.1561722159369, -23.9966680084506, -11.2731827661065, \n-12.2257228877916, -15.3805236471647, -13.1042206228755, -24.5527916830543, \n-13.4362989852923, -12.080052302437, -22.1309355549946, -7.28309281651281, \n-34.8254923642507, -36.7705869069424, -19.7062240454294, -17.6729975911947, \n-25.3210770259795, -10.3474179087499, -17.4843270504479, -19.6435006660302, \n-20.0800182026219, -18.8731202844705, -13.2453168383831, -21.8130362246091, \n-19.2972310517679, -15.6261985423899, -22.0796642869917, -19.349744739576, \n-17.2715617006246, -12.5818058883877, -14.0789192037628, -15.0003955199361, \n-7.6329134912503, -25.1001871001796, -24.5066471952638, -11.1531054586152, \n-10.707356278347, -6.17776609764282, -14.1234499263222, -18.4550542046556, \n-32.3102057431464, -30.0908809606252, -30.3510371382973, -13.0731583669671, \n-24.4481210589246, -32.263617627554, -28.4341476795555, -15.6683331046411, \n-17.8052983520235, -12.490131577097, -23.9932189583858, -21.1761128056978, \n-10.1219910582838, -18.8180207360523, -16.1100202879678, -16.3956079278612, \n-18.1917329916518, -24.6933187782494, -9.17820651147746, -20.9898408461873, \n-18.2391680474235, -16.5886020123675, -28.7249374182817, -7.86686258669305, \n-3.5044389323996, -31.3755023289172, -39.1013067332467, -34.9393637712308, \n-27.3828732533015, -30.2665685725047, -13.2474011572438, -14.1242717688653, \n-20.0362002788906, -24.2592816527107, -16.9278534447367, -18.8597527371668, \n-32.8674742616289, -4.63999561896873, -32.1562897062503, -2.47983837393024, \n-30.6734066262994, -28.2111150812064, -23.1125892676794, -11.7053526216579, \n-20.103083349936, -17.5292989621022, -12.1162573092763, -8.96302573884348, \n-24.8638985385724, -17.1870071294971, -15.3721420040628, -11.114646564107, \n-22.6033592237965, -23.074923426979, -25.4233754231623, -24.5710141812359, \n-12.8938354790941, -16.1667348479787, -15.0662079524899, -24.382573049681, \n-26.0014716058937, -9.86508518201309, -20.3539792492475, -19.4954128453688, \n-9.73254233077125, -9.18696977879974, -11.2920968755862, -23.9325017359956, \n-13.5597451165294, -1.37351665787496, -0.977388999762461, -17.2895240935275, \n-21.6258984822973, -18.6712698136205, -23.1857226521513, -2.07540457698111, \n4.01727261811664, -3.28264959255401, -28.5749972592781, -30.4047902440907, \n-25.0075413661603, -8.17281845067382, -26.0628989278453, -7.94275188979172, \n-27.7342839241907, -29.6884414332877, -23.2157927377291, -18.9484321450121, \n-29.1523452054292, -2.88967743979452, -3.32269405333675, -14.136129032761, \n-27.8649254774629, -27.0884934886179, -17.3487382197148, -23.5315486496613, \n-11.3084840553072, -22.6107471129605, -21.578631683807, -21.2001900172412, \n-12.7657084489392, -25.0650119810159, -16.6820481355059, -18.2221966453866, \n-18.6873741382393, -16.2414510441954, -23.2553588899152, -20.1043352367645, \n-20.3677732563317, -16.2222527510732, -3.74776346965386, -28.5306375567653, \n-24.7008562694933, -11.887139766557, -15.3452718472068, -20.0375043604284, \n-14.5244365572364, -13.8009594060593, -14.9888681282603, -18.8356386446613, \n-26.1353856421814, -25.7200545789649, -26.6538329436741, -19.6186683756473, \n-19.4289560222481, -12.7684668089304, -18.001922050307, -26.9689946606275, \n-22.8756529433203, -31.6430698098318, -18.792600289162, -17.486200410169, \n-21.3449776403135, -22.2182123517363, -12.1308046682613, -9.54498167710719, \n-2.80990808914725, -16.5848101740726, -23.0212587430131, -29.2343406386743, \n-21.2917767201162, -27.0772558659939, -27.2432286721988, -32.2852316937497, \n-7.53495899714347, -12.163781256694, -23.2059724759402, -19.9544786263754, \n-23.9945623920848, -4.84487296564964, -12.6725160453929, -12.1248472461822, \n-19.2269509915104, -20.3614676478882, -10.6114581424019, -22.6553726524552, \n-27.6080112294068, -14.8812509995002, -22.3139271170906, -23.674689578555, \n-23.0932396922397, -23.7674089678839, -33.1068381991398, -4.84076138091603, \n-30.4793531253155, -25.8139267295218, -22.1656586474153, -22.4537777446219, \n-18.4809360628896, -18.6505189868676, -13.5059532206267, -17.8121343503102, \n-13.6947486704332, -3.44838966401452, -8.09294452615678, -18.3562591571354, \n-14.4268744510143, -14.1290092944082, -13.7020374246599, -12.5281660874867, \n-18.2506485135264, -4.4180743335855, -31.7618033031453, -10.9225038544166, \n-26.090345682467, -19.9429990851174, -14.8153365265423, -20.0171833449616, \n-19.829756081683, -16.8622933549509, -16.6228990206531, -33.1413283996322, \n-12.7743634562401, -11.9438501830494, -18.0543495418789, -14.4267142294969, \n-17.9674974509649, -16.3214208906065, -18.3356081815696, -15.2066860915137, \n-16.1282340025481, -16.3723475818821, -19.5024934492607, -16.4101982566789, \n-16.5022496907629, -16.3775907215922, -21.0704771086769, -23.0264048049388, \n-19.5089440527112, -3.82146422177828, -6.25120699561714, -29.4534706857887, \n-24.7042029277987, -12.6459678645646, -20.5743003275415, -26.1650618508449, \n-14.6181283897028, -20.4939492865893, -21.0492577002584, -13.9783588813823, \n-22.6824106888664, -11.0206342414724, -13.4869993828213, -22.2737435846666, \n-26.0050118363906, -27.2012693555922, -26.8938263326594, -13.5494437540393, \n-12.0943862091335, -16.2669323069684, -4.65994679353769, -9.13503541365402, \n-28.2712078261409, -9.12227606404149, -14.8856926917169, -7.78411065502502, \n-0.577197445540733, -16.3591682580911, -25.8600749882295, -18.2117519197498, \n-12.8063199462915, -17.0552373237798, -19.8169186227131, -22.4292067412706, \n-14.4050710314445, -12.8418900046838, -22.6660576228084, -17.3002691843247, \n-24.4665851515311, -35.2706064230251, -26.8357063182459, -17.3615114539248, \n-25.4776157859664, -19.9098728689557, -18.8010241209598, -15.8036731399773, \n-12.798429380102, -35.9831943470292, -24.7898551258673, -22.0641421927215, \n-15.596273996994, -19.0657095373929, -21.5305664062505, -14.8483165021252, \n-16.4043430606297, -14.1631345976206, -7.44312293810981, -13.659232946363, \n-14.3662707501614, -27.2214083735877, -26.4989517008752, -20.2532158746209, \n-16.0933689313776, -19.6279486411252, -24.8069011369877, -22.0056214440444, \n-29.3275314160508, -21.0915607354024, -15.4506982030606, -17.1888596091273, \n-14.4065922497805, -19.1936887941856, -22.4486141324742, -32.0861244449074, \n-38.5703735213339, -1.11588016608123, -22.6385761950299, -27.5463942927933, \n-19.2351021308233, -17.2523919104464, -15.9660402198707, -16.6151239509994, \n-17.5905550249759, -17.1189261637807, -20.3105234071245, -24.5899932128365, \n-27.8728618109544, -9.06959151393799, -13.3838718340658, -13.3239647340167, \n-16.8544070639438, -13.6133021690642, -13.844284896234, -13.0555202905566, \n-21.0711344316773, -24.5663225929403, -25.6627058291982, -9.92730492711103, \n-13.5123970256709, -13.4479380223842, -25.3175892532419, -20.3663848242142, \n-12.3783184238291, -26.9669256094679, -21.3550533902956, -19.2311785648368, \n-12.12589388241, -17.2851927689062, -17.2056498452786, -12.0989756380327, \n-14.5133755472469, -9.94262032128768, -13.2846949041791, -19.087030806812, \n-13.8956959770621, -12.9050283749618, -17.7270275685903, -25.8447766536674, \n-8.5604117486639, -27.7430419283806, -15.0369779244375, -11.7907345819372, \n-15.0503957564289, -17.2477197053615, -24.2660840351121, -12.2215697074135, \n-12.2139638983378, -17.1576724439119, -25.4911720372896, -13.7402636917601, \n-13.6322028089151, -16.0853379046166, -11.3195054785281, -11.2837519005058, \n-20.2395370029822, -13.6121801331113, -17.481805372071, -23.9190097715262, \n-19.8630218169043, -19.2818526660549, -20.2200189472849, -17.9510517454634, \n-17.0443990860108, -23.3313046123299, -12.5136837625897, -19.9422944490491, \n-12.9408023283035, -16.993478969472, -17.8541899807449, -20.7112775359068, \n-29.8445378850555, -29.1992686581605, -29.890353360709, -11.8518612151197, \n-16.7954371449659, -11.2765752207123, -3.66947937206674, -36.7173309439766, \n-21.2653269003169, -14.5418605565812, -15.5421410963363, -17.673059728576, \n-26.1214008782052, -11.6841301777076, -10.091873433442, -16.1438488149474, \n-22.759708726031, -23.6052525569139, -10.1301482775617, -27.3316116125345, \n-27.9361761888762, -24.9022010104666, -16.8984503066779, -17.168566794851, \n-20.6955015631713, -20.9015922640745, -19.2268316217409, -10.2442305486102, \n-14.7831076465121, -12.331168131805, -25.7069312743393, -25.2840901002212, \n-24.8329838194696, -14.2308501065325, -20.2660762319987, -7.25264715422714, \n-27.4323393421336, -24.0827063468469, -26.7388919568601, -7.16234074665264, \n-29.3722099304682, -5.36494581993441, -29.7726122597921, -16.3498123803319, \n-14.947221098028, -20.2705021858768, -23.826464189464, -11.3306726899315, \n-16.7162074450013, -8.78218209911362, -20.2143925835943, -16.9070097508033, \n-9.91576782681759, -24.6623147461223, -22.1018861731579, -18.0977369447858, \n-19.0858001997167, -25.322103151658, -10.1805370591922, -8.92425653810149, \n-15.7981647731615, -6.37930348863523, -15.0927676839556, -9.678241039001, \n-19.3866433827679, -15.3151703478302, -10.9413378084323, -15.7815767351405, \n-20.495921953424, -10.8771184017386, -9.63146498183541, -29.8143655409778, \n-9.2751304303012, -12.8094101813074, -15.6692630207119, -13.8944814769468, \n-20.6979011955722, -17.7103710580048, -22.0314600850626, -21.3047726337627, \n-21.9303746276157, -22.5723233928811, -11.4898690392797, -23.7144979076976, \n-11.4700180613984, -23.3820607936516, -9.72558334549485, -21.9227435435556, \n-18.875909549302, -16.7335448371558, -17.7620916318298, -11.3454796772693, \n-25.7015637320106, -9.49103593370955, -12.713943451795, -13.0821923216639, \n-28.1112330238472, -17.4960116050726, -28.3650458458477, -18.9187523541075, \n-20.4583175872276, -10.7343728755541, -22.817898414234, -9.22291956093941, \n-3.21520757784592, -6.83875977000923, -20.0350699915095, -24.7949490643848, \n-18.3077343838766, -16.4354076526742, -20.9034011135957, -17.8617050907272, \n-5.52400862550482, -23.0652133455717, -7.10795987294794, -30.9066959782526, \n-31.1405666486539, -2.99943763716487, -7.99769662277178, -20.5362642164782, \n-15.6595871356806, -18.0807372252372, -16.8695933804971, -17.3722825322138, \n-24.0718460462319, -10.3845416151838, -10.831550263235, -25.6391317404081, \n-16.1234797513355, -21.2041252804105, -16.6090465088048, -14.1258355684674, \n-11.8268033192755, -8.15093016586695, -8.43003745463717, -9.60357485627787, \n-16.8163473438756, -9.70489183513673, -18.5863843299365, -18.5863843299365, \n-18.9993217809744, -13.1195799438186, -31.6872890719648, -28.7780101272269, \n-4.63098114450975, -3.09020690373377, -17.5286939485361, -18.4966009463284, \n-19.4767253565063, -23.886431966291, -12.6533203823433, -20.1894885572913, \n-15.5739072539038, -12.0557415358004, -20.6127544645411, -2.20271484041754, \n-19.420071237133, -20.96581729421, -19.5515759032088, -10.0533139143347, \n-22.9340195143873, -9.30753605595542, -13.3463125943464, -24.6574519641038, \n-25.3419952621621, -23.013175100538, -18.7171379499705, -18.9977427223644, \n-18.4855860528928, -19.8242988982698, -14.2855653882859, -26.4847715906696, \n-31.3038658793165, 3.60305870516882, 3.25984955413693, 3.77089716731795, \n4.0665367737638, 4.0841133948452, 4.43999703951465, 3.90857328563036, \n4.11602424976695, 3.88393311147423, 3.81894304737432, 4.14520777052153, \n4.56849380395172, 3.35138949210994, 4.51118547206098, 3.26403221711901, \n3.73813707122993, 4.44245781959924, 3.92041798962343, 3.81443953825106, \n3.98031080751368, 4.16061718159363, 3.97947619493116, 3.82664980589381, \n3.32720129428223, 4.18343440565098, 3.10751755616776, 4.73725455044003, \n3.06391764285135, 4.76810762338679, 4.02465697178468, 4.59381327246591, \n4.13386257178554, 4.10697201416724, 3.71891898783607, 3.82200334714738, \n3.74147490519848, 3.9646331023433, 4.07501873717837, 4.64652319384033, \n4.75837370013278, 3.81730205341693, 3.62591031252335, 3.75387603254438, \n4.13112652382464, 4.02330224214028, 3.80877785769929, 4.02170848609397, \n4.12030204027052, 3.70471200927564, 3.59346538092296, 4.08285332855764, \n4.03110407894466, 3.65791621869424, 3.85370260299829, 3.83013950354542, \n3.17282620485108, 2.86634494728246, 4.61065291095681, 3.34089864524682, \n4.40662433361677, 4.24466723149086, 4.76649138591139, 4.18799440390311, \n4.21388471119534, 4.37310701371617, 4.36915410046918, 3.92211191928196, \n3.75696250748196, 3.4456300970102, 4.26421881466716, 3.8224305756471, \n4.02558055921984, 3.96185002373902, 4.13031016828508, 3.53352736874977, \n3.77942114722467, 3.92202804909952, 3.56393064871919, 4.45932092191076, \n3.46985357150085, 4.15421711728391, 4.14925080180892, 4.16378543353445, \n4.18751656050117, 3.84719807595607, 3.83115170934739, 4.1249601590002, \n4.19893936226912, 3.62736309936518, 3.39948592228338, 4.4520621285644, \n3.52601641161822, 3.47929117179649, 3.8787698412857, 3.69509206472536, \n3.69855531980161, 4.03578743652478, 4.03942074502794, 3.67049020074545, \n3.91549945817793, 4.25587832724794, 4.53731309244139, 3.68363621935307, \n3.57941435037482, 3.55999287549784, 2.75251527616069, 4.58616410903767, \n3.14080635881293, 4.29828415045234, 3.43784227130749, 4.66881583319964, \n3.42037511456325, 3.36988923153034, 3.46171963740721, 3.29279856800294, \n3.42392029373754, 3.45518881731721, 4.39947130332692, 3.84715308337389, \n3.92726696964507, 4.20109340303762, 4.56982816584126, 4.14519408862196, \n4.192756824662, 4.28994121692967, 4.10869120005474, 3.74526479549661, \n3.74530378207564, 4.12077395689429, 3.74041654837978, 3.99843450817279, \n3.66869023736966, 3.55149044289242, 4.27799952418142, 3.60629455576707, \n4.29248262159879, 3.51358746854572, 3.35062254278177, 4.34002367889091, \n3.8133009394145, 4.05770681580833, 3.87346622890454, 2.94494367767342, \n2.71353725939489, 2.70472095868446, 4.34541239095793, 3.5984102862554, \n4.44660635089729, 4.21230373262038, 3.32537255717654, 4.63990047042935, \n4.3691578922156, 3.50451321657865, 3.80368037958803, 3.94347387473075, \n3.87435452949243, 3.18704946860902, 3.72945274183021, 4.36394348652183, \n3.81694718440329, 3.3018221780991, 4.47603927711888, 3.83783273673807, \n3.86821917439673, 4.15121136785301, 4.01055627052846, 4.13233512994615, \n4.38312823870009, 3.55874536195232, 4.16191665610169, 4.35429863284715, \n3.67829592109664, 3.61193303746531, 3.37432980603241, 3.43477505140493, \n4.41466938387889, 4.47503303630026, 4.32900311210305, 3.65762939874014, \n3.89804497338952, 3.61083480285675, 4.27542586508362, 3.65032340376672, \n4.05661469715572, 4.27388336302097, 4.0334265943805, 3.989509521689, \n4.00650347371034, 3.70575829123339, 3.97618583196007, 3.70066827754793, \n4.12727458239893, 3.77912988215292, 3.76811542098318, 4.26878854910144, \n3.6587349347132, 3.73280236992106, 4.17278909539294, 4.16573378884593, \n4.27822943438581, 4.09747972891359, 4.20543942200633, 3.58109441843517, \n4.81777129363368, 5.04841835769503, 4.96759426663139, 4.23449647226153, \n3.63129778172415, 4.37778241024011, 3.82365307491001, 4.24111090530559, \n3.4839188093776, 3.893293054008, 4.02131344738329, 3.4103296608597, \n3.26181522369488, 3.83552387856685, 3.58859513775033, 3.58581717976817, \n4.04063671726716, 3.83476961246449, 3.94698882922335, 3.76422384341731, \n3.90723030247313, 4.03540822412317, 3.05450550972574, 4.90234591174166, \n3.95006300324355, 4.23711421521903, 2.48438801011097, 2.58407480444336, \n3.06575014969392, 3.81500277743022, 4.01551036652711, 3.73836664406022, \n4.08992970639238, 4.26258342169984, 4.18680824261362, 3.18980454113106, \n3.15682107919181, 3.67407465819817, 3.47670507349144, 3.60929824154636, \n4.22782742432955, 3.50890551364975, 3.84090159947298, 3.58317445261726, \n3.92067534690244, 3.94396632322703, 3.88352691411021, 3.94321719423503, \n4.06108349127505, 3.86492052471094, 4.46516551220431, 4.61486156690901, \n3.49353034664388, 4.42492904411682, 4.40346871296016, 3.59818946439035, \n3.37676703560917, 3.98424872446121, 3.23148360492893, 3.89425202785594, \n3.71750918335962, 4.28290197808189, 4.39355580369723, 3.46509297005513, \n4.48114869913596, 3.98009604672793, 3.65506042315504, 4.51550052156337, \n4.46377014359198, 4.46988641637628, 3.55631819179482, 3.98401134608564, \n4.58416166896304, 4.22057218455105, 3.14172061429537, 4.70501283531003, \n3.06767635387756, 4.50655323929601, 4.26117735631012, 3.85725725857079, \n3.91760668917671, 3.98025206208045, 4.12403650111816, 3.68009417598062, \n4.18525126998296, 3.71988075727537, 3.9564342987191, 3.79783441429572, \n4.08042114219177, 4.14521268434032, 4.39112353222398, 3.667658160004, \n4.18605970295618, 3.86666405313084, 3.8182240042872, 4.10717806339016, \n4.01797572472544, 3.76162437498418, 3.80490897216558, 3.83038796952208, \n3.66358401836873, 4.34151710965013, 3.78365494342228, 4.53963460750924, \n4.42395967759046, 4.9177224909809, 4.21531250643172, 3.79644719130171, \n3.8515991018809, 4.06481940670894, 3.97628542197232, 3.7752086485406, \n3.82450773948738, 4.05246559383323, 3.75954208861615, 3.67677928466273, \n3.16725104711265, 3.79735068151825, 4.15948391251713, 4.18172901048696, \n4.37566757542583, 3.61772620040561, 3.47799474227616, 3.93910591222913, \n3.64850271107653, 3.28269873864138, 3.91886136866215, 3.811982251741, \n4.14763970847443, 4.08260824192083, 4.25750304922684, 3.2993323415821, \n4.34192011600336, 3.32182125399734, 3.7340196952426, 3.97346757198346, \n4.23165051353228, 3.85558704019992, 3.86820924885034, 3.98050668191992, \n3.86349833544988, 4.33472513323622, 4.15466883396902, 3.61618115762637, \n3.91554382800884, 3.2250811835415, 4.27933102264807, 4.76162743544514, \n3.70625373752132, 4.27909339737738, 4.06351931842861, 4.01915201640227, \n4.09577239348687, 3.91891744648514, 3.37804577763193, 3.79971665917787, \n3.82654605794497, 3.95199118223426, 3.91917648808328, 3.76037850537059, \n4.31158792792858, 4.19421555355425, 3.67440008677796, 4.11450651665969, \n4.08766642466011, 4.18114114575361, 3.58637283496456, 4.18772631783469, \n3.8191955631151, 3.99692346249891, 4.08304821705343, 3.24912172414108, \n3.27629289822747, 4.49688639386091, 3.62726842142759, 3.83358868711933, \n4.00545818869841, 4.89569590200366, 4.18240132812475, 3.70185501321182, \n3.87202626098962, 3.3167033776674, 3.38553177676243, 4.08378892351319, \n4.21624486123658, 4.13330915418552, 3.7892974730757, 3.76586351148295, \n4.02863430825579, 3.58483897689689, 4.18824406170914, 4.46929420796995, \n3.96963326592699, 4.1521953084737, 3.40062435218193, 3.64543178099967, \n3.54333333051863, 4.31925293106918, 4.09527785652823, 3.78162749803385, \n3.20163321735917, 3.17513899475776, 4.86134648791013, 4.64606141355, \n3.15268745033186, 3.43444762483156, 4.36079629419891, 3.42329034197901, \n4.01911294507709, 3.86284302636654, 4.11015715646545, 4.45076944077761, \n3.40910761320895, 3.3990981798246, 4.47899697451157, 4.15575052604827, \n3.47735828993479, 3.58791655432172, 4.04871869584825, 3.83998345687492, \n3.83998345687492, 4.05929435116979, 4.08676947159335, 3.4811736620201, \n4.36407849845001, 3.699478181346, 3.65761854673866, 3.2919268754075, \n4.82415639998993, 3.21264274230307, 4.55880253155176, 4.18447465364737, \n3.68505165550569, 4.23439832857761, 4.34580265183531, 3.53381355194203, \n4.1103223250346, 4.69322494205783, 4.08626039128341, 3.87782533736503, \n3.96102500723391, 4.03461361679216, 3.68201865527213, 3.84212316482094, \n3.99393804447714, 3.57127870728494, 4.42128486165398, 3.15018824586016, \n3.41185033656727, 3.37274423651646, 3.43629233216659, 4.09225856867794, \n4.28751655660156, 4.01585115257583, 3.98894702398089, 3.70144148582365, \n4.29989259409346, 4.88751895369624, 4.19653820747598, 3.81564508136089, \n4.23771449282835, 3.79958172570725, 4.11163053969635, 3.97814717898527, \n3.80388732590425, 3.48901713886726, 4.39383956286689, 3.64007608368882, \n3.9473704415679, 3.75240556006571, 3.63977559630602, 3.71096759620824, \n4.67869191003801, 3.09838643366133, 4.98919387985143, 5.04707564759756, \n4.44749428426021, 3.91060593769553, 3.80085766026653, 3.91351532908652, \n4.1449281030007, 3.7599164973505, 4.73422269904208, 3.74291646910188, \n4.0387023858165, 3.65883072679595, 4.21800086633788, 3.85847412116362, \n3.9261817666584, 3.98851950018968, 3.98445218388148, 3.97960711287814, \n3.91443698006227, 3.62823611311966, 4.21941644351652, 3.88485290620818, \n4.40979085408225, 3.35335967567024, 4.3700505370415, 3.743007826306, \n3.48199452186317, 4.06460932382026, 3.89156037046634, 4.08869205190555, \n4.2298178502004, 4.46247088134697, 3.97205841905246, 4.05218971292576, \n3.68509705625638, 4.01825861481675, 3.61743394759489, 4.31964023854328, \n3.45245483216099, 4.26412788754827, 3.44163544195035, 4.11902725219863, \n3.90991725926051, 3.88126833992538, 3.94792637029687, 4.17981521549159, \n3.90210172335144, 4.40209438241783, 3.31311404327014, 3.76969569088373, \n4.19053336847512, 3.51694702379764, 3.63896241171808, 3.72634792238627, \n3.80367447763531, 3.39518747131265, 4.52251131875832, 3.62215107988215, \n4.49108150477091, 4.65623179319841, 3.21341849558804, 3.55020031286048, \n4.3925442688264, 3.73314464955069, 3.80928483745497, 4.08805054273943, \n3.7518046617695, 4.27595678930944, 4.40555282051983, 4.21735210000417, \n3.93222321694105, 4.11676439614779, 3.95768516383512, 3.84174374793833, \n3.58709863813187, 4.6739703841041, 3.56094446302278, 3.88584710232831, \n4.29226589754376, 3.57451911884458, 3.65475627000673, 3.93570895470268, \n3.94299590594495, 3.62969241547978, 4.37655020241332, 4.16325528273901, \n4.42892335364271, 3.97892459725956, 3.61436496942952, 4.29279320516308, \n3.94572701388699, 3.16562060430535, 3.41294033184377, 4.5235422124342, \n3.04247052637033, 4.05401650333036, 4.15143467085288, 3.86411403028485, \n4.36411814311821, 3.79828877987494, 3.1885631788741, 4.51160106486008, \n4.26465473626268, 3.49302829161402, 4.68008276500467, 3.23037821139591, \n3.27709408568649, 3.83933213166712, 4.39575233100484, 3.268906263372, \n3.79293464208384, 5.03400801298184, 2.88882554698266, 4.60179530127076, \n4.65338545917762, 4.2808423229737, 4.31743454466207, 4.15919481917588, \n4.25375481488424, 4.40911109892707, 3.8362048806145, 3.39283339725569, \n3.43097752843117, 4.21172417470632, 3.8762286458947, 3.61012351202815, \n4.45680129887143, 4.34376495299544, 3.62319755807064, 3.05410085348782, \n3.97750328035444, 3.6267538645297, 4.29076230713661, 4.19492492395283, \n3.48353670450254, 4.32811870596425, 3.71486017711118, 4.09577899715055, \n3.8946467763514, 4.17595215155007, 4.51023813368214, 4.80821545763384, \n4.20476129686688, 4.51017598345521, 3.45562164516832, 4.35108015197076, \n4.61810441953133, 3.38281703145683, 3.20249650237812, 3.98966790289438, \n3.57573650275433, 3.66467091338146, 3.804452604148, 2.49766015458599, \n3.93708528809135, 3.99629243734143, 3.96659178953722, 4.40681808441609, \n3.45351263690156, 4.12958288755817, 3.61610388134862, 4.46993681011369, \n4.04283468822521, 3.67290523966326, 4.22233173296999, 3.0727315867086, \n4.86477791320567, 4.35737832498007, 3.79646037152021, 3.63640523656162, \n4.70590785330097, 4.90242043689254, 3.29161044444806, 4.17208646238393, \n3.482831058062, 4.25290982945314, 4.19499395903581, 3.51271437448441, \n4.22049035824565, 3.68242378822975, 3.85378830496074, 3.77161062390677, \n4.27986873990058, 4.11626973233632, 3.8815457738807, 3.44080840763731, \n3.42555623844712, 4.34051766018861, 4.29957657740196, 4.17664621064231, \n3.91340226773339, 4.05265750317807, 3.9102943885226, 3.71494567577687, \n3.76971255496796, 4.32370428997579, 3.46390187431916, 4.51477785898302, \n4.44700997372099, 3.59921183946567, 3.92331501992861, 2.96397851585934, \n4.1263490187974, 3.74219507372501, 3.56910277719103, 3.70873838519586, \n3.91805989300322, 4.48434492921853, 4.63198086652431, 3.36198847400961, \n4.40622963227803, 3.78717514534219, 3.7577161264508, 4.24302816918378, \n3.61380246745939, 3.46641674226721, 3.66734993982275, 3.76680434122565, \n4.00479071780076, 3.71930284841201, 4.11104625561192, 4.57863162729783, \n3.9961134633558, 3.9961134633558, 3.3787691272158, 4.26686218159718, \n3.35389381915064, 4.27866629914805, 4.44256255536836, 4.04142904975089, \n3.26357153584287, 3.28495522606346, 3.35981137540741, 4.6002804109539, \n2.96523888469528, 3.34886936048996, 3.82590055704388, 4.53731360505614, \n4.53718807136882, 4.47866231317172, 3.29358033698332, 4.56535168693823, \n3.2476131594431, 3.41753959753221, 4.22446976902472, 3.21026484166562, \n4.23195934879338, 3.818437362124, 4.39506479368694, 3.35072142290591, \n3.26618513194371, 4.84043498508228, 4.2771244651653, 3.60633787522496, \n3.9408240918531, 3.96510742034985, 4.14487934877463, 3.82905749050948, \n4.02579918261575, 4.12108915259905, 3.55797160393231, 3.58495898513245, \n4.20011192049642, 3.65605585073478, 4.22719643374037, 3.89418063686834, \n3.89370015176318, 3.30557303136726, 4.50194471535014, 3.42520007896251, \n4.01428044952341, 3.78940980000318, 4.54902727274603, 4.31850110098976, \n3.61042471361951, 4.1799002202476, 3.70671249347454, 4.22116500648717, \n3.58120690291112, 4.34446966029933, 4.14130818601853, 4.36785559134877, \n3.15342844322111, 4.65481112766725, 2.81531669906079, 3.77950747580035, \n3.40644290030691, 3.38662984944824, 3.386806435322, 3.56178115204995, \n4.60651837482322, 5.00853081146055, 3.54341453848649, 3.43801433924203, \n3.68308417949129, 3.97637675117831, 3.99598256640842, 4.0495405729113, \n3.84215468607575, 3.72823751572052, 4.34928371243192, 3.38164303962939, \n3.46576349768291, 4.53021192697127, 3.7150432581584, 3.50083380053102, \n4.7966585709793, 3.09254112546162, 3.83686869897109, 4.03205757747277, \n3.2755903338482, 4.19443051776306, 3.64800364283145, 3.66592014635869, \n3.72855735768909, 4.18347674590986, 3.69892173707832, 4.1323763307928, \n3.46849715041743, 4.02802366884043, 4.12020671417536, 2.73436840395033, \n5.10695808352232, 2.97926492009443, 4.11010267249493, 3.86550418587887, \n3.90925268959273, 3.35501381552516, 3.77189636852394, 3.7760174374328, \n4.58021489835465, 3.63797530190731, 4.19105271017471, 3.96865297526816, \n3.82629196564535, 3.82629196564535, 4.04691322574564, 3.67667548439201, \n3.88217785970848, 3.89995253924501, 4.16751385066178, 3.76903763357237, \n3.90740026423929, 3.85065793398872, 3.72157797618968, 4.29886570653555, \n3.5848302947203, 3.51363865212128, 4.15931911115138, 4.00818146706878, \n3.72745486828611, 4.13565350239155, 4.17920717015263, 4.0071052954392, \n3.80690504957839, 2.7971691846488, 4.21949758393926, 3.42812899941503, \n3.18940740385543, 4.65761902579281, 4.58405842264627, 3.94772804991746, \n4.08678121130586, 3.43410075739674, 3.59804574833162, 4.13554490524799, \n3.71860044259352, 4.04329463780147, 3.5267203978456, 3.88093304719189, \n3.89037474631569, 4.25025086374317, 3.55106114121611, 3.91062893014266, \n3.76045507838762, 4.10633652843217, 4.09083767721188, 3.20531668276751, \n3.19539151305068, 3.55043236525493, 4.31334930545115, 4.09423539687522, \n3.49880378748177, 3.5797240397657, 4.22283405266762, 4.48287586322522, \n4.82647483185532, 4.52682258521592, 4.03763135452267, 3.89554123211477, \n3.68365489398938, 3.80624237803146, 4.35721558873085, 3.5011584304094, \n3.30816111361451, 2.73744487355526, 3.35701920732887, 3.92161319756741, \n4.35687002057495, 3.53986464678598, 4.52216183338525, 4.53083452343572, \n3.82316812048033, 4.11404161217971, 3.74848892590986, 3.58869924604491, \n4.51822122123523, 4.74764400395875, 3.47485054013516, 4.18327014997734, \n3.87588281252085, 3.68032907541167, 4.29081297307323, 4.06126008419348, \n3.97611573444286, 3.84397750200143, 4.06546709390467, 4.96218165356209, \n3.96627616310653, 3.82527396296291, 4.11036367288086, 4.31433179479447, \n3.96407160642442, 3.99617503263066, 3.29535550758608, 2.96877092089901, \n3.3759509314332, 3.22915801718546, 3.49951320519247, 3.72865355892048, \n2.73465306070676, 4.74062416861807, 5.05346726594536, 4.15246327551295, \n4.10521500416162, 3.51170144889135, 3.50791166177424, 4.45999814967125, \n4.10065008738162, 3.95925347666616, 4.12774704662325, 4.10149039120826, \n3.43900783274523, 4.54409368896631, 4.58446871726154, 4.19702467152176, \n3.82747502034345, 3.98398428120409, 4.02379638283272, 3.85114912562626, \n3.54500780114202, 3.99437618841384, 4.22748819385869, 4.41679800948175, \n4.79711840801113, 2.41825829399033, 3.96154117132616, 4.00704019393019, \n4.19208177867309, 3.76404171655835, 3.7702805318858, 3.8326365943658, \n4.00294025419209, 3.76755283132537, 3.83787317029893, 3.94367056255399, \n3.96994938294631, 3.84322480407906, 4.48514192768068, 4.69525179246114, \n3.33294247880591, 3.669483858922, 4.51070620378586, 4.54080201812431, \n4.60982578905016, 4.16679242855924, 3.86913809359775, 3.63151409145059, \n3.86302497672426, 3.78440778423711, 4.44751013854426, 3.26460236089343, \n3.53985846508355, 3.79204457191667, 4.15428926458178, 3.4977724789702, \n4.18915369697278, 3.59565152385804, 2.99971032438619, 4.13293367141867, \n4.20522491467429, 3.63288891339363, 4.23022088090926, 4.0926887262619, \n4.38040128126776, 3.42438677699751, 4.07198978407673, 3.85983976680087, \n4.53036807378524, 4.43835962518877, 3.00530724016925, 3.72575000852404, \n3.63919458897153, 4.22018729420876, 4.61279497021519, 3.33146782255904, \n3.33146782255904, 4.20024853602732, 4.2109158046356, 3.80881882141779, \n4.29882313181659, 4.04801471461934, 3.81548929477101, 3.46943307624541, \n4.33663178080762, 3.63126578721455, 3.33092348281212, 4.33012176949604, \n3.64617325928376, 4.23807240363887, 3.77502110801814, 3.72814809653022, \n4.07490876440541, 3.87022145474807, 3.9472257155841, 3.93250530614808, \n3.72668590938195, 4.59767250093165, 3.02396033931884, 4.67689995907234, \n3.63481969295276, 3.86905677750127, 3.24860932725384, 3.51352019769726, \n3.46712603689445, 3.76154768945299, 4.04303890290776, 4.26828841806383, \n3.57213196458408, 3.40167067516115, 4.44710950066844, 4.13870816726702, \n3.75741708217589, 4.27811581327976, 3.70348692232331, 3.64295130351514, \n4.16996416470764, 4.18847889932174, 3.76233311678652, 3.47258755987681, \n4.03286917941632, 3.85413173200743, 4.00621385621621, 4.12004402490192, \n4.51233421047726, 4.40963411716005, 2.8215625679328, 3.97256013853475, \n4.0957775221282, 4.17789480764912, 3.71156970003374, 4.05734161274861, \n3.90524125228121, 3.44609342117885, 3.60450098743458, 4.1911216572485, \n4.10970377811061, 3.48792934223407, 4.28152625390871, 3.42861721415382, \n4.39473508895371, 3.70360335676619, 3.49122815869811, 4.09550406467716, \n3.94663071200624, 3.88136252575637, 3.98137536674637, 4.11972621334256, \n3.63057994888238, 4.50480915491109, 3.2082702869895, 4.45093211506835, \n3.25488891787632, 4.39789404902141, 3.94833737934761, 4.00362652269344, \n4.03858234242434, 3.8772418662489, 3.79248581282554, 3.99980409445079, \n3.77374466862882, 3.38943014958376, 3.42955228316164, 3.7713560618167, \n3.49971030903591, 3.22008273108409, 3.2136667375845, 3.33552209498082, \n4.58159878302198, 4.47741899873838, 3.83198112629868, 3.75639313404033, \n4.03223036591914, 3.68513187985073, 4.01228252123701, 3.44023482143954, \n3.11122191426878, 2.88291928906026, 4.39050144192986, 4.66721106057145, \n4.53810060018132, 4.06398540234055, 3.46118955369245, 3.79200124317691, \n4.19718389954272, 3.60925866131273, 3.6752605293646, 4.12917358249837, \n3.84196188495089, 3.68490293566789, 4.21654073927108, 3.787438215908, \n3.72022982084319, 4.17354349140555, 4.09391198171803, 3.3129494965943, \n3.24080351462604, 3.4183533545098, 3.40708220083796, 3.83804690441572, \n4.28106524920663, 3.41021402314823, 4.17843531200455, 4.5676212130819, \n4.06545101146073, 3.65972622913146, 3.57320741554575, 3.50780664167118, \n4.29921375448913, 4.15908936447049, 4.02893027544945, 4.03568362211886, \n4.39243480688388, 3.67031864713977, 4.12017908874946, 3.7447865149146, \n3.47512855648693, 4.19555008910915, 4.47500607487733, 3.33937498690641, \n3.07894150279662, 2.7549155499378, 2.8483097075935, 4.67573531779211, \n3.18231688884635, 4.44054978507456, 4.25693786916508, 3.21459403978574, \n3.50376333856479, 3.50219051768314, 4.71482766924906, 3.62745796225926, \n3.72018975814195, 3.64602838892026, 3.86941177888481, 3.6933752152633, \n4.74287579924797, 3.03555942251677, 3.35051315823188, 3.60500025015603, \n3.70486435529685, 3.82199368962374, 3.75364691327412, 2.94439419965978, \n4.33186561337932, 4.74193237596359, 4.00837468637663, 4.02055636613126, \n3.75989678618122, 4.01086936156258, 4.38719912498004, 3.72091698533148, \n3.95003178645814, 4.27183785229042, 4.47712387867749, 3.29649312037875, \n3.31199421738286, 3.67463713962838, 4.01094786217438, 3.85456843851914, \n4.01353544750523, 4.44976510338097, 4.32496954419156, 4.1580897519691, \n4.08561683578973, 4.0796421289849, 4.33525402875026, 4.29001411952648, \n3.45830837924236, 4.11639652046627, 4.09777684827968, 4.01609116749964, \n3.81338011147626, 4.08476448064534, 3.6498435603594, 3.93032147652369, \n3.83561349323355, 4.13577431289678, 4.02344432191203, 3.32190293702413, \n2.63669577623076, 3.08751671365157, 3.89839355986153, 3.82004046801299, \n3.95507304832087, 3.64993639848099, 3.81039141733556, 4.15833669749905, \n4.31888110856263, 3.83350222414076, 3.69011982433159, 4.11516462466681, \n4.2059150018579, 3.77085455345854, 3.44178451912791, 3.66698352125775, \n4.20444206897695, 4.20611443079802, 3.57866083154973, 3.95518217192069, \n4.44393798073077, 3.25408630008109, 4.1705663535172, 3.29650337857638, \n4.33816900717871, 4.19646134717376, 3.57803364305444, 4.17361107404691, \n4.34026642947103, 4.28119892875219, 3.80852232145803, 4.11609630483369, \n4.1848449818373, 3.14326180458355, 3.20917341648323, 4.83064099920522, \n3.67746512917127, 4.15201588066957, 4.38179160056005, 4.10916858901554, \n3.83394759367535, 4.00710501512398, 4.36392087799211, 4.82600931270398, \n4.78442671440282, 4.65894176015762, 4.45088628952719, 3.91687587631724, \n4.09009547119549, 3.80097723487615, 3.97600831610816, 3.40473225903174, \n3.47414150911953, 3.00372580054893, 3.82717514852732, 4.14985098684939, \n4.08240792559242, 3.62037763540813, 4.03373222527694, 4.53343230130708, \n3.45760234475271, 4.43027963986452, 4.05358879317173, 3.62777737108314, \n4.20708475339181, 3.97322869603335, 3.96225770224748, 3.82127854673571, \n3.8832900311941, 3.53700400002559, 4.08059673206248, 4.48008086255997, \n3.97903543877179, 4.56206392802605, 3.36092547782332, 4.49260061840715, \n3.44300266518561, 3.93513187848618, 3.82239937935861, 3.84925811152196, \n4.14739993473362, 4.38193679366652, 3.31913518708031, 3.32046609841104, \n3.16427068767763, 4.06431293037326, 3.88737725562477, 3.67005469418112, \n4.12176257245978, 3.74137340337138, 4.39605877327088, 4.45603153026112, \n4.34118848866303, 3.92446090038318, 4.37929549381205, 3.93786905342512, \n4.04450485045081, 4.2749542634694, 4.05312374537827, 5.41579267760473, \n5.03300458216146, 4.60962898357659, 4.53315474821056, 4.87950447364343, \n4.74197423562861, 4.23233967025648, 3.23274355985351, 4.82728337732001, \n4.94888981211886, 3.4588687905223, 3.82806330440886, 4.06389152131321, \n4.13248767625678, 3.94965142096629, 3.70779231360899, 3.89150373769081, \n3.94758903620706, 4.13968985089414, 3.76004033002879, 4.17437543296234, \n3.48032651665427, 3.60937724853641, 4.29593549877122, 3.4808126767688, \n4.08873046641085, 4.31621625684598, 3.50457753851928, 3.54981380018491, \n3.6542467938898, 3.5512645624039, 3.53267261903519, 3.8313532436575, \n4.43754841490855, 3.33604679096959, 4.49948428519714, 3.74293870672399, \n3.64897627003106, 4.4109664818103, 3.44129415285482, 4.06580169228634, \n3.67654905076853, 3.53881194682695, 3.61415512163716, 3.83889702057223, \n4.30109405989917, 4.2148703244763, 3.66520872944266, 3.59495995408076, \n4.13025844563558, 3.70504202735773, 4.14965658573189, 3.71644226072482, \n3.92547502588339, 3.69807977864959, 4.14498503849325, 4.56515645265934, \n3.811077457943, 4.28328959614179, 4.09036183395499, 4.84538301177184, \n4.23643824371345, 3.21017581298397, 3.92094727294767, 3.80824594074207, \n4.06927959905197, 3.84288270949827, 3.32811228461758, 3.25221650567465, \n4.41014034740433, 3.16303124724972, 3.40903160581301, 4.57880837267719, \n4.15955775211223, 3.71401010434161, 3.90336309477989, 4.50623650451735, \n3.79094865197606, 4.11491267304108, 4.40046760770183, 4.48850954565608, \n4.49757450948277, 3.56208348817452, 4.01025355213132, 4.57995708711582, \n4.39918595649801, 4.45226161121413, 3.1787076614763, 4.0798691203931, \n4.19077216468312, 3.78767894397363, 4.06819844490069, 3.46413576595445, \n4.04048049266254, 3.81944953070524, 4.19160244509193, 3.68889178696767, \n3.94340989667789, 3.94281500733135, 4.25452825662343, 4.12866222757645, \n4.0089076601196, 4.21676023289604, 4.21323320815575, 4.49322540825552, \n4.3185170842097, 3.50607973198803, 4.51247984257794, 3.4399398863217, \n3.04816997031661, 3.33273192415481, 3.11533713547036, 4.01516334242801, \n3.71591863633526, 3.31651224054409, 4.70799642335501, 3.87927170985336, \n4.26251314157124, 4.420981380033, 3.67849713870165, 4.48903085120889, \n4.17725965094656, 3.67991461378153, 3.85251390326943, 4.14895344915532, \n4.01742722409525, 4.03122176279173, 3.81840607492907, 4.09380280164483, \n4.06912519563381, 4.15342440169594, 4.23102136498578, 4.38896696356085, \n3.57005823365361, 3.84778816746977, 4.1164841186861, 3.49459577559411, \n3.60233170083864, 4.23725932592338, 4.46962351765327, 4.16683454365909, \n4.27101604137138, 3.33425492539221, 4.46079479428788, 3.70905062625245, \n3.07860365969063, 4.64494098748558, 4.89534880783652, 3.65945339745044, \n3.66565366973536, 4.35998738997678, 3.53614128833769, 3.50068694239115, \n4.53354936939487, 3.56345426300303, 2.83560914764798, 3.73960868370466, \n4.00724050378592, 3.86312859613421, 4.14594703760535, 3.84372309427365, \n3.3745636133161, 3.82504367263283, 3.09520242422, 3.67977212934108, \n3.75183944371262, 3.76068265823924, 3.53405047364108, 3.52689350795614, \n3.8865986121379, 4.06189283328487, 3.79504319895142, 4.07981121064787, \n4.37813547737875, 3.77890244674292, 3.73527407393654, 4.09647013016142, \n4.26645459469453, 3.91911295153, 5.00822809585394, 4.5043917885487, \n4.3172763995236, 4.50443104686707, 4.3287925793512, 3.73599745721378, \n3.81039532835339, 4.19865239219761, 3.75434412952041, 4.10611317873046, \n3.86879451692313, 4.22421159332411, 3.60677781950828, 4.17895479713347, \n3.66901866424709, 3.72140084270548, 4.01503631434558, 3.56968333015248, \n3.71244563213789, 3.51955438063993, 3.60498964352174, 4.48304135888492, \n4.26110564895889, 3.53814642454131, 3.77132348377502, 3.77768538665312, \n3.64995014394232, 3.89321720227436, 4.08351006730272, 4.07079924925346, \n3.89336293285412, 3.87703554101084, 4.34977955096452, 3.36273586737964, \n3.50715336858032, 4.03609997857611, 3.65959777376206, 3.50009487646121, \n3.05164380467459, 4.01493852206421, 3.83545132087315, 4.32691212629298, \n3.63693567419529, 3.7087941265826, 3.75747251481036, 3.68428651282921, \n3.68675980901413, 4.26805867851315, 3.59288915006127, 3.7183251532801, \n3.62609776477589, 3.87589941202524, 3.75443523112202, 3.54768032807557, \n3.55553989787763, 3.62284928112971, 3.19039758952942, 4.88078016741933, \n4.59284644860796, 3.49800116470428, 3.81862231313476, 4.46475114994674, \n3.6178319492557, 3.34622455392623, 3.83069046732942, 3.94245521298004, \n3.81779114335579, 3.5538132287886, 3.47280797694312, 4.3278128640821, \n3.65849392774186, 3.60199295507302, 3.3515119968492, 3.79068167740733, \n3.53798120091224, 4.33060071532424, 4.35230649173959, 3.65965873638774, \n4.01572984245702, 4.14536669522154, 3.902996561333, 3.99886634224832, \n3.92112901736926, 3.95730686218803, 3.76781739579573, 4.46006816245568, \n4.9084389274498, 3.6565118035478, 4.10473279294949, 4.21386490142046, \n4.35719667404184, 4.03691787171662, 3.77485238061612, 3.75635826512915, \n3.95330778875167, 4.18315598638862, 4.11522585138337, 4.02517550035174, \n4.2408116874932, 3.33642426795083, 4.35667462171606, 3.51333205616993, \n4.02826105419164, 3.26464698469345, 3.07331486393616, 4.72196071352365, \n4.40836865814448, 3.65678416895048, 4.28233676929719, 4.28283204654023, \n4.38365024821708, 3.83685458901064, 4.45523128957342, 4.19914319453036, \n3.61935764029742, 4.18974904863838, 3.94940570924188, 4.61385239101739, \n4.44786592517857, 3.34596998138929, 4.53621486169957, 3.59713782284546, \n3.91731893696691, 4.07113391132905, 3.80735330377766, 3.20407759972395, \n4.90216116692561, 3.87378661151939, 4.34340694017842, 4.24830649038528, \n3.41454668117501, 3.37434194093222, 3.57236943770495, 3.78275465425435, \n4.05913307191521, 3.77959413841342, 4.38261915975837, 3.38974730187853, \n3.33187892787813, 3.98605852199655, 3.8669619463809, 3.79517780783032, \n3.63968940290978, 4.1317791595006, 4.19880270906024, 4.08545370618152, \n4.17694647137774, 4.46002794686925, 4.12623604534664, 4.08497145953387, \n4.48768827629779, 3.2910937445205, 3.31353759034565, 4.55516094713846, \n5.0610867209316, 4.55864076173709, 4.41976375190733, 3.53079626509741, \n4.41677488431036, 3.65388414757649, 4.1682166902739, 3.85167120715851, \n3.9960433228751, 4.27952747551093, 4.32375322287749, 3.54023859855324, \n3.83540825446552, 3.81023482477365, 3.56908152006147, 4.34509894063303, \n4.61313287722586, 3.89394234680364, 3.96739473205756, 3.84141471648739, \n4.02345278309989, 3.70886399409839, 3.92992130394907, 4.49747591149145, \n3.28189049787083, 4.55884015311526, 3.52338341153784, 4.24885936594893, \n4.29814241848203, 3.66849021738681, 3.76155971907432, 3.62902041744512, \n4.04977048922793, 4.41365581679677, 4.24963503704322, 3.76660188579456, \n3.82604328262086, 3.48377422003566, 3.77480792493872, 4.36782996591408, \n3.85565749061976, 3.90306310474077, 3.66738299760879, 3.83993506911815, \n4.12813744757357, 4.23423597243681, 3.47317210281949, 4.10693075917653, \n3.51771352858076, 4.40475081627514, 3.36395846538475, 3.24060295785946, \n3.43698679058777, 3.85321871216056, 3.65893413613686, 4.25616067082493, \n4.09104039050575, 3.65430747986834, 4.31569894925708, 4.08885490434738, \n3.83905218569481, 4.14204453840716, 3.997678970957, 4.25811422972131, \n3.92311293069272, 4.49234565384531, 4.26369185829497, 4.13342910928277, \n4.34486262951991, 3.76424156094976, 4.33956593796248, 4.44811170148864, \n3.64809822814771, 4.11801404776163, 4.23761489479645, 3.83146898332362, \n3.91471142042391, 3.78971856411389, 4.02478067528722, 4.02354253734924, \n4.29712768142802, 3.62119298341793, 3.86724807424797, 3.69346330657067, \n3.8569048228228, 4.20217847803858, 4.19595058648474, 3.65872478793441, \n4.35821774691915, 4.09408357856991, 3.73148039835649, 3.49571696562194, \n4.07446423166539, 4.15941511141854, 4.62726596138645, 4.52568993063718, \n4.83597772077405, 4.16048813997736, 3.83714304099047, 3.82621858986901, \n4.01204417234888, 3.40385050281803, 4.38072305302504, 4.67286478575837, \n3.73668403764866, 4.013465334892, 3.74416809512208, 3.95596133993658, \n4.13274747081598, 3.92680493822278, 3.69559172795818, 3.90502476675777, \n3.85324615902202, 3.95991704200037, 4.15104264473416, 4.32627516375235, \n3.57743497242973, 2.99524029714327, 4.96519173451366, 4.86323161262331, \n4.34344563613737, 3.9653381474479, 4.03266443226244, 3.24261095163823, \n4.59147402832552, 3.68094983117739, 3.85544036319767, 4.10795904973549, \n4.27204049543865, 3.52758859953711, 3.57768093489864, 4.00871808509963, \n3.72586006591007, 3.62941411578486, 4.4526068538032, 3.75563934325587, \n3.4007138922584, 3.77204207808871, 3.08222167828527, 3.43321345050762, \n3.3603365329181, 4.1431605586497, 3.56131442503823, 4.13416557560087, \n3.98139753592648, 3.90692501718539, 3.71751456008843, 4.76018721593364, \n4.1880278465292, 3.63837707499103, 4.24087433878413, 3.27153194222493, \n3.06733501958024, 3.50735627884452, 4.59668645463806, 3.80478413453237, \n3.46520472003118, 4.36157626057291, 3.70564073362928, 4.14370951298148, \n3.89849250394998, 3.65702203533952, 4.10626765549901, 3.73524506945267, \n4.34257674999684, 3.98638009067485, 3.8769453184704, 3.73813137886309, \n3.42432587727555, 3.46083666815705, 4.44421013025441, 3.64887558282476, \n4.13120077388698, 4.54729713807841, 3.39680734897062, 4.19567071256622, \n4.07429466185387, 3.90979850178676, 3.74499403089086, 3.96199806379071, \n3.95844216762712, 4.04522023744775, 3.77074926743248, 3.99690753782704, \n4.29336506462815, 3.97444971729458, 4.20234922782608, 3.74999054035856, \n3.83716619906545, 3.94945190790985, 4.22883171785117, 3.31796848610147, \n4.56153518453779, 3.37893863564203, 4.46471263192865, 3.59893765511882, \n4.04036172935471, 3.70239748574203, 4.03538187552404, 3.83328960452268, \n3.91013868758689, 4.28391368367554, 3.50366261411449, 3.47767437126887, \n3.9423599454719, 3.95870268903385, 3.95183598170812, 4.25873832733142, \n3.53524594265224, 3.69161483712725, 4.04295455448054, 3.89240381215512, \n3.76957498396107, 4.56616285998459, 3.59820325796406, 4.35266619886661, \n3.62022376514289, 3.0367447844031, 4.20671255111295, 4.46364768703918, \n4.59188815798845, 5.14865085003697, 4.71858938825852, 3.79890138589757, \n3.46036923765544, 4.88054355385999, 4.79003084293681, 3.12432346765279, \n2.9012946624469, 4.91768775189762, 4.83278800654614, 3.21578190620882, \n3.77651052429143, 4.47182210051789, 3.48855892260791, 4.01041988551705, \n4.02292063439216, 4.1584084756986, 3.57772787267836, 3.93469570440788, \n3.69658906018999, 3.80631863039251, 4.45774794139213, 4.16227721303511, \n3.72049948272508, 3.69014087660468, 3.44880603511606, 3.04864008643734, \n4.62513808476765, 4.43130142654721, 3.32413509939426, 3.32413509939426, \n3.93483102459197, 4.28350838968799, 3.48694639739767, 3.54321100932976, \n4.13465423004771, 4.2009831422723, 4.06657854098926, 3.23716308973396, \n3.24762372540435, 4.6970514212573, 4.55832717770005, 4.56710263510469, \n4.35987994577066, 4.29288287550877, 4.30279047410006, 4.06395877317807, \n3.88468936515942, 3.82883486100132, 3.99727019891307, 3.64865408657594, \n3.60726643221732, 4.35084324033504, 3.35025063931122, 3.65101278188881, \n3.96462134406813, 3.79475284604765, 4.10504603682376, 4.56557567670109, \n3.96900080595624, 3.99850242525814, 3.63588769179108, 4.25583034511046, \n4.27011011717769, 4.22453192707431, 3.99325553713168, 4.33930051438788, \n3.5144083776876, 3.64583152783418, 4.23559891576852, 3.76917334560466, \n4.20255098738743, 4.0289910179067, 4.27653671271706, 5.04599799663609, \n4.66972484733461, 4.44216676168523, 4.00282247332455, 4.23839075025697, \n3.67332249586613, 4.47944755584442, 3.96824862735877, 3.79347391860994, \n4.2223782830723, 4.54376088864076, 3.92280850211501, 3.31056079096957, \n4.60254180705889, 3.39315056854191, 4.63761696724552, 4.67185245422385, \n3.22413273783633, 3.53710186947713, 3.93067350415727, 4.20638338706521, \n4.43701144130693, 4.401552179369, 4.18471409661505, 4.24937504343851, \n3.66688653920728, 4.4474178894894, 4.22164769397885, 4.16585029897885, \n4.92233011454264, 4.18854424928442, 3.7074696365026, 4.00739794322649, \n3.94115302878875, 4.1153082212286, 3.57718397930669, 4.00550735567351, \n4.5325340434057, 3.8805089160745, 4.38252859937049, 4.16243288523297, \n3.60756323479949, 3.90297741671645, 3.67858630884412, 3.62469170958055, \n3.48615827733788, 3.56685846780701, 3.93594968734206, 3.88923059375403, \n3.17340030162586, 3.91561114522528, 4.32695407729471, 3.81460711179207, \n4.21144666576801, 4.347984092514, 4.5438440764497, 3.69366819729053, \n3.55993291164568, 4.40912405959084, 4.52671869145724, 4.00485968559189, \n3.90202121946231, 3.70279181740849, 3.44736330477417, 3.2443601469798, \n3.31466580667959, 4.06340253455352, 4.19210265230147, 4.2811696716865, \n3.42841320332355, 4.63742253756211, 3.47195790920941, 4.6591261571317, \n3.82658884432739, 4.12242367626528, 4.158486801911, 3.869888351208, \n4.04864736983157, 3.69351207301949, 4.10481592425196, 4.51810904824034, \n3.25017581548967, 4.16522696077572, 4.0946582162942, 3.82655659069652, \n3.63579244829841, 4.13603979103326, 3.38582157198018, 4.14798477578648, \n3.7896689639496, 3.55262933481142, 4.11124270315603, 3.81631814117835, \n3.91820015585126, 3.90270517328402, 3.20763950066511, 3.43439057807497, \n4.063732320909, 4.36578143874177, 3.48807295376306, 4.5712037714533, \n4.03632729116248, 4.00670372919854, 4.17593573570132, 4.37182368869215, \n3.7434317872159, 4.37809810768336, 3.7690782065864, 3.89958171483977, \n4.15089576888987, 3.5195633229146, 3.71416104688546, 3.76103553832904, \n3.76597235318655, 3.63797630745685, 4.28844651934644, 2.8953008156334, \n3.00979453778199, 3.47937566185447, 3.44387428817238, 3.82683653187472, \n3.72672533458852, 3.81763138462977, 4.35208530244753, 3.99369841414043, \n3.84249836378992, 3.82555008530382, 4.08821930992027, 3.99975788026012, \n3.92221076828633, 4.19388010206879, 4.20537773753925, 3.88833293461795, \n4.47995199968034, 3.30543158783341, 3.7973906028746, 4.09048342442071, \n3.92611175997113, 3.92187233702865, 3.74449154170425, 3.7911566909907, \n4.25896430967808, 3.61919700172051, 4.32533685732401, 3.54038498672123, \n3.92185689295435, 3.78548597965596, 3.64114511765398, 3.55237874632098, \n3.28045356160713, 3.49609850480513, 4.20753515172769, 4.36740697132163, \n4.46312940905154, 4.17768765567183, 4.2476805292226, 4.41428596140289, \n4.29426112533238, 3.72314284655396, 4.11446999090925, 4.42346934655301, \n3.30168729041333, 3.28859423409285, 4.02126258442196, 3.67172495293828, \n3.81759478353719, 4.1308140295787, 4.26032589554611, 3.5882515562696, \n3.72252299039436, 4.1946351346758, 3.71291710279543, 3.75200952469165, \n4.15123370865458, 3.92277722302741, 3.98338744371892, 3.08905680133645, \n3.03104048458668, 4.39587729162223, 3.55126112708757, 4.32923685958475, \n3.43486977028834, 4.09326364605259, 3.75282510479996, 3.58053730418505, \n3.97552526979278, 4.29317924678287, 4.16622815508414, 3.85932012347563, \n3.3306021637033, 4.29763298858482, 3.27166078325488, 3.19424769942772, \n3.68695832821513, 4.12164486529592, 2.96642781412812, 4.01224677150385, \n3.32603829925916, 3.51909238527686, 3.80247031282104, 3.97042827922671, \n4.53815563634479, 3.66282348229213, 3.81172428875133, 3.92337626185298, \n3.61336187528013, 4.29574008946904, 4.57756623629928, 3.63562638251144, \n3.92944751441127, 3.77272355129448, 3.80188132612805, 3.8822640832399, \n4.0001424883762, 3.85388120917653, 4.05239198925034, 3.92572148175668, \n4.13656494019919, 3.25363011809072, 3.19242035619191, 3.26715037907221, \n4.23247718762039, 3.49279562967763, 4.41480747530496, 3.92326484069622, \n3.92235328014642, 3.92176997908844, 3.92839656049468, 3.84013800411448, \n4.15712017190313, 3.69280722084365, 3.66308639789318, 3.94337199740741, \n4.88311140895174, 4.89603925047017, 3.74928360884605, 3.8587197702639, \n3.64512228209959, 3.66756956217106, 3.56459695767759, 4.30059556910916, \n3.31908085709452, 4.30871387871603, 4.10346708452776, 3.96163028634274, \n3.66528310389567, 3.89917752531119, 3.92144480590524, 4.2656827165027, \n4.3015661109112, 3.35276230821779, 3.24862852093978, 3.96124651835814, \n3.74408335500932, 4.19679366940992, 3.7711669736642, 3.60509270442822, \n3.6821575426988, 4.42491657466079, 3.42592609657594, 3.82271487676224, \n3.52097609158305, 3.6024747146155, 4.00126180262454, 3.59314612118281, \n4.21164543958345, 3.75878205927702, 3.86351262122271, 3.77065455778171, \n4.1445210010546, 3.53246677804892, 5.06193281415175, 3.68373664525318, \n3.67200489902025, 4.4506773364662, 4.15941718889023, 4.28969190571694, \n3.2384366728772, 4.33696406685126, 3.54809918711327, 4.32299608790685, \n4.26405389096446, 4.18288338695494, 3.94347690872763, 4.03804802415146, \n3.70516049012736, 3.76948484929106, 4.04786992750406, 4.38046239102112, \n3.44881208272007, 4.51452668139719, 3.96435916862474, 4.09422046765356, \n3.46379820102461, 3.94046201674832, 3.97352626676636, 3.82358167336014, \n4.14288397869884, 3.48670169927785, 4.25928195476274, 4.17167454417573, \n3.75806861655175, 3.68064115136042, 4.10726848066482, 4.45044126723589, \n3.326615619793, 3.6695273058989, 3.98351535671407, 3.9918657011448, \n3.99172269901519, 3.85253811939298, 4.26072347113297, 4.65557916093779, \n3.62612246430093, 4.36677809305333, 3.61934406181931, 4.07301034450517, \n4.56093342747831, 4.24588855937749, 3.97994709940635, 3.26553828304837, \n4.54074511408647, 4.52617565413416, 4.5742120563255, 3.51976084338138, \n4.68239791161678, 4.0031061401135, 4.15148331376701, 4.45537927364925, \n4.75241016665687, 3.63325942906929, 4.11678728244889, 3.33078023122799, \n4.58459538261107, 3.77888405296893, 3.64436550372587, 4.34182376369199, \n3.61748386758533, 3.6437607891738, 3.69240443316036, 4.00237201711071, \n4.00237201711071, 3.85837068742642, 3.7662463542579, 4.0663790744511, \n4.05181425564805, 3.77565945786724, 4.05710541913368, 3.87081435323467, \n3.73691082641965, 4.1961269589167, 3.60688175812892, 4.0000289233564, \n3.25258564361862, 4.36575825325937, 4.49623282386831, 3.72746214192541, \n4.03800951935348, 3.85499665086682, 3.5254064884425, 3.42976317213485, \n4.39016395550929, 3.58682964433974, 4.25444927924902, 3.12554563794595, \n4.66716576049148, 4.31958832173847, 4.30927152215572, 3.80915659541328, \n3.75731848197252, 4.11800111894653, 3.35120687160473, 3.67242021914466, \n3.85477429215145, 4.0784127885828, 4.03904791607413, 4.70944046764058, \n3.64312640513592, 2.98886960922768, 2.82830950647202, 4.28071953054993, \n4.3253115017142, 4.07325714275503, 3.70098900198324, 3.70830668094219, \n4.28419413767244, 3.34896398542263, 4.55931828568057, 3.81800031550924, \n4.55240916562572, 4.49610745370383, 4.95068270558571, 3.48917225209187, \n4.16672004125073, 3.95304751428878, 4.06741572953383, 4.04711402860489, \n4.20974113620592, 3.60802040664166, 4.21473544636133, 3.71391044168206, \n3.60313701045425, 3.62412867638703, 4.31910792571479, 4.28251417327614, \n3.62193501998037, 4.14036248967411, 3.76905862085626, 3.95136351635939, \n3.8788758620269, 4.00505716606736, 3.43791789070309, 3.31733889294812, \n3.59661667633463, 4.31455227647853, 3.58073710749163, 4.13019701052556, \n4.2866653215476, 4.26628215652962, 3.84310944568188, 3.84228059110013, \n3.38286407958804, 4.17143027094809, 4.2495843158266, 3.29751512629864, \n3.708729262805, 3.50742074169508, 4.52950623586779, 3.4778617331221, \n4.13218657368012, 3.94159418394601, 3.98626697347968, 3.48779947595262, \n4.44990396104764, 4.49306527528766, 3.7530270000394, 3.95879144430808, \n3.84600562110907, 3.68249739964372, 4.16281515118069, 3.71597158740655, \n4.30784880738275, 4.10348979484228, 3.82012607358355, 3.69138110703318, \n3.9606391359943, 3.71208741363162, 4.46427775752904, 3.74756659050652, \n3.8026714663555, 4.00578895822807, 3.86634926111505, 3.97864602607978, \n2.94424761660665, 4.954994980723, 4.40471773169719, 4.13233993007726, \n4.13693127488013, 4.17972699296225, 4.10499646106464, 3.75350208242693, \n3.58825804007837, 4.18615335304531, 3.80419680581063, 4.12630288902502, \n5.01231468192163, 3.41642351871278, 4.38188028606983, 3.30379459691054, \n5.02152830058144, 2.85374003721244, 3.93597563867169, 2.98453674219996, \n2.80310789874505, 3.06901620445828, 3.508984006727, 3.8969497905367, \n3.91893188170375, 4.03420099324431, 4.34944164103784, 3.50404119432157, \n3.41113566013962, 3.98687071135346, 4.01284713460236, 4.08982222539184, \n3.74159659472481, 4.40208333739825, 4.25278216883967, 4.00154095794753, \n3.83271913079456, 3.91894041738154, 3.90045053779375, 3.56325731622779, \n4.44808859092492, 4.30181766777209, 4.24917204932628, 3.76744370412415, \n3.82840370876884, 4.11275319470892, 4.15417700538959, 3.63979014400604, \n3.62170799709844, 3.92877073377409, 4.09880157972444, 4.2819570404612, \n3.89154181793695, 4.18755580385176, 4.20038038598554, 3.71155408312736, \n3.9695808406085, 4.12881634905095, 3.779600508404, 4.05440238831114, \n3.81496920030539, 3.86378540500583, 3.9816022203798, 3.94212417611821, \n3.6694031565292, 4.83704413321949, 2.94445355328644, 4.52635013254058, \n3.29192256809221, 4.10099131193165, 4.15325780846338, 3.86284809254545, \n3.84014402298446, 4.07342603577346, 3.95975637962721, 4.10179929245299, \n4.14482042667343, 4.22895981184086, 4.24427718190851, 3.70711720778918, \n3.448305590002, 4.41256366862798, 3.58756512549403, 4.28113313029441, \n4.37727926078487, 4.19253454675583, 4.34283960728817, 2.88497485122975, \n2.90962899168413, 2.87019753144291, 2.88914283428024, 3.15331638804897, \n4.16343186568741, 4.2286713285442, 3.6664004329882, 4.18513042280867, \n4.58267155780288, 3.94254780561955, 4.15099646146456, 3.8601531137314, \n3.67219740605762, 4.17494276020217, 3.62960300606959, 3.49007641707716, \n4.44778042756059, 3.86244414983398, 3.85279598215021, 4.09908114515082, \n4.48443951470546, 3.46219035011931, 3.96410755037485, 3.87462121603139, \n4.03929319424678, 4.42822418541246, 4.64912997286531, 3.40304946666778, \n3.36227511305782, 3.08731458334951, 4.73922764253687, 3.71213255599426, \n4.38386116573258, 5.40644612984523, 5.5723461466756, 4.11409175359841, \n4.50972076271542, 4.13562556847151, 3.59184083147015, 3.6394816007457, \n4.42791176854027, 3.40235895207265, 3.53071104296403, 4.02221388573109, \n3.71849326527792, 3.55935118084663, 4.29440981383725, 3.87822667764365, \n3.95893454082369, 3.78386781165714, 3.46414237734573, 4.43635940201454, \n4.11301059221026, 3.80271411946753, 3.96747901468781, 3.84092077548723, \n4.03078989486219, 3.31248937653252, 3.5762496086546, 3.79795723207803, \n4.01593501122836, 3.71669564197783, 3.45187427911349, 3.57486429641627, \n4.07495509601873, 3.4125763424258, 3.42565774436377, 3.67481600670502, \n3.70803857607178, 4.2479613920401, 3.69262637788015, 4.47394895190957, \n4.06918015577024, 4.00745791245853, 4.32013678902715, 3.34535933892604, \n4.13747229503273, 4.11651327031625, 3.66945614321023, 3.91585585463011, \n3.53294163413748, 4.33863392661354, 4.50617634442659, 3.76029435709389, \n3.36082912602369, 4.47374526753505, 3.4088920258961, 3.76432848153759, \n3.38205512647618, 4.50433495965979, 4.16646768615159, 2.96812767673115, \n4.48287326068905, 4.62143775044283, 3.30567029934328, 3.54967070968298, \n3.42781792795992, 4.29520510552376, 5.04247179177711, 2.52111253197076, \n5.41380638811983, 2.31213674775958, 4.78775042663278, 4.29967476832955, \n4.03529722034431, 3.456593757426, 4.80977521095954, 3.61052932948599, \n4.1784756505571, 4.16905205082598, 3.92106087749273, 3.68846999932839, \n3.86837737292844, 3.72418995149817, 3.80753415342244, 4.16560837990882, \n4.55140330847187, 3.26243672399985, 3.54590030992824, 3.43990287924708, \n4.03695265362936, 3.82352990030782, 4.12678572969355, 3.66634751693945, \n3.51695599883688, 4.0030204080841, 3.98521285949628, 3.86715184507056, \n4.03067941991383, 4.19364352343377, 3.69836075920118, 3.74990362016257, \n4.20499291778347, 4.19163702370289, 3.74821887669719, 4.43398796861365, \n4.35626160074268, 4.08528836743053, 4.399404167596, 3.38772249750063, \n3.52129656379542, 4.30782753748939, 4.05267732554275, 4.05267732554275, \n4.03860454984525, 3.4006657601938, 3.40595493796769, 3.66132026479965, \n4.03216841124058, 3.98463514982686, 3.48760837743066, 3.4683900697661, \n4.38293647261378, 4.00843890787435, 3.88355333274432, 4.19751330183132, \n3.71602271264122, 4.08569503771011, 4.66905886564846, 4.7340243654863, \n3.11035509732384, 3.48444798612112, 4.32758182959444, 3.20333605163767, \n3.23400746769222, 3.1754593476555, 3.33890635945675, 4.57186463328095, \n4.66598597293272, 3.35757817069211, 4.38569896413263, 3.65121152092955, \n4.15884777837668, 4.05452483709415, 3.77708413984925, 4.21487854078726, \n4.06240815717716, 4.99448252103664, 3.70267397590972, 4.04929916095963, \n3.58281642042887, 4.14679128359374, 4.10573450242957, 4.02304598782809, \n4.40957180452672, 4.3127264800791, 3.26929202321774, 3.52700271533865, \n4.22967012047329, 3.84205115686928, 3.57508591194964, 3.7968497079283, \n3.83132189404183, 3.55631063990546, 4.31102238836452, 3.7003627250186, \n4.15679572652069, 3.73020173281843, 4.21138960582113, 3.9954038184158, \n3.92786717606625, 3.96847340976246, 3.7283982189859, 4.76223716236889, \n3.18386260099061, 4.59901879511894, 3.3481101237326, 3.21342972847623, \n3.98005249537705, 3.77640914663853, 3.52726740892968, 3.86144328933254, \n4.15392384371873, 3.93092640245472, 4.32183869836356, 4.53972259910857, \n3.80658445236273, 3.83519402277473, 3.89089483066919, 3.9375401235753, \n3.7154636777157, 4.5466911013655, 3.86953198281259, 4.25555643435464, \n3.65535155169357, 3.5017819126069, 3.54234396305612, 3.52357034939176, \n4.22656244566721, 3.62295573044569, 3.96188909589884, 3.936989665279, \n3.67638003212589, 3.81329380400328, 4.0963587447305, 3.73715475350494, \n3.70125777346967, 3.82552189408986, 4.04424947803399, 4.43682108498772, \n3.44654239736011, 3.41513461781524, 3.06485180729458, 4.49453433942572, \n3.82561856214382, 3.68571449868591, 4.23790200144025, 3.6618265271293, \n4.2355138189875, 4.63157189881003, 3.28200438490254, 3.19756533642944, \n4.1110094182569, 3.48519850698074, 4.68362264375202, 2.9110952487723, \n3.20291942916668, 3.74283120214587, 4.45058243887891, 3.69723050584935, \n3.41605443245037, 4.30826386931632, 5.02676314534649, 4.92575786109708, \n4.67406490803766, 3.72988395321262, 3.83013277498742, 4.43207509299777, \n3.82592244625535, 4.05667686592194, 3.95161702589886, 3.37843950131505, \n3.16926710972756, 2.96888637566937, 4.90547909380834, 4.10951883330128, \n3.05379861015353, 2.9170880582717, 3.2492059037474, 3.98484236885247, \n3.72952455221026, 3.82542461269394, 5.01352023381855, 4.31057600615449, \n4.42864483912631, 4.58250387028242, 4.41874933202309, 4.53847000701797, \n4.28122931026377, 4.06373150061647, 4.54208774041757, 3.14496090941681, \n4.22660306226151, 3.76524346518373, 3.57319672753423, 3.37614637595518, \n3.98528790261604, 3.9385091410533, 3.35029212857641, 3.22647828599805, \n4.78382615748702, 3.40993541812656, 3.42688923615377, 4.1496267867026, \n3.65860674318199, 4.03693172367988, 3.95414033758525, 3.41927113181438, \n2.98600541941935, 3.4937788210193, 3.35571600730029, 4.696085052386, \n3.40724810727342, 4.33086357740138, 4.32061129398712, 3.52750000503287, \n4.32256683954929, 4.07308996877666, 4.01339339784235, 3.43587971022004, \n3.82109915276355, 4.97937264822695, 3.01636225563599, 3.69467940291269, \n3.52151244396019, 4.41105066207962, 4.38543586265241, 4.28267358755931, \n3.93226222012464, 3.90238285537126, 3.98219900950294, 3.76825206955088, \n3.97506690341267, 3.81247712501488, 3.30802811655093, 4.2852816326396, \n3.96390838508135, 4.21152900005891, 3.90266639726766, 3.22794995386393, \n3.40046402843962, 4.49306575909755, 3.16453780572747, 3.59997625958783, \n3.63416098594652, 3.52373293816188, 3.98276740104583, 3.7966185880854, \n3.30464267563806, 4.4590251634761, 3.28141913873774, 2.7967473738167, \n4.9168756760477, 4.47042910533744, 4.38636012335673, 3.24132591220506, \n3.53582492495, 4.11101056883043, 3.46425501384786, 3.72404205078777, \n4.1386427926997, 3.5459111422624, 4.40135707309056, 3.48579833817931, \n4.35534447973517, 4.00351314757796, 4.06687057407496, 4.6872525907655, \n5.12096683772906, 3.26099377891488, 3.99573206271104, 4.30387156797757, \n3.09505025538358, 4.86872516771325, 2.99572167277725, 4.22680990921321, \n3.61015070961956, 4.1754374529722, 3.66250446218004, 3.63775268646906, \n3.54524818428939, 3.57974236068634, 3.81229691037037, 4.41586912346834, \n3.32812763621512, 4.62758145257251, 3.00376626856028, 4.5435907051259, \n4.67990540762123, 3.81512649507711, 4.02715766973419, 4.62077309074199, \n4.0720559361706, 4.06096567255587, 3.86178947357002, 4.10739296945117, \n3.79120811360315, 3.38992477835135, 4.4465978193707, 4.58827638032707, \n3.66611044277598, 3.28810179243182, 4.341787119391, 3.6839370807849, \n4.15626248090807, 3.4232704986445, 3.015941317728, 3.17402813082706, \n3.8160826218366, 3.82749901159864, 3.68648830791458, 4.27021516480722, \n3.9133561197268, 3.31600609349067, 3.80105313302822, 3.90691229416272, \n4.01364748138187, 3.58464319357787, 4.97030065950679, 4.38108475436698, \n4.3644978636966, 4.46640760473103, 4.11896006548823, 4.47175025727153, \n4.19575476731209, 4.17345386965199, 4.14174345844162, 3.34652781035052, \n4.36822205988541, 3.23074073828923, 4.72309374789201, 3.2478593118841, \n4.34473321355389, 4.11719151568122, 3.7208408248388, 3.40191025955502, \n3.64079003836656, 4.09837194073012, 4.32059223358744, 3.74200611790507, \n4.2886841254934, 3.90148717111808, 4.4115491698439, 4.2724026979779, \n4.01277759917913, 4.01277759917913, 4.33211090431804, 4.13855938756321, \n4.30959054959252, 3.86651062374658, 3.77329298870029, 3.96903808861202, \n3.93901315082297, 3.29071802599343, 4.07810177610575, 3.90170369720621, \n3.88725841250343, 4.1554163080755, 4.18169308716285, 3.53395421064121, \n3.7846028881686, 4.02561400112993, 3.8768407134339, 4.68265745453661, \n4.23276914604048, 3.61969636610072, 3.69008913689754, 4.35171192080267, \n4.02544772598797, 4.44875484859829, 4.70970827598763, 4.30198927097889, \n3.9881461690447, 3.40311753006713, 3.37281157979876, 3.46764054784012, \n4.30040254436258, 3.05881401965319, 4.03349074251611, 3.75221370218387, \n3.78190054332208, 3.62460173867218, 3.8457578210647, 4.09362385728636, \n4.06622395913644, 3.76417729050665, 4.14346361594463, 4.22546216724155, \n3.49558534970545, 4.35664116163431, 5.07751188049108, 4.14981527004976, \n4.47209698371021, 4.01515263654347, 3.80581029103995, 3.94544958353275, \n3.79412081087198, 4.31794616270864, 3.70628856246072, 4.05901819269198, \n3.78233741298342, 4.07056861568038, 4.38659251582241, 4.75121521169629, \n3.68138539602858, 3.71443081544293, 4.64765975036971, 3.40986054503865, \n2.96971371165641, 4.78334258737112, 3.17858729345089, 3.91996184412293, \n3.51923051316495, 3.72706338731135, 2.78187198662034, 4.8865113683592, \n4.23907704892398, 3.92611901187632, 3.92910804466572, 3.66376214984042, \n4.21465872059579, 3.54910401116577, 3.9185944088129, 3.80944352106244, \n4.09848267076256, 3.66384733433752, 3.81562745877684, 3.83933540268367, \n4.99403007557904, 4.43813619465824, 3.30378159907958, 3.71771750318784, \n4.11865869254263, 5.0488275364423, 4.81653084227751, 4.00600349481543, \n3.61087903620738, 3.64563465394945, 4.19402185551459, 4.10957593636494, \n4.16470171929922, 3.61935273549545, 4.24087577300139, 3.89843499621326, \n3.88474363747225, 4.53734858694981, 3.72625122983942, 4.41046285609788, \n3.28710431188046, 4.63531576192067, 4.16105358260927, 3.67027426423267, \n4.17067570474576, 4.53297172743454, 2.790712099249, 4.88362168228957, \n2.84966038068884, 3.52794842585616, 3.64280008953886, 4.11962483186007, \n3.5089065743955, 4.39348732153581, 3.33667938630152, 4.14007277268071, \n4.08919122903909, 3.96866718941238, 3.79450452252242, 3.47330543510252, \n3.98632486709952, 3.81560521470849, 3.90330754606559, 4.10920589283472, \n4.17705521170391, 3.57530146420471, 4.24756996003897, 4.33576539203107, \n4.27385937762636, 3.42534417708084, 4.64869859969954, 4.41873709685457, \n3.68363613038581, 4.23252880525291, 4.47267141308907, 3.24972912418395, \n3.67265391319235, 4.05997511033931, 3.51460260223951, 4.18698835854598, \n4.23742509665092, 3.47132894220573, 3.94338732345908, 3.76301143440415, \n3.47391093533513, 3.68889950475814, 4.71269439902748, 3.88185620389649, \n4.28179220649445, 4.69477777549551, 4.50878274560641, 3.39658755119629, \n3.80519070488317, 3.87135999291121, 4.48834700808978, 3.20930673628508, \n4.58536853924006, 5.35300998518454, 3.43504304450013, 3.8540554854257, \n4.16722214318974, 4.10991992757714, 3.13249693544274, 3.51122597464727, \n3.87699429786042, 3.44506122312156, 4.14970039079908, 3.04556180237612, \n3.48804788845244, 2.60751990903979, 3.33929045252495, 3.18242955478877, \n3.10775820658975, 4.82736530541733, 4.86831100867599, 4.27929883935243, \n4.34798967914775, 4.14944728496476, 4.0937474137738, 4.04764496955843, \n3.81167020458467, 3.97200841321011, 3.21952591084714, 3.8827336165783, \n3.43400784139491, 4.11941891328844, 4.13948229369449, 3.84177776540172, \n4.29967970671566, 3.86095156429474, 4.06405811288114, 3.81490939449239, \n3.88852310558863, 3.64769080575918, 4.02010891887914, 4.1567357453022, \n2.83972617240391, 2.87704686153682, 3.17276879124492, 3.94637340095758, \n3.93781086762707, 3.97124107067233, 4.47342180115699, 3.51880662541841, \n4.3525205340355, 3.73463437667318, 4.09511634814246, 3.91506272875389, \n3.33217553044905, 3.58500260031293, 4.15907394220296, 3.73871083316592, \n3.84558503607064, 3.4785945812382, 3.77913493857869, 4.14106929951081, \n3.85301827849089, 3.69346275500418, 3.45876427285397, 4.26702760623584, \n3.87742766083647, 4.58396933450706, 4.42703399866619, 3.93369963792483, \n4.58176902224584, 3.31411481594399, 3.58855217846826, 4.18159778166045, \n4.14046188004696, 3.90810349706975, 3.7736886783129, 3.75364780795601, \n3.70306362976764, 4.29074581463286, 3.26708131459587, 4.22936151869227, \n3.79597749590157, 3.59082496209621, 4.36951921241099, 4.25640067755855, \n3.75372021374708, 3.42838377480926, 3.302813794727, 4.54170433200365, \n3.77844907914945, 3.63192093366146, 4.35439376316128, 3.67301070305099, \n3.66266666999172, 3.46560947598519, 3.4072014844007, 3.92315521768068, \n3.94888880208956, 3.91859092284965, 3.97254418324449, 3.67012907540345, \n4.18574151282596, 4.44635949950339, 3.53624580032149, 4.22139887888301, \n3.6865384342601, 3.90192356111462, 3.2161688503254, 4.71989834844023, \n3.71591111380714, 3.99549390859501, 3.71798156918556, 4.17761769173377, \n4.10824934951492, 4.07041131212844, 3.77859776939148, 3.8303533266027, \n3.54178749495048, 4.15946687941786, 3.66347056349785, 3.41083380428043, \n3.29693604125462, 3.7620008530517, 4.34610584648487, 4.71926472088779, \n4.47072922415488, 4.52422472943862, 3.14478898290508, 3.34869081267466, \n3.17644559046323, 4.5238075108593, 3.45981979027364, 4.28965480587645, \n4.46615665147255, 3.12532527799586, 3.87190942953303, 3.29153159622566, \n3.80856156191544, 3.65737969216193, 3.55207290515319, 4.08383239845915, \n4.76469351590152, 3.95048222365793, 4.12028534121773, 4.3163530261668, \n3.68389541251571, 4.16701126147605, 4.12994115211089, 3.97689203089344, \n3.97917204686961, 3.83058256480994, 4.06064512968637, 3.67460686289415, \n4.12377078534, 3.76456510572328, 3.66138888992551, 4.31406893021219, \n4.26369500625417, 4.27564508400354, 3.71377585464109, 4.22740734015625, \n4.44664435179377, 3.73450864233185, 4.22613225219737, 3.59090740509957, \n4.24319571142086, 4.71115609834828, 3.27250819544283, 4.57774057132903, \n4.18991429869767, 3.87208073088423, 3.82399837042872, 3.99289408926234, \n4.13071908519474, 4.01167345098491, 4.31720692246121, 4.75567360078438, \n3.45806937390193, 3.73573808886551, 4.07114145509333, 3.55881281068696, \n4.8155643578657, 3.48612404663943, 4.03914562650256, 3.55349506861992, \n4.04747312281624, 3.48522226834364, 4.09727825248214, 3.67939514846127, \n4.04794215951823, 3.81870216449059, 3.37552713440076, 3.92571051934734, \n3.87934225852828, 4.03898121509055, 4.19241835749047, 3.7039394945176, \n4.19212820215175, 3.71090988357658, 4.0144864842949, 3.88309090306972, \n4.31703415656647, 3.6942568163244, 3.93311898252092, 3.90968114557036, \n3.92437643929814, 3.47337490346647, 4.13052808448666, 3.80640835088004, \n4.59297953532954, 3.56525294791266, 4.56693203044131, 3.4424515796698, \n4.52878354058084, 3.94194636887527, 4.16062591611946, 3.82466366488954, \n3.47920325193453, 3.68754990553034, 4.22023064029121, 3.54019356669508, \n5.03035672358522, 3.25713264298391, 4.72044073930586, 4.55269337362069, \n4.27227013410342, 4.0700815572217, 3.53512247835399, 4.34467140909202, \n4.0813518714314, 4.07515397864191, 3.96127110746548, 3.70088112327724, \n3.61791994067439, 3.51927461421826, 4.17917145677122, 4.04505652348398, \n3.79041396075649, 4.23535030215194, 3.34897924656844, 3.90307725100013, \n3.7371297080742, 4.60236888535402, 3.59550252656988, 4.63834911673026, \n4.22673153214141, 4.22573461665965, 4.22196689759208, 3.66267714356594, \n3.87395713951298, 4.12643225019775, 3.70379337592729, 3.73898539027765, \n4.15552173580611, 3.63616797625202, 3.71819098566375, 3.84061762851139, \n3.74492528356736, 3.86181786593368, 4.39893671643252, 4.13185901160482, \n3.75996724977678, 4.32766032943206, 3.72078948123052, 4.39393976937879, \n3.81182740606111, 3.82617993002157, 2.98443413875879, 2.85022972775817, \n3.58284721537421, 3.96639568403777, 3.42409561303424, 3.54689638603045, \n4.19875681564667, 4.36239293763894, 4.37810452807056, 3.40573061848869, \n3.45779079928409, 3.39444773468172, 4.35694695684231, 3.77929801676119, \n4.23956143870596, 3.33479453525193, 3.61416070428141, 4.36351505497005, \n3.52583870183845, 3.90708155341622, 3.62989009440311, 3.49721948128339, \n3.9490023582565, 4.03846467909629, 3.54947562091229, 3.06356403168227, \n4.37077930577024, 4.06323365456137, 4.17997768715034, 4.15407235735411, \n3.6719744305481, 3.80273430862529, 3.96050124037577, 4.55539953239774, \n4.45386479617394, 3.52559715098266, 3.53606891467352, 4.37121358837807, \n3.91962069559159, 4.7879814875798, 4.25963312060254, 4.34776121124489, \n3.70034422916207, 3.58635888598568, 3.80681627864805, 3.87873144054486, \n3.53563481032073, 4.19461277775026, 3.67773269561842, 4.65715356420096, \n3.80711011702791, 4.03065842215, 2.71913198853473, 5.40231320802327, \n4.92138752787698, 2.8147171048178, 3.69707124674345, 4.14323194558039, \n3.84537587359231, 4.00509908512406, 3.88586641269435, 3.85642059542012, \n4.23524846110599, 3.95824048454138, 3.73048465848654, 3.80290913935178, \n4.42201291931212, 3.46060633793964, 3.2455873244483, 3.70508135880006, \n2.85237531282452, 2.92188783094807, 5.15644924202809, 2.75622209394093, \n2.84099946571408, 3.89589712098799, 3.0504597367558, 4.6781014603483, \n4.71207121633273, 3.98139015186392, 3.90872646083619, 3.93576326704867, \n3.67996078794636, 4.2681943559773, 4.0203909763208, 3.60454710457782, \n3.86658598413112, 4.97685600535762, 2.72805053451436, 3.11815622688018, \n3.63621575290097, 4.24183051594427, 3.59136604788753, 3.81672301084852, \n3.60521782662496, 3.47925231887355, 3.44426611340531, 3.84147045334697, \n3.8592449616109, 4.11582253355201, 3.74425677989269, 4.02047356435694, \n4.25412945287185, 3.53458241926688, 4.5115151744773, 3.38861618774401, \n3.50369638545847, 3.6469567229923, 3.87786835121917, 4.40306522042597, \n3.89804885695859, 3.55691572208783, 4.26550721861284, 3.18800922964326, \n5.25585582231297, 5.25359009212117, 4.27587401034455, 4.01996356469371, \n4.15128437754684, 3.62168958284994, 3.75332516429523, 3.77556828897857, \n4.33358380916271, 4.31172363028532, 3.57234157933426, 4.27223296338835, \n4.07626995446599, 3.81341936952266, 4.23463386110796, 3.9584274383071, \n3.83832632147784, 3.79860755985518, 3.96503167605643, 3.98013911472814, \n3.30372574798602, 4.40456149233319, 4.47165570611847, 3.42990098714356, \n3.5237314145997, 3.30848503817357, 3.64050091596869, 4.19918072660409, \n4.77450274128577, 4.61743900662888, 4.6430428381855, 3.43608041501171, \n4.59328417367518, 4.84937145866469, 4.67605340011946, 3.99927163692061, \n3.72741539510588, 3.59094203490662, 4.35865614142518, 4.21373534584952, \n3.38531429910715, 4.03102983475959, 3.92536619012718, 3.92664656886631, \n3.99178885965415, 4.31453925255513, 3.49953238176694, 4.1641006921355, \n3.62338637388808, 4.03705294358051, 4.46749921450936, 3.50581321064628, \n3.08328021440763, 4.72565376874921, 5.11843092280495, 4.85977855054168, \n4.54771667025431, 4.69789233627731, 3.65029156724542, 3.65447418822259, \n3.99255060178508, 4.07119217525531, 4.09450149549775, 3.91732361406417, \n4.77581303801666, 3.39041683356941, 4.58347337298306, 3.28514492207262, \n4.4591217942309, 4.33422880266686, 4.23578258533148, 3.62414525238744, \n4.01649135060259, 4.17490554739675, 3.34272793631835, 3.20149187549016, \n4.54978221772542, 3.89970966878027, 3.84750849113348, 3.49853243932963, \n4.282817348091, 4.30540568727402, 4.34657228074194, 4.36864860650148, \n3.71902609429065, 3.70175110635586, 3.68351417354328, 4.34378051380494, \n4.47052187333427, 3.44306137433659, 4.14449187254114, 3.96056714189833, \n3.75544147793814, 3.38911398740031, 3.52629844408322, 4.34322080515238, \n3.5373218255967, 3.03589748442316, 3.00630841163003, 4.23388208443457, \n3.86595510035926, 3.78558678320464, 4.24663676570372, 3.00617364597721, \n2.52786941608344, 2.97351182666395, 4.66108908968165, 4.67545427894806, \n4.32051362020929, 3.51129708535079, 4.30987044031473, 3.42725555543516, \n4.4864311566643, 4.55844479123894, 4.1581572748369, 3.80538123565566, \n4.50045839818984, 3.18092058914542, 3.25365833735528, 3.51071196289974, \n4.54291292854416, 4.41784508963685, 3.99841467987848, 4.31984221934193, \n3.52660547140728, 4.23991025117221, 4.05895013845553, 3.94276643994469, \n3.85670550469584, 4.31366131859511, 3.83804545137482, 3.97464793534584, \n3.98192326455987, 3.8638843753651, 4.27314412864204, 4.06097718145143, \n4.27716859407919, 3.98076245512178, 3.18074317965461, 4.59119969817618, \n4.25601082788189, 3.75228658244998, 3.88956737568524, 4.26210933415756, \n3.67423788795576, 3.53061473709181, 4.03591122610141, 3.85888482139477, \n4.19052730827947, 4.18963916969857, 4.25697931998408, 4.2597545544726, \n4.13840806120589, 3.60447841834712, 3.91290267607163, 4.54577017459175, \n4.27439807546361, 4.88804766023128, 4.04497550491017, 3.96626906595567, \n4.01401391928531, 4.18497039902124, 3.61101896375385, 3.27648659972965, \n2.9034190940627, 3.87654530653667, 4.22019420457499, 4.52191962214449, \n4.18828120653308, 4.45389271194066, 4.42748518219128, 4.68239256343965, \n3.40508391777091, 3.6770898592813, 4.45769085251255, 3.98284942199328, \n4.31499684596231, 3.2791760241437, 3.87502890541909, 3.54658112733969, \n4.04189257039392, 4.26002445887586, 3.38395534217309, 4.34527208435705, \n4.24627436963572, 3.80451398277277, 4.20059349756473, 4.25135813006927, \n4.28714886687153, 4.33046437059974, 4.72158122346767, 3.31082384817721, \n4.57510910362412, 4.30817537078443, 4.0396223140596, 4.09964963541689, \n3.90804927149278, 3.96247737771688, 3.7668376602951, 3.5857357772724, \n3.36958966442386, 3.24012948483897, 3.42366289649278, 4.04095452412069, \n3.88765814219126, 3.51735662327918, 3.88118479561901, 3.67756069269783, \n3.88925400457652, 3.21674229502053, 4.6871950824116, 3.54765745381738, \n4.51527620907558, 4.15913168767648, 3.82045248547578, 4.01274366322266, \n3.98595223586037, 3.96531747260313, 4.06940762356233, 4.68131084211732, \n3.5507387932841, 3.4965891461353, 3.8664005325745, 3.84035792277061, \n4.05319796617644, 3.84022870604676, 3.98692245100941, 3.83405107012382, \n3.71062408070858, 4.02246495090007, 4.02822116096855, 3.84350990620466, \n4.04888799051134, 3.95107020879905, 4.19865880635185, 4.17299321566103, \n4.01203879089038, 3.03846985789766, 3.30859648584211, 4.43589730608847, \n4.28433133353621, 3.62236132872356, 4.09518608014963, 4.53182786739541, \n3.58118964483938, 4.16164282063509, 4.18082571231642, 3.72865380323182, \n4.27697097190506, 3.63752984160404, 3.74919060121779, 4.12463189122435, \n4.32078409398281, 4.38285380847103, 4.38794579501141, 3.74775651056345, \n3.54386732279948, 3.97935695985189, 3.20924739591722, 3.36847531093646, \n4.59432400460471, 3.39708500496508, 3.76095495086283, 3.51922594912023, \n3.12824085391317, 3.97541037509392, 4.32043058985228, 3.96960159093574, \n3.80805399173494, 3.93146412343764, 4.0107980802298, 4.11441885393576, \n3.57392677960387, 3.5203784641608, 4.306943922708, 3.76202966228563, \n4.28751705285609, 4.94620951809127, 4.45600214726235, 4.0137184050826, \n4.61318338117371, 4.05377882222901, 4.00009131676064, 3.64095927701197, \n3.41576956007321, 5.0640359627249, 4.50480172980011, 4.20677195221607, \n3.76867662266317, 4.02396883123607, 4.3495735967369, 3.59275700214794, \n4.09300673391643, 3.58242186619574, 3.30361896935163, 3.55824554625156, \n3.92388653634367, 4.42308208418917, 4.56776388352812, 4.0912114064955, \n3.88859892257828, 3.88831890989142, 4.13066260448062, 4.20423021837745, \n4.61012934818882, 4.10138090791681, 3.91237865080903, 3.81598081132501, \n3.77805150436749, 3.99733047394611, 4.3809089925921, 4.64977407603666, \n4.94138308582401, 3.1296851497576, 4.22552324363105, 4.23486217465705, \n3.87709868293856, 3.88954492503599, 3.6503689588788, 3.88474731881756, \n3.7388536606301, 4.1948495779283, 3.75374927271422, 4.49414193942333, \n4.28884818183446, 3.46362706826723, 3.63376354633236, 3.64711362595649, \n4.08651067872549, 3.9131897374992, 3.89981238996751, 3.86470453975296, \n4.32553389253848, 4.40474075742979, 4.36660688566225, 3.48796110895015, \n3.65758525878801, 3.85617372003885, 4.43914673897878, 4.18986468141501, \n3.50978663346971, 4.56735558150454, 4.09097813131101, 3.8441758763665, \n3.21227941673191, 3.5427327946919, 3.66850252247299, 3.72614344668559, \n3.91735668937908, 3.56933294873647, 3.7861880719486, 3.98640403633344, \n3.83830905608399, 3.53651453561958, 4.06423380838208, 4.57399266921332, \n3.34420903339433, 4.42318078075752, 3.7181853947704, 3.80076059940744, \n3.65500537755034, 4.09027971186286, 4.27825348897963, 3.65806080290861, \n3.48602467136665, 3.82113728387779, 4.34725286388907, 3.83822712685072, \n3.81028857138909, 3.8478097705839, 3.52244633363521, 3.50285773298099, \n4.13842551513847, 3.62820919278123, 3.86224831702047, 4.04586297617146, \n4.25430858345944, 4.22461901445549, 3.88069458590916, 4.1877364866157, \n3.60005166579757, 4.4988101444499, 3.7142312945544, 4.07021150535179, \n3.42512363771272, 4.17382944293391, 3.74060250127303, 4.0857018462467, \n4.74355827588603, 4.65432772605292, 4.69964459496057, 3.86636203688637, \n3.91346069131117, 3.57172533340679, 3.10567649441529, 4.90485000533894, \n4.01716399937497, 3.72643581880611, 3.63972887768531, 4.06762220644835, \n4.30106561248451, 3.63737802157376, 3.43071445569288, 3.6956912790019, \n4.27350785419572, 4.47942966185884, 3.27514508700066, 4.71193608226864, \n4.68509723260314, 4.43642134292548, 3.87120541853791, 3.82373558072458, \n4.29040578614004, 4.09697017951023, 4.05985926270347, 3.53304661336649, \n3.97148140399331, 3.759524800991, 4.56459456720314, 4.49624282446936, \n4.3790449488, 3.62129462308311, 4.46215202763749, 3.23115732814838, \n4.61508321651933, 4.38729131068337, 4.55379287292379, 3.23872133877717, \n4.60174055090743, 3.32231033687448, 4.49054321627404, 3.6419643466229, \n3.81856467119299, 4.18749076572953, 4.40136881733998, 3.43053134676991, \n3.83170766507436, 3.47927208216701, 3.90229208130601, 3.87284671001464, \n3.4424893908317, 4.41703764301574, 4.05284729818241, 3.79324305991873, \n3.89292545517717, 4.23498003354507, 3.74234931337906, 3.18734135215378, \n3.72886515921878, 3.25108584152998, 3.58316394738815, 3.51520694813952, \n4.15924518012276, 3.64305623280164, 3.44010283433492, 3.86242604219422, \n4.08221949711819, 3.36638851663975, 3.51638418173994, 4.88416119439388, \n3.08244368128893, 3.5060222369193, 4.01404366094695, 3.82687967342712, \n4.15110750316948, 3.8818994672964, 4.25618844623523, 4.16361359816398, \n4.02767337168269, 4.0723237802011, 3.84862431743456, 4.3046988158887, \n3.6141144676478, 4.22670616580581, 3.5493770909132, 4.54402267178498, \n4.2523252442544, 3.9208772021013, 3.86637398528129, 3.68745920919422, \n4.37658522168739, 3.48426072348346, 3.82379450657228, 3.91646404473135, \n4.55366600946248, 3.88131959202016, 4.41856008862966, 3.95322986476718, \n4.17282622059498, 3.65865369854626, 4.10795378696914, 3.45787198643025, \n3.10200511152186, 3.30791182144578, 3.96877234945543, 4.49496391853099, \n3.95000588614622, 3.87257047667918, 4.12773245561908, 4.13826830576491, \n3.26567726086438, 4.30702697473365, 3.35902048098492, 4.70257245334443, \n4.54595242240463, 3.31580388672233, 3.43301386375753, 4.13548891889941, \n3.64088904004587, 4.03671325642935, 3.81243347970812, 3.89899407289523, \n4.30399070283571, 3.42837649331948, 3.43748311544174, 4.49287845740578, \n3.74036676002212, 4.23295556453385, 4.00214463850855, 3.85665373166989, \n3.84166359533387, 3.63900919862747, 3.64919070894687, 3.59199513710631, \n3.68826405350555, 3.11330601402664, 4.19232506641515, 4.19232506641515, \n4.23793276996709, 3.40803283937358, 4.80010571847864, 4.53962284068381, \n3.04365882295181, 2.93110501113143, 3.88347537455362, 3.9287102209345, \n4.13403038819511, 4.30617263138935, 3.64219890423397, 4.08705168492396, \n3.86459232733968, 3.62362333929874, 4.08128284385829, 2.96796825891368, \n4.28981832648127, 3.82667558192114, 4.04674986660118, 3.50237168658059, \n4.33790243818975, 3.41686792181723, 3.8460985513827, 4.35930187849311, \n4.32872247221845, 4.38518999777442, 4.2282513332754, 4.04063973953635, \n3.74068632501211, 3.8441115313156, 4.01721705265931, 4.05087085054554, \n4.41396546583955), dim = c(4000L, 2L), dimnames = list(iterations = NULL, \n    parameters = c(\"(Intercept)\", \"speed\")))\n\n\n\n\nserver &lt;- function (input,output) {\n  #url &lt;- file.path(\"cars.coef.csv\")\n  #cars.coef &lt;- read.csv(url)\n  \n  output$plot &lt;- renderPlot({\n  plot(dist~speed,data=cars,type=\"n\",xlab=\"Speed (mph)\",   ylab=\"Stopping Distance (ft)\")\n  NN &lt;- as.integer(input$N)\n for (n in 1:NN) {\n  abline(a=cars.coef[n,1],b=cars.coef[n,2],col=\"gray\")\n  }\n  abline(cars.fit)\n  points(cars$speed,cars$dist)\n  pred &lt;- predict(cars.fit,data.frame(speed=1:25),interval=\"confidence\",level=as.numeric(input$alpha)/100)\n lines(1:25,pred[,\"upr\"],lty=2)\n lines(1:25,pred[,\"lwr\"],lty=2)\n})\n}\nshinyApp(ui=ui,server=server)\nNote the dashed curves surrounding the regression line.\nThese are the confidence interval for the regression line.\nThe level of the confidence interval is how many of these plausible regression lines should fit between the dashed curves (expressed as a percentage).\nSPSS calls this the “mean” prediction interval. R calls it the “confidence” interval.\nYou can use the graph (or the R predict function, or the prediction option in SPSS) to get a prediction for the average (over a number of trials) stopping time at a given speed."
  },
  {
    "objectID": "RegressionPrediction.html#individual-prediction-interval",
    "href": "RegressionPrediction.html#individual-prediction-interval",
    "title": "Regression Prediction Error",
    "section": "Individual Prediction Interval",
    "text": "Individual Prediction Interval\nThe mean confidence interval above is for the average over many attempts at stopping the car.\nWe don’t expect a single attempt to fall exactly on the line.\n\n68% of the time we expect to be one standard error above or below the line.\n95% of the time we expect to be two standard errors above or below the line.\nTo get the total error, we need to add\n\nThe error in the regression line (see above)\nThe error around the regression line.\n\n\n(Actually, we add these on the squared variance scale).\nThe picture below shows the individual prediction interval. Once again, you can pick your confidence level.\nSPSS calls this the individual prediction interval. R calls it the prediction interval.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"alpha1\", label = \"Confidence Level:\",\n              choices = c(50, 68, 90, 95, 99), selected = 95)),\nmainPanel(\n  plotOutput(\"plot1\")))\ncars.fit &lt;- lm (dist~speed,data=cars)\n\nserver1 &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlot({\n  plot(dist~speed,data=cars,type=\"n\",xlab=\"Speed (mph)\",   ylab=\"Stopping Distance (ft)\",ylim=c(-25,150))\n pred1 &lt;- predict(cars.fit,data.frame(speed=1:25),interval=\"prediction\",\n          level=as.numeric(input$alpha1)/100)\n # Color the negative predictions.\n crossi &lt;- max(which(pred1[,\"lwr\"]&lt;0))\n crossl &lt;- pred1[crossi+1,\"lwr\"] -pred1[crossi,\"lwr\"]\n crossx &lt;- -pred1[crossi,\"lwr\"]/crossl\n polygon(c(1,1:crossi,crossx),c(0,pred1[1:crossi,\"lwr\"],0),col=\"cyan\")\n  abline(h=0)\n  abline(cars.fit)\n  points(cars$speed,cars$dist)\n lines(1:25,pred1[,\"upr\"],lty=2)\n lines(1:25,pred1[,\"lwr\"],lty=2)\n})}\n\nshinyApp(ui=ui1,server=server1)\nLook at the area in the graph which is colored cyan.\nThese are predictions that the car will stop in negative distance. Impossible!\nThe model is wrong.\nThat shouldn’t worry us, models are always wrong. The just might be close enough to be right to be useful.\nWe might say that the linear model is useful, but only if the car is going 5 mph or more."
  },
  {
    "objectID": "RegressionPrediction.html#model-checking",
    "href": "RegressionPrediction.html#model-checking",
    "title": "Regression Prediction Error",
    "section": "Model Checking",
    "text": "Model Checking\nNote that there was a slight curve in the lowess line in the scatterplot at the top of this analysis.\nSometimes the curve is easier to see if we take the linear trend out.\nWe can do this by plotting the residuals versus the fitted values.\n In a simple regression, this is the same as plotting against \\(X\\), as the fitted values are just a linear transformation of \\(X\\) (and the graph will just be rescaled to fit). For multiple regression, the fitted values are a mix of all the \\(X\\) values, so this plot is a useful summary.\n\n\n\n\n\n\n\n\n\nLooking a little more closely, we can see the curve.\nIt would be easy to miss without the lowess line, but the lowess line points it out to us.\nThere is a little bit of curvature, curving up at the lower distances, keeping the stopping distances in positive territory.\nSo what to conclude?\n\nIn the range of 5 mph – 25 mph the linear model looks pretty good.\nFor low speeds, we need a better model.\nMaybe we need a better model for higher speeds as well."
  },
  {
    "objectID": "CorrelationExercise.html",
    "href": "CorrelationExercise.html",
    "title": "Scatterplot examples",
    "section": "",
    "text": "This demonstration will use some random data. Lets start by generating the random data. So give a [random seed][seed] and pick a sample size for your sample.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(tidyverse)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  \n  numericInput(\"seed\", label = \"Random number Seed (integer)\",\n              min = 0, max = .Machine$integer.max, \n              value = floor(runif(1)*.Machine$integer.max), \n              step = 157)\n),\nmainPanel(\n  plotOutput(\"scatterplots\"),\n  tableOutput(\"answers\"))\n)\n\nserver &lt;- function (input,output) {\n\n  data &lt;- reactive({\n      N &lt;- as.numeric(input$N)\n    set.seed(input$seed)\n    X&lt;-rnorm(N)\n    Err&lt;-rnorm(N)\n    rho &lt;- runif(9,-1,1)\n    names(rho) &lt;- c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\")\n    Y &lt;- matrix(NA,N,9)\n    colnames(Y) &lt;- names(rho)\n    ## Linear \n    for (j in 1:9)\n       Y[,j] &lt;- rho[j]*X+sqrt(1-rho[j]*rho[j])*Err\n    ## Select some for curves\n    curves &lt;- sample.int(9,rbinom(1,9,.3))\n    for (j in curves) {\n    \n      if (runif(1) &lt; .5) {\n        ## Quadradic\n        rho2 &lt;- ifelse(runif(1)&lt;.5,-1,1)*runif(1,.5,.85)\n        sigma &lt;- sqrt(1-rho[j]*rho[j])\n        Y[,j] &lt;- rho[j]*X+rho2*X*X+sigma*Err\n        rho[j] &lt;- cor(X,Y[,j])\n      } else {\n        ## Split curve\n        sigma &lt;- sqrt(1-rho[j]*rho[j])\n        x0 &lt;- runif(1,-.5,.5)\n        b11 &lt;- rho[j]\n        b12 &lt;- rnorm(1,0,.2)\n        b02 &lt;- (b11-b12)*x0 \n        Y[,j] &lt;- ifelse(X&lt;x0, b11*X, b12*X + b02) + sigma*Err\n        rho[j] &lt;- cor(X,Y[,j])\n     }\n  }\n  list(X=X,Y=Y,rho=rho,curves=curves)\n  })\n\n\n  output$scatterplots &lt;- renderPlot({\n  N &lt;- as.numeric(input$N)\n  X &lt;- data()$X\n  Y &lt;- data()$Y\n  rho &lt;- data()$rho\n \n  datasets &lt;- as_tibble(data.frame(X,Y))\n  datalong &lt;- pivot_longer(datasets,cols=colnames(Y),\n                            names_to=\"Y_var\",values_to=\"Y\")\n  \n ggplot(datalong,aes(X,Y))+geom_point() +\n    geom_smooth(method=\"lm\",color=\"red\",se=FALSE) + \n    geom_smooth(method=\"loess\",color=\"blue\",se=FALSE) +\n    facet_wrap(vars(Y_var))\n}, height=800,width=800)\n\noutput$answers &lt;- renderTable(data.frame(correlation=round(data()$rho,3),\n                                         curved=(1:9%in%data()$curves)),\n                              row.names=names(data()$rho),\n                              rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "VaccineCI.html",
    "href": "VaccineCI.html",
    "title": "Confidence Interval: COVID Vaccine tests",
    "section": "",
    "text": "Data from Moderna Vaccine Study Control Group\nX &lt;- 95\nN &lt;- 1500\nIn a sample of 1500 volunteers receiving the placebo, there were 95 positive cases; so our estimate for the rate of COVID-19 in this population (and this time period) is 0.063.\nRecall that the formula for the \\(\\alpha\\) confidence interval is\nC.I. \\[ \\bar X \\pm (z_{1-\\alpha/2})\\ \\sigma_{\\bar X}\\] Here \\(z_{1-\\alpha/2}\\) is the \\(1-\\alpha/2\\) quantile of the normal distribution. We can look that up on a Normal Table. For \\(\\alpha=.95\\), \\(z_{1-\\alpha/2}=1.96\\approx 2\\).\nFor binomial distribution \\[ \\bar X = X/N=\\hat p\\] This is the value 0.063 we calculated earlier. The hat over the \\(p\\) is a sign that it is a (maximum likelihood) estimate.\nThe usual formula for the standard error of a mean (from a simple random sample) is \\[ \\sigma_{\\bar X} = \\frac{\\sigma}{\\sqrt{N}} \\] For the binomial distribution, the standard deviation is \\[ \\sigma = \\sqrt{p(1-p)}; \\qquad s = \\sqrt{\\hat p(1-\\hat p)}\\] Plug that into the formula for the standard error and we get:\n\\[ \\sigma_{\\bar X} = \\sqrt{p(1-p)/N} \\] Lets go ahead and calculate those\np.hat &lt;- X/N\nse &lt;- sqrt(p.hat*(1-p.hat)/N)\nThe probability estimate is 0.063 and the standard error is 0.0063.\nI’ll now use an R trick. qnorm() is the R function to calculate the quantiles of the normal distribution. If I give it two probabilities, it will give me both the postive and negative values. So I will pass it \\((\\alpha/2,1-\\alpha/2)\\), this gives the values \\(r round(qnorm(c(.025,.975)),3)\\).\nBecause R does calculations on vectors, it will calculate both sides of the confidence interval with one formula.\nci &lt;- p.hat + qnorm(c(.025,.975))*se\nPrevlance of covid at the time and in the locations the study was run was between (5.1%,7.6%).\nNote that a lot of things have changed between now and then. In particular, the rise of the much more transmissable delta variant. But also changes in how seriously people take masking and other percautions. In particular, there is probably considerable regional variation in the prevalence of COVID-19.\nThe web site https://www.microcovid.org/ tracks this on a county-by-county basis."
  },
  {
    "objectID": "VaccineCI.html#severe-covid",
    "href": "VaccineCI.html#severe-covid",
    "title": "Confidence Interval: COVID Vaccine tests",
    "section": "Severe Covid",
    "text": "Severe Covid\nSame thing with the severe (hospitalizations or death) COVID numbers.\n\nX1 &lt;- 11\np1 &lt;- X1/N\nse1 &lt;- sqrt(p1*(1-p1)/N)\nci1 &lt;- p1 + qnorm(c(.025,.975))*se1\n\nPrevlance of severe covid at the time and in the locations the study was run was between (0.3%,1.2%)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "SkewnessPractice.html",
    "href": "SkewnessPractice.html",
    "title": "Skewness Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. Each will be plotted with a normal curve on top for reference. Your job is to determine which is which.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"histograms\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\nserver &lt;- function (input,output) {\n  output$histograms &lt;- renderPlot({\n    ## Draw random data \n    print(key)\n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(rev(kdat))\n  \n  histogram(reformulate(termlabels = names(kdat)), \n                        data = kdat,\n          xlab = \"X\", type = \"density\",\n          panel = function(x, ...) {\n              panel.histogram(x, ...)\n              panel.mathdensity(dmath = dnorm, col = \"black\",\n                                args = list(mean=mean(x),sd=sd(x)))\n          }, layout=c(1,3),\n          scales=list(y=list(draw=FALSE)))\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "SkewnessPractice.html#skewness-determination-exercise.",
    "href": "SkewnessPractice.html#skewness-determination-exercise.",
    "title": "Skewness Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. Each will be plotted with a normal curve on top for reference. Your job is to determine which is which.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"histograms\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\nserver &lt;- function (input,output) {\n  output$histograms &lt;- renderPlot({\n    ## Draw random data \n    print(key)\n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(rev(kdat))\n  \n  histogram(reformulate(termlabels = names(kdat)), \n                        data = kdat,\n          xlab = \"X\", type = \"density\",\n          panel = function(x, ...) {\n              panel.histogram(x, ...)\n              panel.mathdensity(dmath = dnorm, col = \"black\",\n                                args = list(mean=mean(x),sd=sd(x)))\n          }, layout=c(1,3),\n          scales=list(y=list(draw=FALSE)))\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "LawOfLargeNumbersAnimated.html",
    "href": "LawOfLargeNumbersAnimated.html",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "This is pretty close to the frequency definition of probability. Suppose the probability of some event is \\(p\\). Suppose further than we sample \\(N\\) times from the process that generates this event. Let \\(p_N\\) be the proportion of times the event occurs in \\(N\\) trials. As \\(N\\) gets bigger and bigger, \\(p_N\\) gets closer and closer to \\(p\\).\n(Skip this unless you are good with calculus.) This is one of those epsilon-delta theorems. So let \\(\\delta\\) be a difference from \\(p\\) and let \\(\\epsilon\\) be a small probability. For any \\(\\epsilon\\) and \\(\\delta\\), there exists an \\(N\\) such that \\(P(|p_N-p|&gt;\\delta) &lt; \\epsilon\\).\n\n\nIn the picture below, pick a probability \\(p\\) and a sample size \\(N\\). The computer will generate samples up to \\(N\\) and plot \\(p_N\\).\nThe \\(\\delta\\)-line is an error bound plus or minus \\(\\delta\\) units from the target \\(p\\). This is a target so you can judge how close you got.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nlibrary(plotly)\nlibrary(patchwork)\nlibrary(tidyverse)\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- lazyeval::f_eval(var, dat)\n  lvls &lt;- plotly:::getLevels(var)\n  dats &lt;- lapply(seq_along(lvls), function(x) {\n    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  dplyr::bind_rows(dats)\n}\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n  \n  sliderInput(\"p\", label = \"Probability of event (p)\",\n              min = 0, max = 1, value = .5, step = 0.01),\n  sliderInput(\"delta\", label = \"Distance of reference line from target (delta)\",\n              min = 0, max = .1, value = .05, step = 0.005)\n\n),\nmainPanel(\n  plotlyOutput(\"plot1\")))\n\nserver &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlotly({\n  n &lt;- 1:input$N\n  x &lt;- runif(input$N) &lt; input$p\n  pn &lt;- cumsum(x)/n\n  datalist &lt;- lapply(n,function(nn)\n    data.frame(n=1:nn,pn=pn[1:nn],f=nn))\n  data &lt;- dplyr::bind_rows(datalist)\n  target &lt;- input$p\n  bounds &lt;- input$p+c(-1,1)*input$delta\n  fig &lt;- \n      ggplot(data,aes(x=n,y=pn, frame=f)) +\n      geom_line() +\n      xlab(\"Number of Trials\") +\n      ylab(\"Proportion Success\") +\n      geom_hline(aes(yintercept=target,col=\"target\")) +\n      geom_hline(aes(yintercept=bounds[1],col=\"bound\")) +\n      geom_hline(aes(yintercept=bounds[2],col=\"bound\")) + \n      labs(col=\"Target Lines\") +\n      scale_color_manual(values=c(target=\"blue\",bound=\"skyblue\"))\n  \n  ggplotly(fig) %&gt;%  animation_opts(frame=100,transition=0,redraw=FALSE)\n})}\nshinyApp(ui=ui,server=server)\n\n\n\nWe can use the Law of Large Numbers to prove an important theorem. As the sample size gets larger and larger, the sample looks more and more like the population it is drawn from.\n Technically, the Law of Large Numbers refers to the result above. But we can use it so show a very important basis of statistics. Suppose we have some kind of distribution, \\(F(x)\\), that generates numbers, \\(X\\). Recall that the definition of \\(F(x)=\\Pr(X \\leq x)\\).\n Draw a sample of size \\(N\\) from this distribution. Now consider the sampled data points \\(X_1,\\ldots,X_N\\), and consider sampling a new value \\(Y\\) from that distribution. Let \\(F_N(y) = \\Pr(Y \\leq y)\\). This is sometimes called the bootstrap distribution.\n By the law of large numbers, for every \\(y\\), as \\(N\\) gets large \\(F_N(y) \\rightarrow F(y)\\). So the sample distribution \\(F_N()\\) converges to the \\(F()\\).\n\n\n\nPick a distribution: * Normal – standard normal * Exponential – highly skewed * Gamma (shape = 3) – skewed * T (df =3) – high kurtosis\nSlide the sample size up and down, notice how the empirical distribution function and histogram coverge to the theoretical distribution function and density.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nlibrary(plotly)\nlibrary(patchwork)\nlibrary(tidyverse)\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- lazyeval::f_eval(var, dat)\n  lvls &lt;- plotly:::getLevels(var)\n  dats &lt;- lapply(seq_along(lvls), function(x) {\n    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  dplyr::bind_rows(dats)\n}\nnmax &lt;- 1000\nrdist &lt;- list(Normal=rnorm, Exponential = rexp, \n              Gamma = function(n) rgamma(n,3),\n              \"T\" = function(n) rt(n,3))\npdist &lt;- list(Normal=pnorm, Exponential = pexp, \n              Gamma = function(q) pgamma(q,3),\n              \"T\" = function(q) pt(q,3))\nddist &lt;- list(Normal=dnorm, Exponential = dexp, \n              Gamma = function(x) dgamma(x,3),\n              \"T\" = function(x) dt(x,3))\n\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"dist\",label=\"Distribution Type\",\n              choices=c(\"Normal\",\"Exponential\",\"Gamma\",\"T\"),\n              selected=\"Normal\"),\n   selectInput(\"NN\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n),\nmainPanel(\n  plotlyOutput(\"erf\"),\n  plotlyOutput(\"histplot\")))\n\nserver1 &lt;- function (input,output) {\n\ncumdat &lt;- reactive({\n  NN &lt;- input$NN\n  XX &lt;- do.call(rdist[[input$dist]],list(NN))\n  bind_rows(\n      lapply(25:NN,function(i)\n        data.frame(x=sort(XX[1:i]),Fn=(1:i)/i,f=i)))\n})\n\noutput$erf &lt;- renderPlotly({\n  erfplot &lt;- ggplot(cumdat(),aes(x,y=Fn,frame=f)) + geom_point()+stat_function(fun=pdist[[input$dist]],geom = \"line\",col=\"red\") +  labs(title=\"Actual vs Empirical Distribution Function\")\n  \n \n ggplotly(erfplot) %&gt;% animation_opts(frame=100) \n})\n\noutput$histplot &lt;- renderPlotly({\n histplot &lt;- ggplot(cumdat(),aes(x,frame=f)) + geom_histogram(aes(y=..density..),binwidth=.25, position=\"identity\") +\n stat_function(fun=ddist[[input$dist]],geom=\"line\",col=\"red\") + labs(\n       title=\"Actual vs Empirical Density Function\")\n\n ggplotly(histplot) %&gt;% animation_opts(frame=100)\n})\n}\nshinyApp(ui=ui1,server=server1)\nSee also the non-animated version."
  },
  {
    "objectID": "LawOfLargeNumbersAnimated.html#a-demonstration.",
    "href": "LawOfLargeNumbersAnimated.html#a-demonstration.",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "In the picture below, pick a probability \\(p\\) and a sample size \\(N\\). The computer will generate samples up to \\(N\\) and plot \\(p_N\\).\nThe \\(\\delta\\)-line is an error bound plus or minus \\(\\delta\\) units from the target \\(p\\). This is a target so you can judge how close you got.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nlibrary(plotly)\nlibrary(patchwork)\nlibrary(tidyverse)\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- lazyeval::f_eval(var, dat)\n  lvls &lt;- plotly:::getLevels(var)\n  dats &lt;- lapply(seq_along(lvls), function(x) {\n    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  dplyr::bind_rows(dats)\n}\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n  \n  sliderInput(\"p\", label = \"Probability of event (p)\",\n              min = 0, max = 1, value = .5, step = 0.01),\n  sliderInput(\"delta\", label = \"Distance of reference line from target (delta)\",\n              min = 0, max = .1, value = .05, step = 0.005)\n\n),\nmainPanel(\n  plotlyOutput(\"plot1\")))\n\nserver &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlotly({\n  n &lt;- 1:input$N\n  x &lt;- runif(input$N) &lt; input$p\n  pn &lt;- cumsum(x)/n\n  datalist &lt;- lapply(n,function(nn)\n    data.frame(n=1:nn,pn=pn[1:nn],f=nn))\n  data &lt;- dplyr::bind_rows(datalist)\n  target &lt;- input$p\n  bounds &lt;- input$p+c(-1,1)*input$delta\n  fig &lt;- \n      ggplot(data,aes(x=n,y=pn, frame=f)) +\n      geom_line() +\n      xlab(\"Number of Trials\") +\n      ylab(\"Proportion Success\") +\n      geom_hline(aes(yintercept=target,col=\"target\")) +\n      geom_hline(aes(yintercept=bounds[1],col=\"bound\")) +\n      geom_hline(aes(yintercept=bounds[2],col=\"bound\")) + \n      labs(col=\"Target Lines\") +\n      scale_color_manual(values=c(target=\"blue\",bound=\"skyblue\"))\n  \n  ggplotly(fig) %&gt;%  animation_opts(frame=100,transition=0,redraw=FALSE)\n})}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "LawOfLargeNumbersAnimated.html#convergence-of-distributions-boot-strap-distribution",
    "href": "LawOfLargeNumbersAnimated.html#convergence-of-distributions-boot-strap-distribution",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "We can use the Law of Large Numbers to prove an important theorem. As the sample size gets larger and larger, the sample looks more and more like the population it is drawn from.\n Technically, the Law of Large Numbers refers to the result above. But we can use it so show a very important basis of statistics. Suppose we have some kind of distribution, \\(F(x)\\), that generates numbers, \\(X\\). Recall that the definition of \\(F(x)=\\Pr(X \\leq x)\\).\n Draw a sample of size \\(N\\) from this distribution. Now consider the sampled data points \\(X_1,\\ldots,X_N\\), and consider sampling a new value \\(Y\\) from that distribution. Let \\(F_N(y) = \\Pr(Y \\leq y)\\). This is sometimes called the bootstrap distribution.\n By the law of large numbers, for every \\(y\\), as \\(N\\) gets large \\(F_N(y) \\rightarrow F(y)\\). So the sample distribution \\(F_N()\\) converges to the \\(F()\\)."
  },
  {
    "objectID": "LawOfLargeNumbersAnimated.html#demonstration-of-convergence-of-distributions.",
    "href": "LawOfLargeNumbersAnimated.html#demonstration-of-convergence-of-distributions.",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "Pick a distribution: * Normal – standard normal * Exponential – highly skewed * Gamma (shape = 3) – skewed * T (df =3) – high kurtosis\nSlide the sample size up and down, notice how the empirical distribution function and histogram coverge to the theoretical distribution function and density.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nlibrary(plotly)\nlibrary(patchwork)\nlibrary(tidyverse)\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- lazyeval::f_eval(var, dat)\n  lvls &lt;- plotly:::getLevels(var)\n  dats &lt;- lapply(seq_along(lvls), function(x) {\n    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  dplyr::bind_rows(dats)\n}\nnmax &lt;- 1000\nrdist &lt;- list(Normal=rnorm, Exponential = rexp, \n              Gamma = function(n) rgamma(n,3),\n              \"T\" = function(n) rt(n,3))\npdist &lt;- list(Normal=pnorm, Exponential = pexp, \n              Gamma = function(q) pgamma(q,3),\n              \"T\" = function(q) pt(q,3))\nddist &lt;- list(Normal=dnorm, Exponential = dexp, \n              Gamma = function(x) dgamma(x,3),\n              \"T\" = function(x) dt(x,3))\n\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"dist\",label=\"Distribution Type\",\n              choices=c(\"Normal\",\"Exponential\",\"Gamma\",\"T\"),\n              selected=\"Normal\"),\n   selectInput(\"NN\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n),\nmainPanel(\n  plotlyOutput(\"erf\"),\n  plotlyOutput(\"histplot\")))\n\nserver1 &lt;- function (input,output) {\n\ncumdat &lt;- reactive({\n  NN &lt;- input$NN\n  XX &lt;- do.call(rdist[[input$dist]],list(NN))\n  bind_rows(\n      lapply(25:NN,function(i)\n        data.frame(x=sort(XX[1:i]),Fn=(1:i)/i,f=i)))\n})\n\noutput$erf &lt;- renderPlotly({\n  erfplot &lt;- ggplot(cumdat(),aes(x,y=Fn,frame=f)) + geom_point()+stat_function(fun=pdist[[input$dist]],geom = \"line\",col=\"red\") +  labs(title=\"Actual vs Empirical Distribution Function\")\n  \n \n ggplotly(erfplot) %&gt;% animation_opts(frame=100) \n})\n\noutput$histplot &lt;- renderPlotly({\n histplot &lt;- ggplot(cumdat(),aes(x,frame=f)) + geom_histogram(aes(y=..density..),binwidth=.25, position=\"identity\") +\n stat_function(fun=ddist[[input$dist]],geom=\"line\",col=\"red\") + labs(\n       title=\"Actual vs Empirical Density Function\")\n\n ggplotly(histplot) %&gt;% animation_opts(frame=100)\n})\n}\nshinyApp(ui=ui1,server=server1)\nSee also the non-animated version."
  },
  {
    "objectID": "CentralLimitTheroem.html",
    "href": "CentralLimitTheroem.html",
    "title": "Central Limit Theorem",
    "section": "",
    "text": "Pick a distribution: * Uniform – platykurtic * Binomial – symmetric and mesokurtic * Exponential – highly skewed * Gamma (shape = 3) – skewed * T (df =3) – high kurtosis\nSlide the sample size up and down, notice how the empirical distribution function and histogram coverge to the normal distribution function and density.\nThe left column shows the original distribution. (I call that the black hat in my CLT demo.)\nThe right column shows the distribution of means of size \\(M\\) (adjusted with the second slider). (This is the white hat distribuiton, and \\(M\\) is the number of cards averaged to get the white hat value.)\nThe top row shows histograms with a normal curve on top.\nThe bottom row shows a QQ-plot. This shows how much the sample is different from a normal distribution. A normal distribution should be right on top of the diagonal line.\nAs \\(M\\) (the number of cards averages to get to the white hat) gets bigger, the distribution should get closer and closer to the normal distribution."
  },
  {
    "objectID": "CentralLimitTheroem.html#take-home",
    "href": "CentralLimitTheroem.html#take-home",
    "title": "Central Limit Theorem",
    "section": "Take home",
    "text": "Take home\n\nEven if the underlying data aren’t normal, the distribution of the means of various groups should be close to normal.\nClose depends on the sample size.\nA bigger sample is needed if the data are highly skewed (expontential and gamma) or leptokurtic (exponential and Student t)."
  },
  {
    "objectID": "CorrelationExamples.html",
    "href": "CorrelationExamples.html",
    "title": "Scatterplot examples",
    "section": "",
    "text": "All three of these example are indications that linear regression is a reasonable to way to summarize the relationship between \\(X\\) and \\(Y\\).\n\n\nThis happens when we have a moderately high to strong correlation.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho\", label = \"Correlation Coefficient:\",\n              min = .75, max = 1, value = .85, step = 0.05),\n  checkboxInput(\"sign\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plots\")))\n\nserver &lt;- function (input,output) {\n  output$plots &lt;- renderPlot({\n  N &lt;- input$N\n  rho &lt;- input$rho*ifelse(input$sign,-1,1)\n  Y &lt;-  rho*X[1:N] + sqrt(1-rho*rho)*Err[1:N]\n  plot(X[1:N],Y,main=paste(\"Correlation =\",rho),xlab=\"X\")\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui,server=server)\n\n\n\nAs the correlation coefficient gets lower, the scatterplot looks more blobby, but you can still tell that there is a slope. This is a weak to moderate correlation.\n#| standalone: true\n#| viewerHeight: 500\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N1\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho1\", label = \"Correlation Coefficient:\",\n              min = .25, max = .75, value = .5, step = 0.05),\n  checkboxInput(\"sign1\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plot1\")))\n\nserver1 &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlot({\n  rho &lt;&lt;- input$rho1*ifelse(input$sign1,-1,1)\n  Y &lt;&lt;-  rho*X[1:input$N1] + sqrt(1-rho*rho)*Err[1:input$N1]\n  plot(X[1:input$N1],Y,xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui1,server=server1)\n\n\n\nNot much is going on here. One thing that confuses people is the idea that linear regression doesn’t work here. Actually, it gives a quite accurate picture: it tells you that not much is going on, which is what is actually happening. The prediction from the regression will be that \\(\\bar Y\\) is the best predicted value for \\(Y\\).\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui2 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N2\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho0\", label = \"Correlation Coefficient:\",\n              min = -.25, max = .25, value = .0, step = 0.05),\n  checkboxInput(\"sign0\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plot2\")))\n\nserver2 &lt;- function (input,output) {\n  output$plot2 &lt;- renderPlot({\n  rho &lt;- input$rho0*ifelse(input$sign0,-1,1)\n  Y &lt;-  rho*X[1:input$N2] + sqrt(1-rho*rho)*Err[1:input$N2]\n  plot(X[1:input$N2],Y,xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui2,server=server2)"
  },
  {
    "objectID": "CorrelationExamples.html#mostly-linear",
    "href": "CorrelationExamples.html#mostly-linear",
    "title": "Scatterplot examples",
    "section": "",
    "text": "This happens when we have a moderately high to strong correlation.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho\", label = \"Correlation Coefficient:\",\n              min = .75, max = 1, value = .85, step = 0.05),\n  checkboxInput(\"sign\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plots\")))\n\nserver &lt;- function (input,output) {\n  output$plots &lt;- renderPlot({\n  N &lt;- input$N\n  rho &lt;- input$rho*ifelse(input$sign,-1,1)\n  Y &lt;-  rho*X[1:N] + sqrt(1-rho*rho)*Err[1:N]\n  plot(X[1:N],Y,main=paste(\"Correlation =\",rho),xlab=\"X\")\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "CorrelationExamples.html#blobby-elipse",
    "href": "CorrelationExamples.html#blobby-elipse",
    "title": "Scatterplot examples",
    "section": "",
    "text": "As the correlation coefficient gets lower, the scatterplot looks more blobby, but you can still tell that there is a slope. This is a weak to moderate correlation.\n#| standalone: true\n#| viewerHeight: 500\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N1\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho1\", label = \"Correlation Coefficient:\",\n              min = .25, max = .75, value = .5, step = 0.05),\n  checkboxInput(\"sign1\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plot1\")))\n\nserver1 &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlot({\n  rho &lt;&lt;- input$rho1*ifelse(input$sign1,-1,1)\n  Y &lt;&lt;-  rho*X[1:input$N1] + sqrt(1-rho*rho)*Err[1:input$N1]\n  plot(X[1:input$N1],Y,xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui1,server=server1)"
  },
  {
    "objectID": "CorrelationExamples.html#no-relationship",
    "href": "CorrelationExamples.html#no-relationship",
    "title": "Scatterplot examples",
    "section": "",
    "text": "Not much is going on here. One thing that confuses people is the idea that linear regression doesn’t work here. Actually, it gives a quite accurate picture: it tells you that not much is going on, which is what is actually happening. The prediction from the regression will be that \\(\\bar Y\\) is the best predicted value for \\(Y\\).\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui2 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N2\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"rho0\", label = \"Correlation Coefficient:\",\n              min = -.25, max = .25, value = .0, step = 0.05),\n  checkboxInput(\"sign0\",\"Negative Correlation\",FALSE)\n),\nmainPanel(\n  plotOutput(\"plot2\")))\n\nserver2 &lt;- function (input,output) {\n  output$plot2 &lt;- renderPlot({\n  rho &lt;- input$rho0*ifelse(input$sign0,-1,1)\n  Y &lt;-  rho*X[1:input$N2] + sqrt(1-rho*rho)*Err[1:input$N2]\n  plot(X[1:input$N2],Y,xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui2,server=server2)"
  },
  {
    "objectID": "CorrelationExamples.html#curve",
    "href": "CorrelationExamples.html#curve",
    "title": "Scatterplot examples",
    "section": "Curve",
    "text": "Curve\nA curved relationship doesn’t look like a line.\nConsider a quadradic relationship: \\[ Y = b_2 X^2 + b_1 X + b_0 + \\epsilon\\] This is a multiple (or quadradic) regression. You can adjust the coefficients in the plot below.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui3 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N3\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"b2\", label = \"Quadradic Term Slope:\",\n              min = -1, max = 1, value = .5, step = 0.05),\n   sliderInput(\"b1\", label = \"Linear Term Slope:\",\n              min = -1, max = 1, value = 0, step = 0.05),\n   sliderInput(\"b0\", label = \"Intercept:\",\n              min = -1, max = 1, value = 0, step = 0.05),\n   sliderInput(\"tau\", label = \"Error Standard Deviation:\",\n              min = 0, max = 1, value = .5, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"plot3\")))\n\nserver3 &lt;- function (input,output) {\n  output$plot3 &lt;- renderPlot({\n  Y &lt;-  input$b2*X*X + input$b1*X + input$b0 + input$tau*Err\n  rho &lt;- cor(X,Y)\n  plot(X[1:input$N3],Y[1:input$N3],xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=input$b0,b=rho,col=\"red\")\n  lines(lowess(X,Y),col=\"blue\",lty=2)\n},width=288,height=288)\n}\nshinyApp(ui=ui3,server=server3)\nIf we try to run a linear regression when the relationship is curved, it will only tell us part of the story. The story it will tell is the red line, and not the blue curve."
  },
  {
    "objectID": "CorrelationExamples.html#broken-lines",
    "href": "CorrelationExamples.html#broken-lines",
    "title": "Scatterplot examples",
    "section": "Broken Lines",
    "text": "Broken Lines\nSometimes the reltionship changes somewhere through the range of the data. Often this is a ceiling effect: the effect of \\(X\\) on \\(Y\\) hits a ceiling. For example, in the first couple of years of teaching, the ability of new teachers rises very rapidly as they gain experience. But after 3–5 years, the effect levels out and the teachers grow much more slowly.\nIdeally we would fit two linear regression to these data splitting at a certain value of \\(X\\), \\(x_0\\). So,\n\\[ Y = \\begin{cases}\nb_{11} X + b_{01} + \\epsilon & \\text {when} X \\leq x_0 \\\\\nb_{12} X + b_{02} + \\epsilon & \\text {when} X \\ge x_0\n\\end{cases}\n\\]\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nNmax &lt;- 1000\nX &lt;- rnorm(Nmax)\nErr &lt;- rnorm(Nmax)\nui4 &lt;- fluidPage(\ninputPanel(\nselectInput(\"N4\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  sliderInput(\"b11\", label = \"First Slope:\",\n              min = -1, max = 1, value = .5, step = 0.05),\n   sliderInput(\"b12\", label = \"Second Slope:\",\n              min = -1, max = 1, value = 0, step = 0.05),\n   sliderInput(\"x0\", label = \"Crossover Point (x[0])\",\n              min = -1, max = 1, value = 0, step = 0.05),\n   sliderInput(\"tau1\", label = \"Error Standard Deviation:\",\n              min = 0, max = 1, value = .5, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"plot4\")))\n\nserver4 &lt;- function (input,output) {\n  output$plot4 &lt;- renderPlot({\n  b11 &lt;&lt;- input$b11\n  b12 &lt;&lt;- input$b12\n  x0 &lt;&lt;- input$x0\n  b02 &lt;&lt;- (b11-b12)*x0 \n  Y &lt;&lt;- ifelse(X&lt;x0, b11*X, b12*X + b02) + input$tau1*Err\n  rho &lt;&lt;- cor(X,Y)\n  plot(X[1:input$N4],Y[1:input$N4],xlab=\"X\",main=paste(\"Correlation =\",rho))\n  abline(a=input$b0,b=rho,col=\"red\")\n  abline(b=b11,a=0,col=\"blue\",lty=2)\n  abline(b=b12,a=b02,col=\"blue\",lty=2)\n},width=288,height=288)\n}\nshinyApp(ui=ui4,server=server4)\nCheck out this page to practice identifying these."
  },
  {
    "objectID": "SkewnessQQ.html",
    "href": "SkewnessQQ.html",
    "title": "Skewness Practice with Quantile-Quantile Plots",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. The data (sorted in order) are plotted on the Y axis and the quantiles of a standard normal (qnorm) distribution are plotted on the X axis. A normal distribution should appear as a straight line; positively skewed distributions will yield a ‘U’ shaped curve, and negatively skewed distributions a ‘C’ shaped curve. (An ‘S’ or ‘Z’ shaped curve indicates kurtosis, not skewness). Note: SPSS plots the normal quantiles on the Y axis and the data on the X: Which means that leptokurtic and platykurtic distributions will curve in the opposite direction from these Q-Q plots.\nYou can redraw from the same distributions by changing the sample size. (Bigger sample sizes are easier.)\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 500)),\nmainPanel(\n  plotOutput(\"QQplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$QQplots &lt;- renderPlot({\n    ## Draw random data \n    print(key)\n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n kdat &lt;- \n    data.frame(dat=do.call(c,kdat),\n               group=rep(names(key),\n                          each=input$nn))\n  \n  qqmath(~dat|group, data = kdat,\n          layout=c(3,1),horizontal=FALSE,\n         panel=function(x,...) {\n           panel.qqmathline(x,...)\n           panel.qqmath(x,...)\n           })\n\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "SkewnessQQ.html#skewness-determination-exercise.",
    "href": "SkewnessQQ.html#skewness-determination-exercise.",
    "title": "Skewness Practice with Quantile-Quantile Plots",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. The data (sorted in order) are plotted on the Y axis and the quantiles of a standard normal (qnorm) distribution are plotted on the X axis. A normal distribution should appear as a straight line; positively skewed distributions will yield a ‘U’ shaped curve, and negatively skewed distributions a ‘C’ shaped curve. (An ‘S’ or ‘Z’ shaped curve indicates kurtosis, not skewness). Note: SPSS plots the normal quantiles on the Y axis and the data on the X: Which means that leptokurtic and platykurtic distributions will curve in the opposite direction from these Q-Q plots.\nYou can redraw from the same distributions by changing the sample size. (Bigger sample sizes are easier.)\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 500)),\nmainPanel(\n  plotOutput(\"QQplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$QQplots &lt;- renderPlot({\n    ## Draw random data \n    print(key)\n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n kdat &lt;- \n    data.frame(dat=do.call(c,kdat),\n               group=rep(names(key),\n                          each=input$nn))\n  \n  qqmath(~dat|group, data = kdat,\n          layout=c(3,1),horizontal=FALSE,\n         panel=function(x,...) {\n           panel.qqmathline(x,...)\n           panel.qqmath(x,...)\n           })\n\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "SlopeStandardErrors.html",
    "href": "SlopeStandardErrors.html",
    "title": "Slope Variation",
    "section": "",
    "text": "library(shiny)\nn &lt;- 1000\nr &lt;- .6\nx &lt;- rnorm(n)\ny &lt;- r*x + sqrt(1-r^2)*rnorm(n)\ndat &lt;- data.frame(x,y)\n\nfit1 &lt;- lm(y~x,data=dat)\n\nplot(x,y,type=\"n\")\ncoef.sim &lt;- coef(sim(fit1))\nfor (i in 1:nrow(coef.sim)) {\n  abline(a=coef.sim[i,1],b=coef.sim[i,2],col=\"gray50\")\n}\npoints(x,y)\nabline(fit1)\n\n\n\n\n\n\n\nplot(coef.sim)\n\n\n\n\n\n\n\ncor(coef.sim)\n\n            (Intercept)           x\n(Intercept)  1.00000000 -0.01980956\nx           -0.01980956  1.00000000"
  },
  {
    "objectID": "NormalParams.html",
    "href": "NormalParams.html",
    "title": "Normal Parameters",
    "section": "",
    "text": "A parameter is a value that can be changed in a statistical model. For example, the mean and standard deviation are the parameters of the normal distribution, which is a model for a population. Changing the value of a parameter, changes the model. We can see that in the illustration below. Try changing the values of the mean and standard deviation and see what happens to the shape of the curve."
  },
  {
    "objectID": "NormalParams.html#inputs-and-outputs",
    "href": "NormalParams.html#inputs-and-outputs",
    "title": "Normal Parameters",
    "section": "Inputs and Outputs",
    "text": "Inputs and Outputs\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\n  inputPanel(\n  sliderInput(\"mn\", label = \"Mean:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sd\", label = \"Standard Deviation:\",\n              min = 0.2, max = 25, value = 10, step = 0.1)\n),\nmainPanel(\n  plotOutput(\"normcurve\")))\n\nserver &lt;- function (input,output) {\n  output$normcurve &lt;- \n  renderPlot({\n  mn &lt;- as.numeric(input$mn)\n  sd &lt;- as.numeric(input$sd)\n  curve(dnorm(x,mn,sd),xlim=c(0,100),ylim=c(0,.1),\n        main=paste(\"Normal distribution with mean\",mn,\n                   \"and standard deviation\",sd),\n        xlab=\"X\",ylab=\"Density\")\n\n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "NormalParams.html#scale-and-location-parameters",
    "href": "NormalParams.html#scale-and-location-parameters",
    "title": "Normal Parameters",
    "section": "Scale and Location Parameters",
    "text": "Scale and Location Parameters\nThe mean has a special role in the normal distribution; it determines where the center of the curve is. This makes it a location parameter.\nThe standard deviation has a special role in the normal distribution; it stretches and shrinks the curve around the mean. This makes it a scale parameter.\nSometimes, the effects of scale and location parameters can be hard to see. This is because most statistical graphics packages adjust the axis of the graph, so that the curve will always appear centered in the plotting window. In the normal curve above, I fixed the plotting window so that you can see the curve move. In the example below, I let the plotting window adjust with the curve. Notice how the curve stays the same, but the labels on the axis change.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"mn1\", label = \"Mean:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sd1\", label = \"Standard Deviation:\",\n              min = 0.2, max = 25, value = 10, step = 0.1)\n),\n mainPanel(plotOutput(\"normcurve1\")))\n \nserver1 &lt;- function(input,output) {\n output$normcurve1 &lt;- renderPlot({\n  mn1 &lt;- as.numeric(input$mn1)\n  sd1 &lt;- as.numeric(input$sd1)\n  curve(dnorm(x,mn1,sd1),xlim=c(mn1-3*sd1,mn1+3*sd1),\n        main=paste(\"Normal distribution with mean\",mn1,\n                   \"and standard deviation\",sd1),\n        xlab=\"X\",ylab=\"Density\")\n\n})\n}\nshinyApp(ui1, server1)"
  },
  {
    "objectID": "TestCI.html",
    "href": "TestCI.html",
    "title": "Confidence Intervals and Tests",
    "section": "",
    "text": "Suppose we are trying to find out the mean of a certain population, \\(\\mu\\). For example, suppose we are interested in the game eRebuild (https://mileresearch.coe.fsu.edu/erebuild) which aims to teach middle school students mathematics. Here \\(\\mu\\) would be how much a math a middle school student learns by playing the game. That is our target of inference.\nWe will make three simplifying assumptions:\n\nWe can measure “math”\n\n\n\nThis page is still under development."
  },
  {
    "objectID": "TestCI.html#confidence-intervals",
    "href": "TestCI.html#confidence-intervals",
    "title": "Confidence Intervals and Tests",
    "section": "",
    "text": "This page is still under development."
  },
  {
    "objectID": "Chi2calculator.html",
    "href": "Chi2calculator.html",
    "title": "Chi-squared Calculator",
    "section": "",
    "text": "In this tool, you input a \\(\\chi^2\\) score and the degrees of freedom, and get a corresponding \\(p\\)-value.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(x^2 &lt; X^2)\"=\"upper\",\n                          \"Lower tail: Pr(X^2 &lt; x^2)\"=\"lower\"),\n              selected = \"upper\"),\n  \n  numericInput(\"x2\", label = \"chi-squared value:\", value=2),\n  numericInput(\"df\", label = \"Degrees of Freedom\", value =1)\n),\nmainPanel(\n  plotOutput(\"probplot\")))\n\nserver &lt;- function (input,output) {\n  output$probplot &lt;- renderPlot({\n  q &lt;- input$x2\n  df &lt;- input$df\n  p &lt;- switch(input$tails,\n              upper=1-pchisq(q,df),\n              lower=pchisq(q,df))\n  xl &lt;- round(qchisq(.999,df),1)\n  curve(dchisq(x,df),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"chi-squared = \",round(q,3)),\n        xlim = c(0,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"Chi-squared\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dchisq(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(0,seq(0,q,0.01),q)\n           cord.yl &lt;- c(0,dchisq(seq(0,q,0.01),df),0)\n           if(!is.finite(cord.yl[2])) cord.yl[2] &lt;- cord.yl[3]\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         })\n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "Chi2calculator.html#chi-squared-probabilities.",
    "href": "Chi2calculator.html#chi-squared-probabilities.",
    "title": "Chi-squared Calculator",
    "section": "",
    "text": "In this tool, you input a \\(\\chi^2\\) score and the degrees of freedom, and get a corresponding \\(p\\)-value.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(x^2 &lt; X^2)\"=\"upper\",\n                          \"Lower tail: Pr(X^2 &lt; x^2)\"=\"lower\"),\n              selected = \"upper\"),\n  \n  numericInput(\"x2\", label = \"chi-squared value:\", value=2),\n  numericInput(\"df\", label = \"Degrees of Freedom\", value =1)\n),\nmainPanel(\n  plotOutput(\"probplot\")))\n\nserver &lt;- function (input,output) {\n  output$probplot &lt;- renderPlot({\n  q &lt;- input$x2\n  df &lt;- input$df\n  p &lt;- switch(input$tails,\n              upper=1-pchisq(q,df),\n              lower=pchisq(q,df))\n  xl &lt;- round(qchisq(.999,df),1)\n  curve(dchisq(x,df),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"chi-squared = \",round(q,3)),\n        xlim = c(0,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"Chi-squared\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dchisq(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(0,seq(0,q,0.01),q)\n           cord.yl &lt;- c(0,dchisq(seq(0,q,0.01),df),0)\n           if(!is.finite(cord.yl[2])) cord.yl[2] &lt;- cord.yl[3]\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         })\n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "Chi2calculator.html#chi-square-quantiles-critical-values.",
    "href": "Chi2calculator.html#chi-square-quantiles-critical-values.",
    "title": "Chi-squared Calculator",
    "section": "Chi-square Quantiles (Critical values).",
    "text": "Chi-square Quantiles (Critical values).\nIn this tool, you input a probability and degrees of freedom, and get a corresponding \\(X^2\\) score.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n   selectInput(\"tails1\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(x^2 &lt; X^2)\"=\"upper\",\n                          \"Lower tail: Pr(X^2 &lt; x^2)\"=\"lower\"),\n              selected = \"upper\"),\n  numericInput(\"pp\", label = \"Probability of shaded region:\", value=0.05, min=0, max=1),\n  numericInput(\"df1\", label = \"Degrees of Freedom\", value =1)\n),\nmainPanel(\n  plotOutput(\"quantplot\")))\n\nserver1 &lt;- function (input,output) {\n  output$quantplot &lt;- renderPlot({\n  pp &lt;- as.numeric(input$pp)\n  df1 &lt;- as.numeric(input$df1)\n  tails1 &lt;- input$tails1\n  if (is.null(tails1)) tails1 &lt;- \"upper\"\n  qq &lt;- switch(tails1,\n              upper=qchisq(1-pp,df1),\n              lower=qchisq(pp,df1))\n xl1 &lt;- round(qchisq(.999,df1),1)\n  curve(dchisq(x,df1),main=paste(\"Probability of shaded region = \",round(pp,3)),\n        sub=paste(\"X2(\",df1,\") = \",round(qq,3)),\n        xlim = c(0,xl1),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"Chi-squared\")\n   switch(tails1,\n         upper={\n           cord.xu1 &lt;- c(qq,seq(qq,xl1,0.01),xl1)\n           cord.yu1 &lt;- c(0,dchisq(seq(qq,xl1,0.01),df1),0)\n           polygon(cord.xu1,cord.yu1,col='plum')\n           axis(1,qq,paste(round(qq,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl1 &lt;- c(0,seq(0,qq,0.01),q)\n           cord.yl1 &lt;- c(0,dchisq(seq(0,qq,0.01),df1),0)\n           if(!is.finite(cord.yl[2])) cord.yl[2] &lt;- cord.yl[3]\n           polygon(cord.xl1,cord.yl1,col='plum')\n           axis(1,qq,paste(round(qq,3)),cex.axis=2)\n         })\n\n})\n}\nshinyApp(ui=ui1,server=server1)\nFor \\(\\chi^2\\) tests, one almost always looks at upper tail, and rarely look at the lower tail (does the data fit better than expected). Two-tailed tests are never (“What never?”, “No Never!”, “What Never?”, “Well hardly ever!”, Gilbert & Sulivan, HMS Pinfore) done."
  },
  {
    "objectID": "Studenttcalculator.html",
    "href": "Studenttcalculator.html",
    "title": "Student’s Calculator",
    "section": "",
    "text": "In this tool, you input a \\(t\\) score and the degrees of freedom, and get a corresponding \\(p\\)-value.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(t &lt; T)\"=\"upper\",\n                          \"Lower tail: Pr(T &lt; t)\"=\"lower\",\n                          \"Both tails: Pr(T &lt;-t or t&lt; T)\"=\"both\",\n                          \"Middle: Pr(-t &lt; T &lt; t)\"=\"middle\"),\n              selected = \"both\"),\n  \n  numericInput(\"z\", label = \"t-value:\", value=2),\n  numericInput(\"df\", label = \"Degrees of Freedom (n-1 or n1 + n2 -2)\", value =30)\n),\nmainPanel(\n  plotOutput(\"tcurve\")))\n\nserver &lt;- function (input,output) {\n  output$tcurve &lt;- \nrenderPlot({\n  q &lt;- input$z\n  df &lt;- input$df\n  p &lt;- switch(input$tails,\n              upper=1-pt(q,df),\n              lower=pt(q,df),\n              both=2*pt(-abs(q),df),\n              middle=1-2*pt(-abs(q),df))\n  xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n  curve(dt(x,df),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"t = \",round(q,3)),\n        xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"t\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q)\n           cord.yl &lt;- c(0,dt(seq(-xl,q,0.01),df),0)\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         both={\n           q &lt;- abs(q)\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q)\n           cord.yl &lt;- c(0,dt(seq(-xl,-q,0.01),df),0)\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         },\n         middle={\n           q &lt;- abs(q)\n           cord.xmid &lt;- c(-q,seq(-q,q,0.01),q)\n           cord.ymid &lt;- c(0,dt(seq(-q,q,0.01),df),0)\n           polygon(cord.xmid,cord.ymid,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         })\n  \n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "Studenttcalculator.html#students-t-probabilities.",
    "href": "Studenttcalculator.html#students-t-probabilities.",
    "title": "Student’s Calculator",
    "section": "",
    "text": "In this tool, you input a \\(t\\) score and the degrees of freedom, and get a corresponding \\(p\\)-value.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(t &lt; T)\"=\"upper\",\n                          \"Lower tail: Pr(T &lt; t)\"=\"lower\",\n                          \"Both tails: Pr(T &lt;-t or t&lt; T)\"=\"both\",\n                          \"Middle: Pr(-t &lt; T &lt; t)\"=\"middle\"),\n              selected = \"both\"),\n  \n  numericInput(\"z\", label = \"t-value:\", value=2),\n  numericInput(\"df\", label = \"Degrees of Freedom (n-1 or n1 + n2 -2)\", value =30)\n),\nmainPanel(\n  plotOutput(\"tcurve\")))\n\nserver &lt;- function (input,output) {\n  output$tcurve &lt;- \nrenderPlot({\n  q &lt;- input$z\n  df &lt;- input$df\n  p &lt;- switch(input$tails,\n              upper=1-pt(q,df),\n              lower=pt(q,df),\n              both=2*pt(-abs(q),df),\n              middle=1-2*pt(-abs(q),df))\n  xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n  curve(dt(x,df),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"t = \",round(q,3)),\n        xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"t\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q)\n           cord.yl &lt;- c(0,dt(seq(-xl,q,0.01),df),0)\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         both={\n           q &lt;- abs(q)\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df),0)\n           polygon(cord.xu,cord.yu,col='plum')\n           cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q)\n           cord.yl &lt;- c(0,dt(seq(-xl,-q,0.01),df),0)\n           polygon(cord.xl,cord.yl,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         },\n         middle={\n           q &lt;- abs(q)\n           cord.xmid &lt;- c(-q,seq(-q,q,0.01),q)\n           cord.ymid &lt;- c(0,dt(seq(-q,q,0.01),df),0)\n           polygon(cord.xmid,cord.ymid,col='plum')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         })\n  \n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "Studenttcalculator.html#students-t-quantiles-critical-values.",
    "href": "Studenttcalculator.html#students-t-quantiles-critical-values.",
    "title": "Student’s Calculator",
    "section": "Student’s t Quantiles (Critical values).",
    "text": "Student’s t Quantiles (Critical values).\nIn this tool, you input a probability and degrees of freedom, and get a corresponding t score.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(shiny)\nui1 &lt;- fluidPage(\n  inputPanel( \n    selectInput(\"tails1\", label = \"Which tails\", \n                choices = c(\"Upper tail: Pr(t &lt; T)\"=\"upper\",\n                            \"Lower tail: Pr(T &lt; t)\"=\"lower\", \n                            \"Both tails: Pr(T &lt;-t or t&lt; T)\"=\"both\", \n                            \"Middle: Pr(-t &lt; T &lt; t)\"=\"middle\"),\n                selected = \"both\"),\n\n  numericInput(\"p\", label = \"Probability of shaded region:\", \n               value=0.05, min=0, max=1), \nnumericInput(\"df1\", label = \"Degrees of Freedom (n-1 or n1 + n2 -2)\", \n             value =30) ),\nmainPanel(\n  plotOutput(\"tcurve1\")))\n\nserver1 &lt;- function (input,output) {\n  output$tcurve1 &lt;- \nrenderPlot({ \n  pp &lt;- input$p\n  df1 &lt;- input$df1 \n  q &lt;- switch(input$tails1,\n              upper=qt(1-pp,df1),\n              lower=qt(pp,df1),\n              both=qt(1-pp/2,df1),\n              middle=qt(.5+pp/2,df1))\n  xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n  curve(dt(x,df1),main=paste(\"Probability of shaded region = \",round(pp,3)),\n        sub=paste(\"t(\",df1,\") = \",round(q,3)),\n        xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"t\")\n  switch(input$tails1, \n         upper={ cord.xu &lt;- c(q,seq(q,xl,0.01),xl) \n         cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df1),0) \n         polygon(cord.xu,cord.yu,col='plum')\n         axis(1,q,paste(round(q,3)),cex.axis=2) }, \n         lower={ cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q) \n          cord.yl &lt;- c(0,dt(seq(-xl,q,0.01),df1),0)\n          polygon(cord.xl,cord.yl,col='plum')\n          axis(1,q,paste(round(q,3)),cex.axis=2) }, \n         both={ q &lt;- abs(q) \n         cord.xu &lt;- c(q,seq(q,xl,0.01),xl) \n         cord.yu &lt;- c(0,dt(seq(q,xl,0.01),df1),0) \n         polygon(cord.xu,cord.yu,col='plum') \n         cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q) \n         cord.yl &lt;- c(0,dt(seq(-xl,-q,0.01),df1),0) \n         polygon(cord.xl,cord.yl,col='plum') \n         axis(1,q,paste(round(q,3)),cex.axis=2)\n         axis(1,-q,paste(-round(q,3)),cex.axis=2) }, \n         middle={ q &lt;- abs(q) \n         cord.xmid &lt;- c(-q,seq(-q,q,0.01),q) \n         cord.ymid &lt;- c(0,dt(seq(-q,q,0.01),df1),0)\n         polygon(cord.xmid,cord.ymid,col='plum')\n         axis(1,q,paste(round(q,3)),cex.axis=2)\n         axis(1,-q,paste(-round(q,3)),cex.axis=2) \n         })\n\n})\n}\nshinyApp(ui=ui1,server=server1)"
  },
  {
    "objectID": "PoissonParms.html",
    "href": "PoissonParms.html",
    "title": "Poisson Params",
    "section": "",
    "text": "The Poisson distribution is a distribution for counts of events.\nAssume the following things:\n\nEvents happen at a rate \\(\\lambda\\) per unit interval on average.\nCount the number of events in a time interval of \\(T\\) units.\nAssume that the events happen at a uniform rate throughout the interval (e.g., we don’t get more customers in the morning than the afternoon).\n\nThe the number of events, \\(X\\), follows a Poisson distribution.\n\\[P(X=x) = \\frac{(\\lambda T)^x}{x!}e^{-\\lambda T}\\] The distribution looks like:\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nui &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"mean\", label = \"Expected number of events per unit time\",\n              min=0, max=100, value=3.5, step=1),\n  \n  sliderInput(\"t\", label = \"Time Interval:\",\n              min = 0, max = 365, value = 1, step = 1)\n),\nmainPanel(\n  plotOutput(\"poissoncurve\")))\n\nserver &lt;- function (input,output) {\n  output$poissoncurve &lt;- renderPlot({\n  mu &lt;- as.numeric(input$mean) * as.numeric(input$t)\n  n &lt;- mu + 3* sqrt(mu)\n  dat &lt;- data.frame(x=0:n,y=dpois(0:n,mu))\n  ggplot(dat,aes(x,y)) +geom_col()  \n\n})\n}\nshinyApp(ui=ui,server=server)\nThe mean and variance of the Poisson distribution are \\(\\lambda T\\) and \\(\\lambda T\\).\nAs the variance grows pretty quickly, statisticians will often take the square root of count data (especially if there is heteroscedasticity) to stabilize the variance."
  },
  {
    "objectID": "KurtosisPractice.html",
    "href": "KurtosisPractice.html",
    "title": "Kurtosis Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions. A normal curve is drawn over the top for reference.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"histograms\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$histograms &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(rev(kdat))\n  \n  histogram(reformulate(termlabels = names(kdat)), \n                        data = kdat,\n          xlab = \"X\", type = \"density\",\n          panel = function(x, ...) {\n              panel.histogram(x, ...)\n              panel.mathdensity(dmath = dnorm, col = \"black\",\n                                args = list(mean=mean(x),sd=sd(x)))\n          }, layout=c(1,3),\n          scales=list(y=list(draw=FALSE)))\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "KurtosisPractice.html#kurtosis-determination-exercise.",
    "href": "KurtosisPractice.html#kurtosis-determination-exercise.",
    "title": "Kurtosis Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions. A normal curve is drawn over the top for reference.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"histograms\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$histograms &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(rev(kdat))\n  \n  histogram(reformulate(termlabels = names(kdat)), \n                        data = kdat,\n          xlab = \"X\", type = \"density\",\n          panel = function(x, ...) {\n              panel.histogram(x, ...)\n              panel.mathdensity(dmath = dnorm, col = \"black\",\n                                args = list(mean=mean(x),sd=sd(x)))\n          }, layout=c(1,3),\n          scales=list(y=list(draw=FALSE)))\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "LawOfLargeNumbers.html",
    "href": "LawOfLargeNumbers.html",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "This is pretty close to the frequency definition of probability. Suppose the probability of some event is \\(p\\). Suppose further than we sample \\(N\\) times from the process that generates this event. Let \\(p_N\\) be the proportion of times the event occurs in \\(N\\) trials. As \\(N\\) gets bigger and bigger, \\(p_N\\) gets closer and closer to \\(p\\).\n(Skip this unless you are good with calculus.) This is one of those epsilon-delta theorems. So let \\(\\delta\\) be a difference from \\(p\\) and let \\(\\epsilon\\) be a small probability. For any \\(\\epsilon\\) and \\(\\delta\\), there exists an \\(N\\) such that \\(P(|p_N-p|&gt;\\delta) &lt; \\epsilon\\).\n\n\nIn the picture below, pick a probability \\(p\\) and a sample size \\(N\\). The computer will generate samples up to \\(N\\) and plot \\(p_N\\).\nThe \\(\\delta\\)-line is an error bound plus or minus \\(\\delta\\) units from the target \\(p\\). This is a target so you can judge how close you got.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n  \n  sliderInput(\"p\", label = \"Probability of event (p)\",\n              min = 0, max = 1, value = .5, step = 0.01),\n  sliderInput(\"delta\", label = \"Distance of reference line from target (delta)\",\n              min = 0, max = .1, value = .05, step = 0.005)\n\n),\nmainPanel(\n  plotOutput(\"converge\")))\n\nserver &lt;- function (input,output) {\n  output$converge &lt;- renderPlot({\n  x &lt;- runif(input$N) &lt; input$p\n  pn &lt;- cumsum(x)/1:input$N\n  plot(1:input$N,pn,xlab=\"Number of Trials\",ylab=\"Proportion Success\",\n       type=\"l\")\n  abline(h=input$p,col=\"blue\")\n  abline(h=input$p+input$delta,col=\"skyblue\")\n  abline(h=input$p-input$delta,col=\"skyblue\")\n})\n}\nshinyApp(ui=ui,server=server)\n\n\n\nWe can use the Law of Large Numbers to prove an important theorem. As the sample size gets larger and larger, the sample looks more and more like the population it is drawn from.\n Technically, the Law of Large Numbers refers to the result above. But we can use it so show a very important basis of statistics. Suppose we have some kind of distribution, \\(F(x)\\), that generates numbers, \\(X\\). Recall that the definition of \\(F(x)=\\Pr(X \\leq x)\\).\n Draw a sample of size \\(N\\) from this distribution. Now consider the sampled data points \\(X_1,\\ldots,X_N\\), and consider sampling a new value \\(Y\\) from that distribution. Let \\(F_N(y) = \\Pr(Y \\leq y)\\). This is sometimes called the bootstrap distribution.\n By the law of large numbers, for every \\(y\\), as \\(N\\) gets large \\(F_N(y) \\rightarrow F(y)\\). So the sample distribution \\(F_N()\\) converges to the \\(F()\\).\n\n\n\nPick a distribution: * Normal – standard normal * Exponential – highly skewed * Gamma (shape = 3) – skewed * T (df =3) – high kurtosis\nSlide the sample size up and down, notice how the empirical distribution function and histogram coverge to the theoretical distribution function and density.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\n\nnmax &lt;- 1000\nrdist &lt;- list(Normal=rnorm, Exponential = rexp, \n              Gamma = function(n) rgamma(n,3),\n              \"T\" = function(n) rt(n,3))\npdist &lt;- list(Normal=pnorm, Exponential = pexp, \n              Gamma = function(q) pgamma(q,3),\n              \"T\" = function(q) pt(q,3))\nddist &lt;- list(Normal=dnorm, Exponential = dexp, \n              Gamma = function(x) dgamma(x,3),\n              \"T\" = function(x) dt(x,3))\n\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"dist\",label=\"Distribution Type\",\n              choices=c(\"Normal\",\"Exponential\",\"Gamma\",\"T\"),\n              selected=\"Normal\"),\n   sliderInput(\"NN\", label = \"Maximum Sample Size:\",\n              min = 25, max=nmax, value=100, step=5)\n\n),\nmainPanel(\n  plotOutput(\"dists\")))\n\nserver1 &lt;- function (input,output) {\n  output$dists &lt;- renderPlot({\n  XX &lt;- do.call(rdist[[input$dist]],list(nmax))\n  Fn &lt;-ecdf(XX[1:input$NN])\n  layout(matrix(c(1,2),1,2))\n  \n  plot(Fn, main=paste(\"Actual vs Empirical Distribution Function, N=\",input$NN))\n  curve(do.call(pdist[[input$dist]],list(x)),add=TRUE,lty=2,col=\"red\")\n  \n  hist(XX[1:input$NN], probability = TRUE,\n       main=paste(\"Actual vs Empirical Density Function, N=\",input$NN),xlab=\"X\")\n  curve(do.call(ddist[[input$dist]],list(x)),add=TRUE,lty=2,col=\"red\")\n  \n})\n}\nshinyApp(ui=ui1,server=server1)\nSee also the animated version."
  },
  {
    "objectID": "LawOfLargeNumbers.html#a-demonstration.",
    "href": "LawOfLargeNumbers.html#a-demonstration.",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "In the picture below, pick a probability \\(p\\) and a sample size \\(N\\). The computer will generate samples up to \\(N\\) and plot \\(p_N\\).\nThe \\(\\delta\\)-line is an error bound plus or minus \\(\\delta\\) units from the target \\(p\\). This is a target so you can judge how close you got.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N\", label = \"Maximum Sample Size:\",\n              choices = c(50, 100, 200, 500, 1000), selected = 200),\n  \n  sliderInput(\"p\", label = \"Probability of event (p)\",\n              min = 0, max = 1, value = .5, step = 0.01),\n  sliderInput(\"delta\", label = \"Distance of reference line from target (delta)\",\n              min = 0, max = .1, value = .05, step = 0.005)\n\n),\nmainPanel(\n  plotOutput(\"converge\")))\n\nserver &lt;- function (input,output) {\n  output$converge &lt;- renderPlot({\n  x &lt;- runif(input$N) &lt; input$p\n  pn &lt;- cumsum(x)/1:input$N\n  plot(1:input$N,pn,xlab=\"Number of Trials\",ylab=\"Proportion Success\",\n       type=\"l\")\n  abline(h=input$p,col=\"blue\")\n  abline(h=input$p+input$delta,col=\"skyblue\")\n  abline(h=input$p-input$delta,col=\"skyblue\")\n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "LawOfLargeNumbers.html#convergence-of-distributions-boot-strap-distribution",
    "href": "LawOfLargeNumbers.html#convergence-of-distributions-boot-strap-distribution",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "We can use the Law of Large Numbers to prove an important theorem. As the sample size gets larger and larger, the sample looks more and more like the population it is drawn from.\n Technically, the Law of Large Numbers refers to the result above. But we can use it so show a very important basis of statistics. Suppose we have some kind of distribution, \\(F(x)\\), that generates numbers, \\(X\\). Recall that the definition of \\(F(x)=\\Pr(X \\leq x)\\).\n Draw a sample of size \\(N\\) from this distribution. Now consider the sampled data points \\(X_1,\\ldots,X_N\\), and consider sampling a new value \\(Y\\) from that distribution. Let \\(F_N(y) = \\Pr(Y \\leq y)\\). This is sometimes called the bootstrap distribution.\n By the law of large numbers, for every \\(y\\), as \\(N\\) gets large \\(F_N(y) \\rightarrow F(y)\\). So the sample distribution \\(F_N()\\) converges to the \\(F()\\)."
  },
  {
    "objectID": "LawOfLargeNumbers.html#demonstration-of-convergence-of-distributions.",
    "href": "LawOfLargeNumbers.html#demonstration-of-convergence-of-distributions.",
    "title": "Law of Large Numbers",
    "section": "",
    "text": "Pick a distribution: * Normal – standard normal * Exponential – highly skewed * Gamma (shape = 3) – skewed * T (df =3) – high kurtosis\nSlide the sample size up and down, notice how the empirical distribution function and histogram coverge to the theoretical distribution function and density.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\n\nnmax &lt;- 1000\nrdist &lt;- list(Normal=rnorm, Exponential = rexp, \n              Gamma = function(n) rgamma(n,3),\n              \"T\" = function(n) rt(n,3))\npdist &lt;- list(Normal=pnorm, Exponential = pexp, \n              Gamma = function(q) pgamma(q,3),\n              \"T\" = function(q) pt(q,3))\nddist &lt;- list(Normal=dnorm, Exponential = dexp, \n              Gamma = function(x) dgamma(x,3),\n              \"T\" = function(x) dt(x,3))\n\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"dist\",label=\"Distribution Type\",\n              choices=c(\"Normal\",\"Exponential\",\"Gamma\",\"T\"),\n              selected=\"Normal\"),\n   sliderInput(\"NN\", label = \"Maximum Sample Size:\",\n              min = 25, max=nmax, value=100, step=5)\n\n),\nmainPanel(\n  plotOutput(\"dists\")))\n\nserver1 &lt;- function (input,output) {\n  output$dists &lt;- renderPlot({\n  XX &lt;- do.call(rdist[[input$dist]],list(nmax))\n  Fn &lt;-ecdf(XX[1:input$NN])\n  layout(matrix(c(1,2),1,2))\n  \n  plot(Fn, main=paste(\"Actual vs Empirical Distribution Function, N=\",input$NN))\n  curve(do.call(pdist[[input$dist]],list(x)),add=TRUE,lty=2,col=\"red\")\n  \n  hist(XX[1:input$NN], probability = TRUE,\n       main=paste(\"Actual vs Empirical Density Function, N=\",input$NN),xlab=\"X\")\n  curve(do.call(ddist[[input$dist]],list(x)),add=TRUE,lty=2,col=\"red\")\n  \n})\n}\nshinyApp(ui=ui1,server=server1)\nSee also the animated version."
  },
  {
    "objectID": "Z-scores.html",
    "href": "Z-scores.html",
    "title": "Standardized Variables",
    "section": "",
    "text": "A (interval or ratio) variable on a raw score can be standardized to have mean 0 and standard deviation 1 by simply subtracting the mean and dividing by the standard deviation. This formula come in two flavors: one using the population mean and standard deviation (mu and sigma) and one using the sample statistics (x-bar and s). The subscripts are to remind you what variable you are using, as there is often both an X and Y wandering around.\n\\[ z = \\frac{x-\\mu_X}{\\sigma_X}; \\qquad Z = \\frac{X-\\bar X}{s_X} \\]\n#| standalone: true\n#| viewerHeight: 300\nlibrary(shiny)\n\nui &lt;- fluidPage(\ninputPanel(\n  numericInput(\"mn\", label = \"Mean of X:\",value=0,width=130),\n  \n  numericInput(\"sd\", label = \"Standard Deviation of X:\",value=1,\n              min = 0, width=130),\n  numericInput(\"X\", label = \"x:\",value=0, width=130)\n),\nmainPanel(\nh3(textOutput(\"z\")))\n)\n\nserver &lt;- function (input,output) {\n  output$z &lt;- renderText({\n   paste(\"z = \",round((input$X-input$mn)/input$sd,3))\n})\n}\nshinyApp(ui=ui,server=server)\nOften the next step is to look up the Z score on a normal calculator."
  },
  {
    "objectID": "Z-scores.html#standardizing-a-raw-score.",
    "href": "Z-scores.html#standardizing-a-raw-score.",
    "title": "Standardized Variables",
    "section": "",
    "text": "A (interval or ratio) variable on a raw score can be standardized to have mean 0 and standard deviation 1 by simply subtracting the mean and dividing by the standard deviation. This formula come in two flavors: one using the population mean and standard deviation (mu and sigma) and one using the sample statistics (x-bar and s). The subscripts are to remind you what variable you are using, as there is often both an X and Y wandering around.\n\\[ z = \\frac{x-\\mu_X}{\\sigma_X}; \\qquad Z = \\frac{X-\\bar X}{s_X} \\]\n#| standalone: true\n#| viewerHeight: 300\nlibrary(shiny)\n\nui &lt;- fluidPage(\ninputPanel(\n  numericInput(\"mn\", label = \"Mean of X:\",value=0,width=130),\n  \n  numericInput(\"sd\", label = \"Standard Deviation of X:\",value=1,\n              min = 0, width=130),\n  numericInput(\"X\", label = \"x:\",value=0, width=130)\n),\nmainPanel(\nh3(textOutput(\"z\")))\n)\n\nserver &lt;- function (input,output) {\n  output$z &lt;- renderText({\n   paste(\"z = \",round((input$X-input$mn)/input$sd,3))\n})\n}\nshinyApp(ui=ui,server=server)\nOften the next step is to look up the Z score on a normal calculator."
  },
  {
    "objectID": "Z-scores.html#going-from-a-standard-z-score-to-a-raw-score.",
    "href": "Z-scores.html#going-from-a-standard-z-score-to-a-raw-score.",
    "title": "Standardized Variables",
    "section": "Going from a standard (z) score to a raw score.",
    "text": "Going from a standard (z) score to a raw score.\nSolving the above equations for X allows the z-score to be translated back into a raw score. Often, a new variable is needed, so lets change the variables from X to Y. Once again, there are two variants based on whether sample or population means and standard deviations are used:\n\\[ y = \\sigma_Y z + \\mu_Y\\, ; \\qquad Y = s_Y Z + \\bar{Y}\\ .\\]\n#| standalone: true\n#| viewerHeight: 300\nlibrary(shiny)\n\nui1 &lt;- fluidPage(\ninputPanel(\n  numericInput(\"mny\", label = \"Mean of Y:\",value=0,width=130),\n  \n  numericInput(\"sdy\", label = \"Standard Deviation of Y:\",value=1,\n              min = 0, width=130),\n  numericInput(\"ZZ\", label = \"z:\",value=0, width=130)\n),\nmainPanel(h3(textOutput(\"Y\")))\n)\n\nserver1 &lt;- function (input,output) {\n  output$Y &lt;- renderText({\n paste(\"Y = \",round(input$ZZ*input$sdy+input$mny,3))\n})\n}\nshinyApp(ui=ui1,server=server1)\nNote that these formulae are well worth memorizing, as they will come up over and over again."
  },
  {
    "objectID": "Independence.html",
    "href": "Independence.html",
    "title": "Independence",
    "section": "",
    "text": "Imagine a population which is split into two groups: \\(A\\) and \\(B\\). We select 100 people at random and ask them a question, which has two answers yes and no. Define the following quantities:\nDefine the following values (row and column totals):\nDividing any of those numbers by \\(N_{xx}\\) produces a corresponding proportion \\(P_{xx}\\) (which can be interpreted as a probability or proportion.\nSuppose group membership and the answer to the question are statistically indepedent. In the diagram below, adjust \\(P_{A+}\\) and \\(P_{+y}\\) to make a two-by-two table:\nThere are two things you should notice about the independent data.\nWe could say that the row and column proportions are always the same.\nAnother way to think about this is to say:"
  },
  {
    "objectID": "Independence.html#dependent",
    "href": "Independence.html#dependent",
    "title": "Independence",
    "section": "Dependent",
    "text": "Dependent\nTo make the table dependence, we need to add another parameter to the model to specify the degree of dependence.\nFor a two-by-two table, the odds ratio is as fairly easy to understand choice: \\[ OR = \\frac{P_{Ay}/P_{An}}{P_{By}/P_{Bn}}\\] When group and answer are indpendent the cross product ratio should be 1.\nIf Group \\(A\\) is more likely to answer yes, then the ratio should be bigger than 1.\nIf Group \\(B\\) is more likely to answer yes, then the ratio should be less than one.\n#| standalone: true\n#| viewerHeight: 300\nlibrary(shiny)\nN &lt;- 100\nui1 &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"pad\", label = \"P(Member of Group A)\",\n              min = 0, max = 1, value = .5, step = 0.05),\n  sliderInput(\"pyd\", label = \"P(Answered `yes`)\",\n              min = 0, max = 1, value = .5, step = 0.05),\n  selectInput(\"OR\",label=\"Odds Ratio\",\n              choices=c(\"1/4\",\"1/3\",\"1/2\",\"2/3\",\"1\",\"3/2\",\"2\",\"3\",\"4\"), selected =\"1\")\n),\nmainPanel(\n  tableOutput(\"table1\"),\n  plotOutput(\"mosaic1\")))\n\nserver1 &lt;- function (input,output) {\n\ntabd &lt;- reactive({\n  pa &lt;-input$pad\n  py &lt;-input$pyd\n  OR &lt;- eval(str2lang(input$OR))\n  cat(pa,py,OR,\"\\n\")\n  if (OR == 1) {\n    pay &lt;- pa*py\n  } else {\n    S &lt;- sqrt((1+(pa+py)*(OR-1))^2 + 4*OR*(1-OR)*pa*py)\n    cat(S,\"\\n\")\n    pay &lt;- (1+(pa+py)*(OR-1)-S)/2/(OR-1)\n    cat(pay,\"\\n\")\n  }\n  matrix(N*c(pay,(pa-pay),(py-pay),(1-py-pa+pay)),\n        2,2, byrow=TRUE,\n        dimnames=list(Group=c(\"A\",\"B\"),Answer=c(\"y\",\"n\")))\n})\noutput$table1 &lt;- renderTable(tabd(),rownames=TRUE, digits=1)\noutput$mosaic1 &lt;- renderPlot(mosaicplot(tabd()),color=TRUE,main=\"Dependent data\")\n}\nshinyApp(ui=ui1,server=server1)"
  },
  {
    "objectID": "EffectSize.html",
    "href": "EffectSize.html",
    "title": "Effect Size Calculator",
    "section": "",
    "text": "If the units of a test are well known, the size of an effect is pretty easy to understand. For example, if a study found that on average, people on this diet lost about 5 lbs (2.5 kg) in a week, most people would know what that means.\nIn many other cases, the size of the statistic depends on the measure used to determine it. For example, if a researcher finds that students on average gain 5 points on a math test after playing a mathematical game, is that a big gain or a small gain? Unlike the weight loss experiment, we don’t have the experience with that test to judge.\nThere are a number of measures that can be used to put the size of the effect into perspective. Jacob Cohen proposed dividing the difference by the population standard deviation: \\[ d = \\frac{\\mu_1 -\n\\mu_0}{\\sigma} .\\] This has the advantage of putting things on a readily apparent scale. So, suppose in the example of the math game above, the effect size was \\(d=.1\\). If the game was just a short thing that took an hour, that would be a pretty big deal. On the other hand, if the students needed to play all year to get that effect, it might not be so good."
  },
  {
    "objectID": "EffectSize.html#simple-case-one-group",
    "href": "EffectSize.html#simple-case-one-group",
    "title": "Effect Size Calculator",
    "section": "Simple Case – One Group",
    "text": "Simple Case – One Group\nWhen we are looking at a single group, the definition of the effect size is fairly simple. The single variable usually is a difference score; e.g., posttest - pretest. The standard deviation of interest is the standard deviation of the population of difference scores (estimated by the sample).\n#| standalone: true\n#| viewerHeight: 200\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  numericInput(\"mn\", label = \"Mean Difference:\",value=0,width=130),\n  \n  numericInput(\"sd\", label = \"Standard Deviation of Difference:\",value=1,\n              min = 0, width=130)\n),\nmainPanel(\n  h3(textOutput(\"effect\"))))\n\nserver &lt;- function (input,output) {\n  output$effect &lt;-  renderText({\n paste(\"Effect size = \",round(input$mn/input$sd,2))\n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "EffectSize.html#complex-case-two-groups",
    "href": "EffectSize.html#complex-case-two-groups",
    "title": "Effect Size Calculator",
    "section": "Complex Case – Two Groups",
    "text": "Complex Case – Two Groups\nConceptually, the two group case is just as simple. The numerator is the difference between the group means. The denominator is the standard deviation of the population. There is a problem: we don’t have one population, we have two: Group 1 and Group 2. What to do?\nThe answer is to take an average. Actually, we take the average of the variances, and then take the square root. There is one further complication, the two groups might have different sizes. In this case, we take a weighted average, weighting by the degrees of freedom (sample size -1). Here is the formula: \\[ \\sigma^2_{pooled} =\n\\frac{(N_1 -1)\\sigma^2_1 +(N_2 -1)\\sigma^2_2}{N_1+N_2-1} ,\\] take the square root of that to get the standard deviation.\nAlthough one could calculate that by hand, the calculator below will do the job for you, and then calculate the effect size at the same time. Note that the pooled SD should always be in between the SDs of group 1 and group 2. For a rough and ready estimate, you could just take the number halfway between the two.\n#| standalone: true\n#| viewerHeight: 200\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  fluidRow(column(6,\"Statistics for Group 1 (experimental/focal)\",\n                    numericInput(\"mn1\", label = \"Mean:\",value=0,width=230),\n                    numericInput(\"sd1\", label = \"SD:\",value=1,min = 0, width=230),\n                    numericInput(\"N1\",label=\"N:\",value=5,min=0,step=1,width=230)),\n           column(6,\"Statistics for Group 2 (control/reference)\",\n                    numericInput(\"mn2\", label = \"Mean:\",value=0,width=230),\n                    numericInput(\"sd2\", label = \"SD:\",value=1,min = 0, width=230),\n                    numericInput(\"N2\",label=\"N:\",value=5,min=0,step=1,width=230))\n  )\n                    \n),\nmainPanel(\n  h3(textOutput(\"effect2\"))))\n\nserver1 &lt;- function (input,output) {\n  output$effect2 &lt;- renderText({\n  mdiff &lt;- input$mn1-input$mn2\n  spooled &lt;- sqrt(((input$N1-1)*input$sd1^2+\n                   (input$N2-1)*input$sd2^2)/\n    (input$N1+input$N2-2))\n paste(\"Mean difference = \", round(mdiff,2), \", Pooled SD = \", round(spooled,3),\n      \", Effect size = \",round(mdiff/spooled,2))\n})\n}\nshinyApp(ui=ui1,server=server1)\nIf you want to do these calculations away from the internet, you can download this Excel spreadsheet which has the formula baked in: https://pluto.coe.fsu.edu/effectSize_d.xls\n\nHow big is big? Cohen’s guide to effect sizes.\nReally, the answer is entirely discipline specific. In Physics, it is quite common to be able to exert large forces and to measure very accurately, and hence be able to get very large effect sizes. In the social sciences and education, it often hard to control all of the variables that might affect the outcome, so the typical effect sizes are quite small.\nJacob Cohen presented a guideline for use in power analyses. This was really just for when you had no idea of what the size of the effect would be. He suggested:\n\n\n\nEffect\nd\n\n\n\n\nSmall\n.2\n\n\nMedium\n.5\n\n\nLarge\n.8\n\n\n\nHowever, these are really not designed for interpreting effects. There instead, you should compare to what other similar interventions are achieving.\nDylan Wiliams suggests that for educational applications, you might try dividing by the effect size of a year’s growth for that grade level. This changes rapidly with 1st graders growing nearly 2 SDs while a years worth of growth for a high school student is closer to .5 SDs. In high school, an effect size of .25 would be half a years growth, which is considerable.\n(Of course to measure small effects, you also need a very sensitive instrument, which in education means a longer test; the cost of testing is often prohibitive.)"
  },
  {
    "objectID": "KurtosisBoxplots.html",
    "href": "KurtosisBoxplots.html",
    "title": "Kurtosis Boxplot Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"boxplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$boxplots &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(kdat)\n  \n  boxplot(kdat, xlab = \"X\")\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly."
  },
  {
    "objectID": "KurtosisBoxplots.html#kurtosis-determination-exercise.",
    "href": "KurtosisBoxplots.html#kurtosis-determination-exercise.",
    "title": "Kurtosis Boxplot Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"boxplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$boxplots &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(kdat)\n  \n  boxplot(kdat, xlab = \"X\")\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly."
  },
  {
    "objectID": "KurtosisBoxplots.html#what-to-look-for",
    "href": "KurtosisBoxplots.html#what-to-look-for",
    "title": "Kurtosis Boxplot Practice",
    "section": "What to look for",
    "text": "What to look for\n\nIn a normal distribution the whiskers extend about 1.5 box-lengths (IQR)s from the hinges (sides of the box).\n\nIf the box is long compared to the whiskers, this is a sign the distribuiton is platykurtic.\nIf the box is short compared to the whiskers, this is a sign the distribution is leptokurtic.\n\nThe whiskers only extend to the farthest data point within 1.5 IQRs from the box. So if there is high kurtosis, this will show up as lots of outliers.\n\nWith a normal distribution, there is often 1–2 outliers per 100 data points. Much more than that is a sign of high kurtosis.\n\nIs the length of the box (IQR) long compared to the length of the whiskers?"
  },
  {
    "objectID": "KurtosisBoxplots.html#related-pages",
    "href": "KurtosisBoxplots.html#related-pages",
    "title": "Kurtosis Boxplot Practice",
    "section": "Related Pages:",
    "text": "Related Pages:\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "GammaParams.html",
    "href": "GammaParams.html",
    "title": "Normal Parameters",
    "section": "",
    "text": "The exponential distribution is a distribution often used for waiting times. Suppose the expected time to the next arrival is \\(\\theta\\). Then the probability that person will come at exactly time \\(x\\) is \\(f(x|\\theta) =\n\\frac{1}{\\theta}e^{-x/\\theta}\\). The exponential distribution has some interesting properties. In particular, if you have already waited for time period \\(z\\), then the conditional expectation is \\(z+\\theta\\).\nSuppose instead of waiting for one event, we wait for \\(k\\) events. Then we get the gamma distribution with shape parameter \\(k\\) and scale parameter \\(\\theta\\). Its probability density function is: \\[ f(x|k,\\theta) = \\frac{1}{\\Gamma(k)\\theta^k}x^{k-1}e^{-x/\\theta}\\]\nThe expected value is \\(k\\theta\\) and the standard deviation is \\(k\\theta^2\\).\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"shape\", label = \"Shape parameter\",\n              min=0, max=15, value=3, step=1),\n  \n  sliderInput(\"scale\", label = \"Scale parameter\",\n              min = 0.2, max = 25, value = 10, step = 0.1)\n),\nmainPanel(\n  plotOutput(\"plot\")))\n\nserver &lt;- function (input,output) {\n  output$plot &lt;- renderPlot({\n  shape &lt;- as.numeric(input$shape)\n  scale &lt;- as.numeric(input$scale)\n  curve(dgamma(x,shape,scale=scale),\n        xlim=c(0,100),ylim=c(0,.1),\n        main=paste(\"Gamma distribution with shape\",shape,\n                   \"and scale\",scale),\n        xlab=\"X\",ylab=\"Density\")\n\n})\n}\nshinyApp(ui=ui,server=server)\nBe somewhat careful when using the gamma distribution in R. The gamma distribution is often parameterized using the rate parameter \\(\\beta=1/theta\\). If you are using the scale parameter, you need to name it explicitly and not rely on the position.\nIf the shape parameter is 1, then the gamma distribution is just the exponential distribution. It is extremely positively skewed. As the shape parameter increases, the gamma distribution becomes more and more symmetric, eventually converging to the normal distribution.\nThe chi-squared distribution is also a special case of the gamma distribution, with parameters \\(k=\\nu/2\\) and \\(\\theta=\\nu\\) (where \\(\\nu\\) is the degrees of freedom). Therefore, the gamma distribution is often used to model variances."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Index of R Demonstrations for Intro Stat",
    "section": "",
    "text": "Florida State University\nThese are demonstrations which were written for EDF 5400, which is an introductory statistics class taught at the graduate level."
  },
  {
    "objectID": "index.html#index-of-r-demonstrations",
    "href": "index.html#index-of-r-demonstrations",
    "title": "Index of R Demonstrations for Intro Stat",
    "section": "Index of R Demonstrations",
    "text": "Index of R Demonstrations\n\n\n\n\nabout.qmd\n\n\nBinomialParms.qmd\n\n\nCentralLimitTheroem.qmd\n\n\nChi2calculator.qmd\n\n\nConditionalProbability.qmd\n\n\nConfidenceInterval.qmd\n\n\nCorrelation.qmd\n\n\nCorrelationExamples.qmd\n\n\nCorrelationExercise.qmd\n\n\nCorrelationOutliers.qmd\n\n\nCovidVaccines.qmd\n\n\nEffectSize.qmd\n\n\nGammaParams.qmd\n\n\nGeyser.qmd\n\n\nIndependence.qmd\n\n\nindex.qmd\n\n\nKurtosisBoxplots.qmd\n\n\nKurtosisPractice.qmd\n\n\nKurtosisQQ.qmd\n\n\nLawOfLargeNumbers.qmd\n\n\nLawOfLargeNumbersAnimated.qmd\n\n\nLogNormalParams.qmd\n\n\nNormalCalculator.qmd\n\n\nNormalParams.qmd\n\n\nPoissonParms.qmd\n\n\nRareDisease.qmd\n\n\nRegressionPrediction.qmd\n\n\nSkewnessBoxplot.qmd\n\n\nSkewnessPractice.qmd\n\n\nSkewnessQQ.qmd\n\n\nSlopeStandardErrors.qmd\n\n\nStandardDeviations.qmd\n\n\nStudenttcalculator.qmd\n\n\nTestCI.qmd\n\n\nVaccineCI.qmd\n\n\nZ-scores.qmd\n\n\n\n\n\n\n\nCC-BY\n\n\nThese are licensed under the creative commons CC BY 4.0 license. You many distribute, remix, adapt, and build upon the material in any medium or format, so long as attribution is given to the creator.\nFor more information contact Russell Almond.\nThe Source files for these demonstrations can be found at https://github.com/ralmond/IntroStats"
  },
  {
    "objectID": "NormalCalculator.html",
    "href": "NormalCalculator.html",
    "title": "Normal Calculator",
    "section": "",
    "text": "In this tool, you input a z score, and get a corresponding normal probability.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(z &lt; Z)\"=\"upper\",\n                          \"Lower tail: Pr(Z &lt; z)\"=\"lower\",\n                          \"Both tails: Pr(Z &lt;-z or z&lt; Z)\"=\"both\",\n                          \"Middle: Pr(-z &lt; Z &lt; z)\"=\"middle\"),\n              selected = \"both\"),\n  \n  numericInput(\"z\", label = \"Normal quantile (z):\", value=2)\n),\nmainPanel(\n  plotOutput(\"normcurve\")))\n\nserver &lt;- function (input,output) {\n  output$normcurve &lt;- \nrenderPlot({\n  q &lt;- input$z\n  p &lt;- switch(input$tails,\n              upper=1-pnorm(q),\n              lower=pnorm(q),\n              both=2*pnorm(-abs(q)),\n              middle=1-2*pnorm(-abs(q)))\n  xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n  curve(dnorm(x),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"z = \",round(q,3)),\n        xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"z\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n           polygon(cord.xu,cord.yu,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q)\n           cord.yl &lt;- c(0,dnorm(seq(-xl,q,0.01)),0)\n           polygon(cord.xl,cord.yl,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         both={\n           q &lt;- abs(q)\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n           polygon(cord.xu,cord.yu,col='skyblue')\n           cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q)\n           cord.yl &lt;- c(0,dnorm(seq(-xl,-q,0.01)),0)\n           polygon(cord.xl,cord.yl,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         },\n         middle={\n           q &lt;- abs(q)\n           cord.xmid &lt;- c(-q,seq(-q,q,0.01),q)\n           cord.ymid &lt;- c(0,dnorm(seq(-q,q,0.01)),0)\n           polygon(cord.xmid,cord.ymid,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         })\n  \n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "NormalCalculator.html#normal-probabilities.",
    "href": "NormalCalculator.html#normal-probabilities.",
    "title": "Normal Calculator",
    "section": "",
    "text": "In this tool, you input a z score, and get a corresponding normal probability.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"tails\", label = \"Which tails\",\n              choices = c(\"Upper tail: Pr(z &lt; Z)\"=\"upper\",\n                          \"Lower tail: Pr(Z &lt; z)\"=\"lower\",\n                          \"Both tails: Pr(Z &lt;-z or z&lt; Z)\"=\"both\",\n                          \"Middle: Pr(-z &lt; Z &lt; z)\"=\"middle\"),\n              selected = \"both\"),\n  \n  numericInput(\"z\", label = \"Normal quantile (z):\", value=2)\n),\nmainPanel(\n  plotOutput(\"normcurve\")))\n\nserver &lt;- function (input,output) {\n  output$normcurve &lt;- \nrenderPlot({\n  q &lt;- input$z\n  p &lt;- switch(input$tails,\n              upper=1-pnorm(q),\n              lower=pnorm(q),\n              both=2*pnorm(-abs(q)),\n              middle=1-2*pnorm(-abs(q)))\n  xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n  curve(dnorm(x),main=paste(\"Probability of shaded region = \",round(p,3)),\n        sub=paste(\"z = \",round(q,3)),\n        xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"z\")\n  switch(input$tails,\n         upper={\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n           polygon(cord.xu,cord.yu,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         lower={\n           cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q)\n           cord.yl &lt;- c(0,dnorm(seq(-xl,q,0.01)),0)\n           polygon(cord.xl,cord.yl,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n         },\n         both={\n           q &lt;- abs(q)\n           cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n           cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n           polygon(cord.xu,cord.yu,col='skyblue')\n           cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q)\n           cord.yl &lt;- c(0,dnorm(seq(-xl,-q,0.01)),0)\n           polygon(cord.xl,cord.yl,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         },\n         middle={\n           q &lt;- abs(q)\n           cord.xmid &lt;- c(-q,seq(-q,q,0.01),q)\n           cord.ymid &lt;- c(0,dnorm(seq(-q,q,0.01)),0)\n           polygon(cord.xmid,cord.ymid,col='skyblue')\n           axis(1,q,paste(round(q,3)),cex.axis=2)\n           axis(1,-q,paste(-round(q,3)),cex.axis=2)\n         })\n  \n})\n}\nshinyApp(ui=ui,server=server)"
  },
  {
    "objectID": "NormalCalculator.html#normal-quantiles.",
    "href": "NormalCalculator.html#normal-quantiles.",
    "title": "Normal Calculator",
    "section": "Normal Quantiles.",
    "text": "Normal Quantiles.\nIn this tool, you input a probability, and get a corresponding z score.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nui1 &lt;- fluidPage(\n inputPanel(\n   selectInput(\"tails1\", label = \"Which tails\",\n               choices = c(\"Upper tail: Pr(z &lt; Z)\"=\"upper\",\n                           \"Lower tail: Pr(Z &lt; z)\"=\"lower\",\n                           \"Both tails: Pr(Z &lt;-z or z&lt; Z)\"=\"both\",\n                           \"Middle: Pr(-z &lt; Z &lt; z)\"=\"middle\"),\n               selected = \"both\"),\n   \n   numericInput(\"p\", label = \"Probability of shaded region:\", value=0.05, min=0, max=1)\n ),\n mainPanel(plotOutput(\"normcurve1\")))\n \nserver1 &lt;- function(input,output) {\n output$normcurve1 &lt;- renderPlot({\n   pp &lt;- input$p\n   q &lt;- switch(input$tails1,\n               upper=qnorm(1-pp),\n               lower=qnorm(pp),\n               both=qnorm(1-pp/2),\n               middle=qnorm(.5+pp/2))\n   xl &lt;- round(max(3,ceiling(abs(q)+.5)),1)\n   curve(dnorm(x),main=paste(\"Probability of shaded region = \",round(pp,3)),\n         sub=paste(\"z = \",round(q,3)),\n         xlim = c(-xl,xl),yaxt=\"n\",cex=3,cex.lab=2,cex.main=2,ylab=\"\",xlab=\"z\")\n   switch(input$tails1,\n          upper={\n            cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n            cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n            polygon(cord.xu,cord.yu,col='skyblue')\n            axis(1,q,paste(round(q,3)),cex.axis=2)\n          },\n          lower={\n            cord.xl &lt;- c(-xl,seq(-xl,q,0.01),q)\n            cord.yl &lt;- c(0,dnorm(seq(-xl,q,0.01)),0)\n            polygon(cord.xl,cord.yl,col='skyblue')\n            axis(1,q,paste(round(q,3)),cex.axis=2)\n          },\n          both={\n            q &lt;- abs(q)\n            cord.xu &lt;- c(q,seq(q,xl,0.01),xl)\n            cord.yu &lt;- c(0,dnorm(seq(q,xl,0.01)),0)\n            polygon(cord.xu,cord.yu,col='skyblue')\n            cord.xl &lt;- c(-xl,seq(-xl,-q,0.01),-q)\n            cord.yl &lt;- c(0,dnorm(seq(-xl,-q,0.01)),0)\n            polygon(cord.xl,cord.yl,col='skyblue')\n            axis(1,q,paste(round(q,3)),cex.axis=2)\n            axis(1,-q,paste(-round(q,3)),cex.axis=2)\n          },\n          middle={\n            q &lt;- abs(q)\n            cord.xmid &lt;- c(-q,seq(-q,q,0.01),q)\n            cord.ymid &lt;- c(0,dnorm(seq(-q,q,0.01)),0)\n            polygon(cord.xmid,cord.ymid,col='skyblue')\n            axis(1,q,paste(round(q,3)),cex.axis=2)\n            axis(1,-q,paste(-round(q,3)),cex.axis=2)\n          })\n   \n })\n}\nshinyApp(ui1, server1)"
  },
  {
    "objectID": "BinomialParms.html",
    "href": "BinomialParms.html",
    "title": "Binomial Parameters",
    "section": "",
    "text": "The binomial distribution can be thought of as a number of draws, \\(n\\), from an urn with a proportion \\(p\\), of black balls.\nThe probability of drawing exactly \\(x\\) balls from an this urn is: \\[ p(X|n,p) = \\binom{n}{X} p^X (1-p)^{n-X}\\]\nThe expected value is \\(np\\), and the standard deviation is \\(\\sqrt{np(1-p)}\\).\nSometimes we write this in terms of the proportion of black balls in the sample. That is \\(p\\), with a standard deviation of \\(\\sqrt{p(1-p)/n}\\).\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(ggplot2)\nui &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"n\", label = \"Number of draws:\",\n              min=0, max=100, value=10, step=1),\n  \n  sliderInput(\"p\", label = \"Probability of success:\",\n              min = 0, max = 1, value = .6, step = 0.01)\n),\nmainPanel(\n  plotOutput(\"bincurve\")))\n\nserver &lt;- function (input,output) {\n  output$bincurve &lt;- renderPlot({\n  n &lt;- as.numeric(input$n)\n  p &lt;- as.numeric(input$p)\n  dat &lt;- data.frame(x=0:n,y=dbinom(0:n,n,p))\n  ggplot(dat,aes(x,y)) +geom_col()  \n\n})\n}\nshinyApp(ui=ui,server=server)\nNote that this distribution is positively skewed if \\(p &lt; 0.5\\) and negatively skewed if \\(p &gt; 0.5\\).\nNote how when \\(n\\) gets large, the binomial distribution looks a lot like the normal. This is one of the first central limit theorems that was discovered. (The closer that \\(p\\) is to 0 or 1, the longer convergence to the normal takes.)"
  },
  {
    "objectID": "SkewnessBoxplot.html",
    "href": "SkewnessBoxplot.html",
    "title": "Skewness Boxplot Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. Your job is to determine which is which.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"boxplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$boxplots &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(kdat)\n  \n  boxplot(kdat,xlab=\"X\")\n\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly."
  },
  {
    "objectID": "SkewnessBoxplot.html#skewness-determination-exercise.",
    "href": "SkewnessBoxplot.html#skewness-determination-exercise.",
    "title": "Skewness Boxplot Practice",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: A, B and C. These will be randomly assigned to a positively skewed, negatively skewed, and symmetric distribution type. Your job is to determine which is which.\nYou can redraw from the same distributions by changing the sample size.\n#| standalone: true\n#| viewerHeight: 500\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nskewNeg = list(\"beta(8,2)\"=function(n) rbeta(n,8,2),\n                \"normal with neg outliers\"=function (n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,-3),rnorm(n))\n                },\n                \"hypergeometric(975,25,100)\" = \n                  function (n) rhyper(n,975,25,100)),\nskewPos = list(\"gamma(3)\"=function(n) rgamma(n,3),\n                \"normal with positive outliers\"=function(n) {\n                  ifelse(runif(n)&lt;.05,rnorm(n,3),rnorm(n))\n                },\n                \"lognormal\"=function (n) rlnorm(n,0,.3)),\nsym = list(\"normal\"=rnorm, \"uniform\"=runif,\n            \"t(5 d.f.)\"=function (n) rt(n,5)))\nlongnames &lt;- c(\"Negatively Skewed\"=\"skewNeg\",\n               \"Positively Skewed\"=\"skewPos\",\n               \"Symmetric\"=\"sym\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"A\")-1L+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 100)),\nmainPanel(\n  plotOutput(\"boxplots\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$boxplots &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- as.data.frame(kdat)\n  \n  boxplot(kdat,xlab=\"X\")\n\n})\n  output$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly."
  },
  {
    "objectID": "SkewnessBoxplot.html#what-to-look-for",
    "href": "SkewnessBoxplot.html#what-to-look-for",
    "title": "Skewness Boxplot Practice",
    "section": "What to look for:",
    "text": "What to look for:\n\nIs the box from median to quartile longer on one side than the other?\nIs the whisker longer on one side than the other?\nAre there outliers on one side and not the other?\n\nAll three of these are signs of skewness in that direction (longer box, whisker, or outliers)."
  },
  {
    "objectID": "SkewnessBoxplot.html#related-pages",
    "href": "SkewnessBoxplot.html#related-pages",
    "title": "Skewness Boxplot Practice",
    "section": "Related Pages",
    "text": "Related Pages\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "RareDisease.html",
    "href": "RareDisease.html",
    "title": "Rare Disease – COVID-19",
    "section": "",
    "text": "The rare disease problem is one of those “paradoxes” of statistics. The results are surprising because their are two sources of information: the prevalence of the disease in the population and the accuracy of the test. Often the former is stronger evidence than the latter, so people find it surprising.\nThe question of interest is: “What is the probability that a patient has the disease, given that the patient tests positive?” (This is sometimes called the True Positive probability; one minus would be called the False Positive probability.) A related question of interest is “What is the probability that a patient does not have the disease given that the patient tests negative?” (This is the False Negative probability.)\nStart by defining some variables. Let \\(D \\in \\{Y,N\\}\\) be whether or not a given individual has the disease, and let \\(T\\in\\{+,-\\}\\) be whether that individual gets a positive or negative result on the test. The joint probability of \\(D, T\\) is characterized by three numbers:\nLets try an example. A company called BioResponse just (March 19, 2020) launched the CoronaCheck test kit (Press Release). This article reports: “Our manufacturers report a sensitivity of 97.2% and specificity of 92%.”\nNow the hard part: estimating the base rate. This is hard because (a) people can have very mild symptoms for days and not know they have the disease, and (b) there has been a general shortage of test kits. So relying on official numbers is likely to give a big underestimate. As I’m not planning on updating this web site in real time, the numbers I’m putting in here will be out of date by the time you read this.\nAs I live in Florida, I’ll use the official Florida numbers: https://floridahealthcovid19.gov/#latest-stats . As of 2020-03-22 18:000, there were 1007 known cases in Florida, which has a population of 21,992,985. That gives a base rate of 4.5787327^{-5}. For the US, the number is 33,276 known cases, and a population of 330,464,151 for a base rate of 1.0069473^{-4}.\nUpdate: As of 2020-09-02, the state of Florida is reporting 624,116 cases, for a base rate of 0.028378. Note that the number of known cases is smaller than the total number of cases (especially, as we have learned that some people get very mild symptoms and may not know they are sick to seek testing).\n\\(Update^2\\): I have found a web site which gives background rates for SARS-COV-2 by state and county, so you can get local information. Hopefully, they are updating with the latest numbers. microCOVID Project.\nThe thin bar on the left represents people who have COVID-19. There are still (fortunately) very few of them. The bar on top represents the false positives, fortunately, there are still a lot more of them than the true positives, so true positives are still rare. (May it always be so).\nOn the other hand, the false negative rate is very comforting. It means that if you test negative, you can be pretty sure that it is safe for you to be around other people (especially the old or sick)."
  },
  {
    "objectID": "RareDisease.html#sensitivity-analysis",
    "href": "RareDisease.html#sensitivity-analysis",
    "title": "Rare Disease – COVID-19",
    "section": "Sensitivity Analysis",
    "text": "Sensitivity Analysis\nDon’t forget that these base rates are underestimates. There is currently a shortage of tests, so these are only cases that have actually be able to be tested. Also, symptoms can take up to 3 days to appear, so some people who have it, probably don’t even know that they should ask to be tested. The actual infection rate could be 10 or more times as high as the known infection rate.\nAlso, there are various risk factors which should be added to the base rate. If the person being tested has traveled lately to an area with a higher rate, the base rate should go up. So too if the person has a fever or other symptoms of the virus.\nSo, play around with the base rate. Play with the sensitivity and specificity? How does this change? This will help you get a better feel for how the rare disease problem works.\nFinally, don’t forget that this thing grows exponentially fast (that is why it is a pandemic). This number could be go up very quickly. Here is an explanation.. ( As an aside, this is the kind of thing we would analyze on the log scale.)"
  },
  {
    "objectID": "RareDisease.html#how-would-this-test-be-used.",
    "href": "RareDisease.html#how-would-this-test-be-used.",
    "title": "Rare Disease – COVID-19",
    "section": "How would this test be used.",
    "text": "How would this test be used.\nActually, the most interesting thing about the CoronaCheck kit is that it only takes 15 minutes. This is great considering the older test takes 3 days. So assuming BioResponse can produce these quickly (or that other vendors come online with similar tests), these can be used for screening (say health care workers, or other first responders), as well as people presenting with other symptoms or having recently traveled.\nIf these people test positive on the quick screening test, they should be isolated and possibly a more sensitive (and probably time consuming) test be given. If they test negative, then they can be cleared to go about their normal activity. I’m sure this is how this test will be used.\nAnother factor is that doctors are simply not giving out tests unless there are other risk factors. I was in my doctors office for my daughter’s physical and talking to the nurse. She said that there was a woman who was tired (needs more sleep?) and congested (this is Tallahassee in March, the trees are raining pollen), but no fever. The nurse had to explain that she didn’t have enough test to give out unless there were more symptoms (particularly a fever). This will change as our testing capacity gets better (last I looked, Mar 20, the US was still doing only about 1/2 the number of test per capita as South Korea."
  },
  {
    "objectID": "RareDisease.html#dont-break-lockdownself-isolation",
    "href": "RareDisease.html#dont-break-lockdownself-isolation",
    "title": "Rare Disease – COVID-19",
    "section": "Don’t break lockdown/self-isolation",
    "text": "Don’t break lockdown/self-isolation\nDon’t panic, but do not be complacent either.\nSome of you reading this will be in official lockdown. Others will be under a self-distancing protocol. This is still extremely important as (1) the base rate will rise over time, probably quite quickly and (2) the disease takes up to 3 days to get started and the symptoms might appear like a common cold (Novel Coronavirus 19 is in fact an uncommon cold). You might have it and not know it yet. If you break the self-distancing protocol, you could be another Typhoid Mary spreading sickness and misery all around you.\nOh, and congrats to BioResponse on their breakthrough. I can’t judge the quality of the numbers from just a press release, but if they really can make that number of tests, that would be a big help. I hope lots of other biotech companies are working on this problem, too.\nStay healthy. Keep your distance. Wash your hands, and obey the local health authorities. Lets make sure we keep that base rate (i.e., the infection rate) low."
  },
  {
    "objectID": "Correlation.html",
    "href": "Correlation.html",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "The correlation coefficient is a measure of how closely (linearly) associated two variables are. It ranges from 1 (perfect positive relationship), to -1 (perfect negative relationship). At correlation zero there is no linear relationship between the variables. [It is possible for there to be a nonlinear, i.e., curved, relationship between the two variables and still have a zero correlation.]\nThe equation for the corrlation coefficient is: \\[ \\rho_{XY} = \\frac{{\\rm Cov}(X,Y)}{\\sqrt{{\\rm Var}(X){\\rm Var}(Y)}} \\] The sample form is \\[ r_{XY} = \\frac{\\left(\\sum_{i=1}^N (X_i-\\bar X)(Y_i -\\bar Y) \\right)/(N-1)}{s_X s_Y}\\] The covariance (on the top of the previous formula is very much like the formula for the variance, except it uses the sum of the cross products instead of the sum of squares.\nUnless you are a mathematician, those formulae are not very exciting. So instead take a look at the plot below. I’ve generated the data (using the sample size and seed you specified above) to generate data with a correlation that you specify. Adjust the correlation and watch what happens to the plot.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\nselectInput(\"N\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\nsliderInput(\"rho\", label = \"Correlation Coefficient:\",\n              min = -1, max = 1, value = 0, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"plot\")))\n\nserver &lt;- function (input,output) {\n  output$plot &lt;- renderPlot({\n  rho &lt;- input$rho\n  N &lt;- as.numeric(input$N)\n  X &lt;- rnorm(N)\n  Err &lt;- rnorm(N)\n  Y &lt;-  rho*X + sqrt(1-rho*rho)*Err\n  plot(X,Y,main=paste(\"Correlation =\",rho))\n  abline(a=0,b=rho,col=\"red\")\n},width=288,height=288)\n}\nshinyApp(ui=ui,server=server)\n\n\nGalton’s discovery was that if you want to predict \\(Y\\) from \\(X\\), then you want to regress that prediction towards the mean. If \\(X\\) and \\(Y\\) were perfectly correlated, then the \\(z\\)-score for a variable on the \\(X\\) scale would be the same for the variable on the \\(Y\\) scale, so all we need to do is change units. The ratio \\(\\sigma_Y/\\sigma_X\\) changes units from \\(X\\) to \\(Y\\). We also want the mean of \\(X\\) to map to the mean of \\(Y\\). The equation for this change-of-units line, the SD-line, is: \\[ \\widetilde y = \\frac{\\sigma_Y}{\\sigma_X} x + \\left ( \\mu_Y - \\frac{\\sigma_Y}{\\sigma_X} \\mu_X\\right ) .\\] The first term is the change of units, the second term makes sure the line goes through the mean of \\(X\\) and the mean of \\(Y\\).\nThe ideal discount is the correlation coefficient \\(\\rho_{XY}\\). This gives the the following final regression line:\n\\[\\widehat y = \\rho_{XY}\\frac{\\sigma_Y}{\\sigma_X} x + \\left ( \\mu_Y - \\rho_{XY}\\frac{\\sigma_Y}{\\sigma_X} \\mu_X\\right ) .\\] Because second term has \\(\\rho_{XY}\\) in it as well, this will make the predicted value closer to the mean of \\(Y\\), \\(\\mu_Y\\).\n The notations \\(\\widetilde{y}\\) and \\(\\widehat{y}\\) indicate predicted values for \\(y\\). The y hat (\\(\\widehat y\\)) notation is reserved for what is called maximum likelihood predictions. In the case of a regression with normally distributed errors, the maximum likelihood predictor is also the least squares estimator. Usually, the estimators use the sample values, thus in the regression equation:\n\\[ \\widehat{b_1} = r_{XY}\\frac{s_X}{s_Y}\\;;\\qquad \\widehat{b_0}=\\bar Y -r_{XY}\\frac{s_X}{s_Y} \\bar X\\; .\\]\n\n\n\nIn the graph below, you can set the mean and standard deviation of both X and Y as well as the correlation coefficient. The SD line is a dashed blue, and the regression line is a solid red. Play around for a bit.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N1\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  \n  sliderInput(\"mx\", label = \"Mean of X:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sx\", label = \"Standard Deviation of X:\",\n              min = 0.2, max = 25, value = 10, step = 0.1),\n  sliderInput(\"my\", label = \"Mean of Y:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sy\", label = \"Standard Deviation of Y:\",\n              min = 0.2, max = 25, value = 10, step = 0.1),\n  sliderInput(\"rxy\", label = \"Correlation between X and Y:\",\n              min = -1, max = 1, value = 0, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"plot1\")))\n\nserver1 &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlot({\n  N &lt;- as.numeric(input$N1)\n  X &lt;- rnorm(N)\n  Err &lt;- rnorm(N)\n  rxy &lt;- input$rxy\n  mx &lt;- input$mx\n  my &lt;- input$my\n  sx &lt;- input$sx\n  sy &lt;- input$sy\n  beta1 &lt;- sy/sx\n  beta0 &lt;- my - beta1*mx\n  b1 &lt;- rxy*beta1\n  b0 &lt;- my - b1*mx\n  XX &lt;- mx + sx*X\n  YY &lt;- sy*(rxy*X + sqrt(1-rxy*rxy)*Err) + my\n  plot(XX,YY,main=paste(\"Regression Line (solid) y =\",round(b1,2),\"x + \",round(b0,2)), sub=paste(\"SD Line (dashed) y =\",round(beta1,2),\"x + \",round(beta0,2)))\n  abline(a=b0,b=b1,col=\"red\")\n  abline(a=beta0,b=beta1,col=\"blue\",lty=2)\n},width=288,height=288)\n}\nshinyApp(ui=ui1,server=server1)\nNotice how changing the means and standard deviations doesn’t change much except the numbers in the equations and the labels on the axis. This is because R is automatically adjusting the scale of the graphs to fit the data. In this view, the SD line, the one that is a change of scale, is a perfect 45 degress, no matter what.\nActually, if you set the correlation coefficient to be the same in the two plots, they should look the same. The two plots show the same data, its just in the lower plot, the data are transformed to fit the statistis. Correlation is a property that is independent from Mean and SD.\n\n\n\nThis is how I generated the data with the given correlations.\nFor the first plot, I first generated two vectors of standard normal numbers, \\({\\bf X}\\) and \\({\\bf e}\\), that is with mean 0 and standard deviation 1. Then I defined \\({\\bf Y}\\) with the following equation: \\[ Y_i = \\rho_{XY}X_i + \\sqrt{(1-\\rho_{XY}^2)}\\ e_i\\] As \\(\\rho_{XY}^2 + (1-\\rho_{XY}^2) =1\\), \\({\\bf Y}\\) also has mean 0 and standard deviation 1.\nFor the second plot, I used the following expressions: \\[ XX_i = \\mu_X + \\sigma_X X_i\\;; \\qquad YY_i = \\mu_X + \\sigma_Y Y_i\\;.\\] The transformation is exactly the same."
  },
  {
    "objectID": "Correlation.html#regression.",
    "href": "Correlation.html#regression.",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "Galton’s discovery was that if you want to predict \\(Y\\) from \\(X\\), then you want to regress that prediction towards the mean. If \\(X\\) and \\(Y\\) were perfectly correlated, then the \\(z\\)-score for a variable on the \\(X\\) scale would be the same for the variable on the \\(Y\\) scale, so all we need to do is change units. The ratio \\(\\sigma_Y/\\sigma_X\\) changes units from \\(X\\) to \\(Y\\). We also want the mean of \\(X\\) to map to the mean of \\(Y\\). The equation for this change-of-units line, the SD-line, is: \\[ \\widetilde y = \\frac{\\sigma_Y}{\\sigma_X} x + \\left ( \\mu_Y - \\frac{\\sigma_Y}{\\sigma_X} \\mu_X\\right ) .\\] The first term is the change of units, the second term makes sure the line goes through the mean of \\(X\\) and the mean of \\(Y\\).\nThe ideal discount is the correlation coefficient \\(\\rho_{XY}\\). This gives the the following final regression line:\n\\[\\widehat y = \\rho_{XY}\\frac{\\sigma_Y}{\\sigma_X} x + \\left ( \\mu_Y - \\rho_{XY}\\frac{\\sigma_Y}{\\sigma_X} \\mu_X\\right ) .\\] Because second term has \\(\\rho_{XY}\\) in it as well, this will make the predicted value closer to the mean of \\(Y\\), \\(\\mu_Y\\).\n The notations \\(\\widetilde{y}\\) and \\(\\widehat{y}\\) indicate predicted values for \\(y\\). The y hat (\\(\\widehat y\\)) notation is reserved for what is called maximum likelihood predictions. In the case of a regression with normally distributed errors, the maximum likelihood predictor is also the least squares estimator. Usually, the estimators use the sample values, thus in the regression equation:\n\\[ \\widehat{b_1} = r_{XY}\\frac{s_X}{s_Y}\\;;\\qquad \\widehat{b_0}=\\bar Y -r_{XY}\\frac{s_X}{s_Y} \\bar X\\; .\\]"
  },
  {
    "objectID": "Correlation.html#lets-try-it.",
    "href": "Correlation.html#lets-try-it.",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "In the graph below, you can set the mean and standard deviation of both X and Y as well as the correlation coefficient. The SD line is a dashed blue, and the regression line is a solid red. Play around for a bit.\n#| standalone: true\n#| viewerHeight: 750\nlibrary(shiny)\nui1 &lt;- fluidPage(\ninputPanel(\n  selectInput(\"N1\", label = \"Sample Size:\",\n              choices = c(25, 50, 100, 250, 500, 1000), selected = 100),\n  \n  sliderInput(\"mx\", label = \"Mean of X:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sx\", label = \"Standard Deviation of X:\",\n              min = 0.2, max = 25, value = 10, step = 0.1),\n  sliderInput(\"my\", label = \"Mean of Y:\",\n              min=0, max=100, value=50, step=1),\n  \n  sliderInput(\"sy\", label = \"Standard Deviation of Y:\",\n              min = 0.2, max = 25, value = 10, step = 0.1),\n  sliderInput(\"rxy\", label = \"Correlation between X and Y:\",\n              min = -1, max = 1, value = 0, step = 0.05)\n),\nmainPanel(\n  plotOutput(\"plot1\")))\n\nserver1 &lt;- function (input,output) {\n  output$plot1 &lt;- renderPlot({\n  N &lt;- as.numeric(input$N1)\n  X &lt;- rnorm(N)\n  Err &lt;- rnorm(N)\n  rxy &lt;- input$rxy\n  mx &lt;- input$mx\n  my &lt;- input$my\n  sx &lt;- input$sx\n  sy &lt;- input$sy\n  beta1 &lt;- sy/sx\n  beta0 &lt;- my - beta1*mx\n  b1 &lt;- rxy*beta1\n  b0 &lt;- my - b1*mx\n  XX &lt;- mx + sx*X\n  YY &lt;- sy*(rxy*X + sqrt(1-rxy*rxy)*Err) + my\n  plot(XX,YY,main=paste(\"Regression Line (solid) y =\",round(b1,2),\"x + \",round(b0,2)), sub=paste(\"SD Line (dashed) y =\",round(beta1,2),\"x + \",round(beta0,2)))\n  abline(a=b0,b=b1,col=\"red\")\n  abline(a=beta0,b=beta1,col=\"blue\",lty=2)\n},width=288,height=288)\n}\nshinyApp(ui=ui1,server=server1)\nNotice how changing the means and standard deviations doesn’t change much except the numbers in the equations and the labels on the axis. This is because R is automatically adjusting the scale of the graphs to fit the data. In this view, the SD line, the one that is a change of scale, is a perfect 45 degress, no matter what.\nActually, if you set the correlation coefficient to be the same in the two plots, they should look the same. The two plots show the same data, its just in the lower plot, the data are transformed to fit the statistis. Correlation is a property that is independent from Mean and SD."
  },
  {
    "objectID": "Correlation.html#for-the-more-mathematically-inclined.",
    "href": "Correlation.html#for-the-more-mathematically-inclined.",
    "title": "Correlation Coefficient",
    "section": "",
    "text": "This is how I generated the data with the given correlations.\nFor the first plot, I first generated two vectors of standard normal numbers, \\({\\bf X}\\) and \\({\\bf e}\\), that is with mean 0 and standard deviation 1. Then I defined \\({\\bf Y}\\) with the following equation: \\[ Y_i = \\rho_{XY}X_i + \\sqrt{(1-\\rho_{XY}^2)}\\ e_i\\] As \\(\\rho_{XY}^2 + (1-\\rho_{XY}^2) =1\\), \\({\\bf Y}\\) also has mean 0 and standard deviation 1.\nFor the second plot, I used the following expressions: \\[ XX_i = \\mu_X + \\sigma_X X_i\\;; \\qquad YY_i = \\mu_X + \\sigma_Y Y_i\\;.\\] The transformation is exactly the same."
  },
  {
    "objectID": "ConditionalProbability.html",
    "href": "ConditionalProbability.html",
    "title": "ConditionalProbability",
    "section": "",
    "text": "On Oct 1, Merck announced exciting results for a new drug, Molnupiravir a pill for treating patients with COVID-19. The results were good enough by 29 days into the study, that they submitted the results to the FDA for emergency approval. (Note that the link above is to a press release and not to a scientific paper that has been peer or FDA review; but if the results hold up to scrutiny, this could be exciting.)\nHere is the relevant bit of the press release: &gt; At the interim analysis, molnupiravir reduced the risk of hospitalization or death by approximately 50%; 7.3% of patients who received molnupiravir were either hospitalized or died through Day 29 following randomization (28/385), compared with 14.1% of placebo-treated patients (53/377); p=0.0012.\nFrom this we can construct the following data table.\n\nn &lt;- c(drug=385,placebo=377)\nhd &lt;- c(drug=28,placebo=53)\nnhd &lt;- n-hd\ntab &lt;- data.frame(hd,nhd,n)\ntab1 &lt;- rbind(tab,Total=colSums(tab))\ntab1\n\n        hd nhd   n\ndrug    28 357 385\nplacebo 53 324 377\nTotal   81 681 762\n\n\nA mosaic plot allows us to look at this table graphically.\n\n## Subset to just the inner part of the table.\nppddat &lt;- as.matrix(tab[,1:2])\nnames(dimnames(ppddat)) &lt;- c(\"Treatment\",\"Outcome\")\nstrucplot(ppddat,labeling=labeling_values(\"observed\"))"
  },
  {
    "objectID": "ConditionalProbability.html#some-example-data.",
    "href": "ConditionalProbability.html#some-example-data.",
    "title": "ConditionalProbability",
    "section": "",
    "text": "On Oct 1, Merck announced exciting results for a new drug, Molnupiravir a pill for treating patients with COVID-19. The results were good enough by 29 days into the study, that they submitted the results to the FDA for emergency approval. (Note that the link above is to a press release and not to a scientific paper that has been peer or FDA review; but if the results hold up to scrutiny, this could be exciting.)\nHere is the relevant bit of the press release: &gt; At the interim analysis, molnupiravir reduced the risk of hospitalization or death by approximately 50%; 7.3% of patients who received molnupiravir were either hospitalized or died through Day 29 following randomization (28/385), compared with 14.1% of placebo-treated patients (53/377); p=0.0012.\nFrom this we can construct the following data table.\n\nn &lt;- c(drug=385,placebo=377)\nhd &lt;- c(drug=28,placebo=53)\nnhd &lt;- n-hd\ntab &lt;- data.frame(hd,nhd,n)\ntab1 &lt;- rbind(tab,Total=colSums(tab))\ntab1\n\n        hd nhd   n\ndrug    28 357 385\nplacebo 53 324 377\nTotal   81 681 762\n\n\nA mosaic plot allows us to look at this table graphically.\n\n## Subset to just the inner part of the table.\nppddat &lt;- as.matrix(tab[,1:2])\nnames(dimnames(ppddat)) &lt;- c(\"Treatment\",\"Outcome\")\nstrucplot(ppddat,labeling=labeling_values(\"observed\"))"
  },
  {
    "objectID": "ConditionalProbability.html#pr-ohd",
    "href": "ConditionalProbability.html#pr-ohd",
    "title": "ConditionalProbability",
    "section": "Pr (O=HD)",
    "text": "Pr (O=HD)\nWith no bar, indicating no conditioning, we are looking at the probability among all people in the sample. This is called the marginal probability because it comes from the margins (sums) of the table.\n\n\n\n\n\n\n\n\n\nThe marginal (no condition) probability of a negative (hospitalization or death) outcome is 81 (red areas)/762 (blue areas) = 0.106."
  },
  {
    "objectID": "ConditionalProbability.html#pr-ohd-t-drug",
    "href": "ConditionalProbability.html#pr-ohd-t-drug",
    "title": "ConditionalProbability",
    "section": "Pr (O=HD | T = Drug)",
    "text": "Pr (O=HD | T = Drug)\nThe bar conditions or restricts the sample to just the people who meet the condition, in this case, those that have taken the active treatment.\n\n\n\n\n\n\n\n\n\nThe condtional probability of a negative (hospitalization or death) outcome given the drug is 28 (red areas)/385 (purple areas) = 0.073."
  },
  {
    "objectID": "ConditionalProbability.html#pr-ohd-t-placebo",
    "href": "ConditionalProbability.html#pr-ohd-t-placebo",
    "title": "ConditionalProbability",
    "section": "Pr (O=HD | T = Placebo)",
    "text": "Pr (O=HD | T = Placebo)\nThe bar conditions or restricts the sample to just the people who meet the condition, in this case, those that have taken the placebo treatment.\n\n\n\n\n\n\n\n\n\nTThe condtional probability of a negative (hospitalization or death) outcome given the placebo is 53 (red areas)/377 (purple areas) = 0.141."
  },
  {
    "objectID": "ConditionalProbability.html#independence",
    "href": "ConditionalProbability.html#independence",
    "title": "ConditionalProbability",
    "section": "Independence",
    "text": "Independence\nIf the drug was independent of hospitalization, then the two probabilities we calculated above should be the same. In fact, when we calculate the ratio, we get 0.517. A huge improvement. No wonder Merck was so excited.\nWe should also be able to look at the column probabilities in the same way. The original sample is close to a 50-50 split between drug and placebo. (It actually 0.505, probably because they were not finished their recruting. This little bit of unbalance doesn’t matter). However, when we look at the fraction of the people who were hospitalized who got the drug \\(\\Pr(Treatment=drug | Outcome=HD)\\) we see it is 0.346. Once again this is very different.\nSuppose we have two variables \\(A\\) with possible outcomes \\(\\{a_1,\\ldots,a_J\\}\\) and \\(B\\) with possible outcomes \\(\\{b_1,\\ldots,b_K\\}\\). If \\(A\\) and \\(B\\) are independent, three different relationships will hold:\n\n\\(\\Pr(A=a_j | B=b_k) = \\Pr(A=a_j | B=b_k') = \\Pr(A=a_j) \\qquad \\forall j,k,k'\\)\n\\(\\Pr(B=b_k | A=a_j) = \\Pr(B=b_k | A=a_j') = \\Pr(B=b_j) \\qquad \\forall j,j',k\\)\n\\(\\Pr(A=a_j \\wedge B=b_k) = \\Pr(A=a_j) \\Pr(B=b_k) \\qquad \\forall j,k\\) (where \\(\\wedge\\) means and).\n\nRecall that the conditional probability is formally defined as \\[ \\Pr(A=a_j|B=b_k) = \\frac{\\Pr(A=a_j \\wedge B=b_k)}{\\Pr(B=b_k)} \\ .\\] So if \\(\\Pr(B=b_k)=0\\) for any \\(k\\), then the first expression doesn’t quite work right because we need to divide by zero. Similarly, the second has problems if \\(\\Pr(A=a_j)=0\\) for any \\(j\\). Therfore, the thrid expression is used as the definition, because it avoids the technical problems (divide by zero in certain cases) of the first two. But I think the first two give better intuition for what independence means."
  },
  {
    "objectID": "ConditionalProbability.html#the-chi-square-test",
    "href": "ConditionalProbability.html#the-chi-square-test",
    "title": "ConditionalProbability",
    "section": "The Chi-square test",
    "text": "The Chi-square test\nNote that even though the experimental design called for equal numbers in the drug and placebo arms of the studies, random events in how the participants were recruited made them slightly unequal. This is likely just luck, and not a serious problem.\nNow look at the different probabilities of a negative outcome for the drug and the placebo. How do we know if that is real, or just luck? One way we could answer that question is to build a statistical model for “just luck” and calculate how like the the observed data are if that model is true.\nIn this case, the model for “just luck” is the independence value up above. Using that we can calculate the expected values."
  },
  {
    "objectID": "KurtosisQQ.html",
    "href": "KurtosisQQ.html",
    "title": "Kurtosis Practice using Quantile-Quantile Plots",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions. The data (sorted in order) are plotted on the Y axis and the quantiles of a standard normal (qnorm) distribution are plotted on the X axis. A normal distribution should appear as a straight line; leptokurtic and platykurtic distributions as ‘S’ or ‘Z’ curves. (A ‘U’ or ‘C’ shaped curve indicates skewness, not kurtosis.) Note: SPSS plots the normal quantiles on the Y axis and the data on the X: Which means that leptokurtic and platykurtic distributions will curve in the opposite direction from these Q-Q plots.\nYou can redraw from the same distributions by changing the sample size (higher sample sizes are easier to see).\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 500)),\nmainPanel(\n  plotOutput(\"QQs\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$QQs &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- \n    data.frame(dat=do.call(c,kdat),\n               group=rep(names(key),\n                          each=input$nn))\n  \n  qqmath(~dat|group, data = kdat,\n          layout=c(3,1),horizontal=FALSE,\n         panel=function(x,...) {\n           panel.qqmathline(x,...)\n           panel.qqmath(x,...)\n           })\n\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "KurtosisQQ.html#kurtosis-determination-exercise.",
    "href": "KurtosisQQ.html#kurtosis-determination-exercise.",
    "title": "Kurtosis Practice using Quantile-Quantile Plots",
    "section": "",
    "text": "In this exercise, the computer will generate 3 datasets: X, Y and Z. These will be randomly assigned to high (leptokurtic), medium (mesokurtic) and low (platykurtic) distributions. The data (sorted in order) are plotted on the Y axis and the quantiles of a standard normal (qnorm) distribution are plotted on the X axis. A normal distribution should appear as a straight line; leptokurtic and platykurtic distributions as ‘S’ or ‘Z’ curves. (A ‘U’ or ‘C’ shaped curve indicates skewness, not kurtosis.) Note: SPSS plots the normal quantiles on the Y axis and the data on the X: Which means that leptokurtic and platykurtic distributions will curve in the opposite direction from these Q-Q plots.\nYou can redraw from the same distributions by changing the sample size (higher sample sizes are easier to see).\n#| standalone: true\n#| viewerHeight: 750\nlibrary(lattice)\nlibrary(shiny)\n\ndistlist &lt;-list(\nplatykurtic = list(\"Uniform\"=runif,\n  \"Mixture of normals (different means)\"=\n    function (n)\n      ifelse(runif(n)&lt;.5,rnorm(n,-1),\n               rnorm(n,1)),\n  \"beta(1.5,1.5\" =  function (n)\n    rbeta(n,1.5,1.5)),\nleptokurtic = list(\"t(df=5)\"=function(n) rt(n,5),\n                \"Mixture of normals (different sds)\"=\n                  function (n)\n       ifelse(runif(n)&lt;.25,rnorm(n,0,3),\n               rnorm(n,0,1)),\n       \"Exponential\" = rexp),\nmesokurtic = list(\"normal\"=rnorm, \n                  \"Wiebul(2,2)\"= function (n)\n                    rweibull(n,2,2),\n                  \"Binomial(.45,10)\"=function(n)\n                    rbinom(n,10,.45)))\n\nlongnames &lt;- c(\"Platykurtic (flat)\"=\"platykurtic\",\n               \"Leptokurtic (heavy tails)\"=\"leptokurtic\",\n               \"Mesokurtic (normal)\"=\"mesokurtic\")\n## Initial draw, so that we have some starting values.\nkey &lt;- \n{\n  ## Randomly permute the types.  \n  key &lt;- sample(names(distlist),length(distlist))\n  ## Label from A -- C (or whatever)  \n  names(key) &lt;- sapply(1L:length(key),\n       function (i)\n         intToUtf8(utf8ToInt(\"Z\")-length(key)+i))\n  key\n}\nkdist &lt;- \n{\n    # draw random distribution for each plot\n    sapply(key, function (r)  \n        sample(names(distlist[[r]]),1L))\n}\n\nui &lt;- fluidPage(\ninputPanel(\n  selectInput(\"nn\", label = \"Sample Size:\",\n              choices = c(50, 100, 500, 1000), selected = 500)),\nmainPanel(\n  plotOutput(\"QQs\")),\n  h4(\"Which is which?\"),\n  p(\"Identify the skewness of each distribution.\"),\n  do.call(inputPanel,\n         lapply(names(key), function (k)\n                selectInput(k, label=k,\n                  choices=c(Unknown=\"unknown\", \n                           longnames),\n                  selected=\"unknown\"))),\n  h4(\"Answers:\\n\"),\n  tableOutput(\"answers\"))\n\nserver &lt;- function (input,output) {\n  output$QQs &lt;- renderPlot({\n    ## Draw random data \n    kdat &lt;- lapply(names(key), function (k) {\n    x &lt;-do.call(distlist[[key[k]]][[kdist[k]]],\n                list(input$nn))\n      scale(x,(min(x)+max(x))/2,(max(x)-min(x)))*100+50\n  })\n  names(kdat) &lt;- names(key)\n  kdat &lt;- \n    data.frame(dat=do.call(c,kdat),\n               group=rep(names(key),\n                          each=input$nn))\n  \n  qqmath(~dat|group, data = kdat,\n          layout=c(3,1),horizontal=FALSE,\n         panel=function(x,...) {\n           panel.qqmathline(x,...)\n           panel.qqmath(x,...)\n           })\n\n})\noutput$answers &lt;- renderTable({\n  answer &lt;- sapply(names(key),\n   function (k) {\n      if (input[[k]]==\"unknown\") {\n        \"Make your selection.\\n\"\n      } else {\n        paste(ifelse(input[[k]]==key[k],\n                     \"Correct:\", \"Incorrect:\"),\n              \"Distribution was\",kdist[k],\n               \"(\",\n        names(longnames)[grep(key[k],longnames)],\n               \")\\n\")\n    }})\n  names(answer) &lt;- names(key)\n  as.data.frame(answer)\n}, colnames=FALSE,rownames=TRUE)\n}\nshinyApp(ui=ui,server=server)\nTo try again with different distributions, reload the page. If you are having trouble, try increasing the sample size: sometimes a small sample won’t display the characteristics of the distribution strongly.\nHere are the other exercises in this series:\n\nSkewness Practice:\n\nHistograms\nBoxplots\nQ-Q Plots\n\nKurtosis Practice:\n\nHistograms\nBoxplots\nQ-Q Plots"
  },
  {
    "objectID": "StandardDeviations.html",
    "href": "StandardDeviations.html",
    "title": "Standard Deviations",
    "section": "",
    "text": "data &lt;- rnorm(15,mean=0,sd=2)\nplot(data,1:length(data))\nabline(v=mean(data))\nsegments(mean(data),1:length(data),data,1:length(data))\n\n\n\n\n\n\n\nsd(data)\n\n[1] 2.485307\n\nhist(data)\n\n\n\n\n\n\n\n\n\\[ \\sqrt(\\sum (X_i - \\mu)^2/N) \\]\n\ndata1 &lt;- c(11,13,14,15,17,18,19,20)\ndata2 &lt;- c(12,15,15,15,15,15,15,15)\ndata3 &lt;- c(5,13,19,24,33,38,51,70)\ndata4 &lt;- c(11,12,13,16,18,20,22,23)\npar(mfrow=c(2,2))\nplot(data1,1:length(data1),main=\"Data 1\",xlim=c(0,50))\nabline(v=mean(data1))\nsegments(mean(data1),1:length(data1),data1,1:length(data1))\nsd(data1)\n\n[1] 3.136764\n\nplot(data2,1:length(data2),main=\"Data 2\",xlim=c(0,50))\nabline(v=mean(data2))\nsegments(mean(data2),1:length(data2),data2,1:length(data2))\nsd(data2)\n\n[1] 1.06066\n\nplot(data3,1:length(data3),main=\"Data 3\",xlim=c(0,50))\nabline(v=mean(data3))\nsegments(mean(data3),1:length(data3),data3,1:length(data3))\nsd(data3)\n\n[1] 21.25987\n\nplot(data4,1:length(data4),main=\"Data 4\",xlim=c(0,50))\nabline(v=mean(data4))\nsegments(mean(data4),1:length(data4),data4,1:length(data4))\n\n\n\n\n\n\n\nsd(data4)\n\n[1] 4.611709"
  },
  {
    "objectID": "LogNormalParams.html",
    "href": "LogNormalParams.html",
    "title": "Normal Parameters",
    "section": "",
    "text": "A parameter is a value that can be changed in a statistical model. For example, the mean and standard deviation are the parameters of the normal distribution, which is a model for a population. Changing the value of a parameter, changes the model. We can see that in the illustration below. Try changing the values of the mean and standard deviation and see what happens to the shape of the curve."
  },
  {
    "objectID": "LogNormalParams.html#inputs-and-outputs",
    "href": "LogNormalParams.html#inputs-and-outputs",
    "title": "Normal Parameters",
    "section": "Inputs and Outputs",
    "text": "Inputs and Outputs\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nui &lt;- fluidPage(\ninputPanel(\n  sliderInput(\"mn\", label = \"Mean Log:\",\n              min=-50, max=50, value=0, step=1),\n  \n  sliderInput(\"sd\", label = \"Standard Deviation Log:\",\n              min = 0.2, max = 10, value = 2, step = 0.1)\n),\nmainPanel(\n  plotOutput(\"lognormcurve\")))\n\nserver &lt;- function (input,output) {\n  output$lognormcurve &lt;- renderPlot({\n  mn &lt;- as.numeric(input$mn)\n  sd &lt;- as.numeric(input$sd)\n  xlim &lt;- qlnorm(c(.001,.999),mn,sd)\n  curve(dlnorm(x,mn,sd),xlim=xlim,\n        main=paste(\"Lognormal distribution with mean log\",mn,\n                   \"and log standard deviation\",sd),\n        xlab=\"X\",ylab=\"Density\",log=\"x\")\n\n})\n}\nshinyApp(ui=ui,server=server)"
  }
]